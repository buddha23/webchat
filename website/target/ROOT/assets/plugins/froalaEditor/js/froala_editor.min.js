!function(factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    if ("object" == typeof module && module.exports) {
      /**
       * @param {?} PromiseArray
       * @param {number} $
       * @return {?}
       */
      module.exports = function(PromiseArray, $) {
        return void 0 === $ && ($ = "undefined" != typeof window ? require("jquery") : require("jquery")(PromiseArray)), factory($), $;
      };
    } else {
      factory(jQuery);
    }
  }
}(function($) {
  /**
   * @param {Node} element
   * @param {boolean} options
   * @return {undefined}
   */
  var start = function(element, options) {
    /** @type {number} */
    this.id = ++$.FE.ID;
    this.opts = $.extend(true, {}, $.extend({}, start.DEFAULTS, "object" == typeof options && options));
    /** @type {string} */
    var primaryKey = JSON.stringify(this.opts);
    $.FE.OPTS_MAPPING[primaryKey] = $.FE.OPTS_MAPPING[primaryKey] || this.id;
    this.sid = $.FE.OPTS_MAPPING[primaryKey];
    $.FE.SHARED[this.sid] = $.FE.SHARED[this.sid] || {};
    this.shared = $.FE.SHARED[this.sid];
    this.shared.count = (this.shared.count || 0) + 1;
    this.$oel = $(element);
    this.$oel.data("froala.editor", this);
    this.o_doc = element.ownerDocument;
    this.o_win = "defaultView" in this.o_doc ? this.o_doc.defaultView : this.o_doc.parentWindow;
    var oldScrollTop = $(this.o_win).scrollTop();
    this.$oel.on("froala.doInit", $.proxy(function() {
      this.$oel.off("froala.doInit");
      this.doc = this.$el.get(0).ownerDocument;
      this.win = "defaultView" in this.doc ? this.doc.defaultView : this.doc.parentWindow;
      this.$doc = $(this.doc);
      this.$win = $(this.win);
      if (!this.opts.pluginsEnabled) {
        /** @type {Array.<string>} */
        this.opts.pluginsEnabled = Object.keys($.FE.PLUGINS);
      }
      if (this.opts.initOnClick) {
        this.load($.FE.MODULES);
        this.$el.on("touchstart.init", function() {
          $(this).data("touched", true);
        });
        this.$el.on("touchmove.init", function() {
          $(this).removeData("touched");
        });
        this.$el.on("mousedown.init touchend.init dragenter.init focus.init", $.proxy(function(e) {
          if ("touchend" == e.type && !this.$el.data("touched")) {
            return true;
          }
          if (1 === e.which || 0 === e.which) {
            this.$el.off("mousedown.init touchstart.init touchmove.init touchend.init dragenter.init focus.init");
            this.load($.FE.MODULES);
            this.load($.FE.PLUGINS);
            var el = e.originalEvent && e.originalEvent.originalTarget;
            if (el) {
              if ("IMG" == el.tagName) {
                $(el).trigger("mousedown");
              }
            }
            if ("undefined" == typeof this.ul) {
              this.destroy();
            }
            if ("touchend" == e.type) {
              if (this.image) {
                if (e.originalEvent) {
                  if (e.originalEvent.target) {
                    if ($(e.originalEvent.target).is("img")) {
                      setTimeout($.proxy(function() {
                        this.image.edit($(e.originalEvent.target));
                      }, this), 100);
                    }
                  }
                }
              }
            }
            this.events.trigger("initialized");
          }
        }, this));
      } else {
        this.load($.FE.MODULES);
        this.load($.FE.PLUGINS);
        $(this.o_win).scrollTop(oldScrollTop);
        if ("undefined" == typeof this.ul) {
          this.destroy();
        }
        this.events.trigger("initialized");
      }
    }, this));
    this._init();
  };
  start.DEFAULTS = {
    initOnClick : false,
    pluginsEnabled : null
  };
  start.MODULES = {};
  start.PLUGINS = {};
  /** @type {string} */
  start.VERSION = "2.3.4";
  /** @type {Array} */
  start.INSTANCES = [];
  start.OPTS_MAPPING = {};
  start.SHARED = {};
  /** @type {number} */
  start.ID = 0;
  /**
   * @return {undefined}
   */
  start.prototype._init = function() {
    var nodeName = this.$oel.prop("tagName");
    var CLICK = $.proxy(function() {
      this._original_html = this._original_html || this.$oel.html();
      this.$box = this.$box || this.$oel;
      if (this.opts.fullPage) {
        /** @type {boolean} */
        this.opts.iframe = true;
      }
      if (this.opts.iframe) {
        this.$iframe = $('<iframe src="about:blank" frameBorder="0">');
        this.$wp = $("<div></div>");
        this.$box.html(this.$wp);
        this.$wp.append(this.$iframe);
        this.$iframe.get(0).contentWindow.document.open();
        this.$iframe.get(0).contentWindow.document.write("<!DOCTYPE html>");
        this.$iframe.get(0).contentWindow.document.write("<html><head></head><body></body></html>");
        this.$iframe.get(0).contentWindow.document.close();
        this.$el = this.$iframe.contents().find("body");
        this.$head = this.$iframe.contents().find("head");
        this.$html = this.$iframe.contents().find("html");
        this.iframe_document = this.$iframe.get(0).contentWindow.document;
        this.$oel.trigger("froala.doInit");
      } else {
        this.$el = $("<div></div>");
        this.$wp = $("<div></div>").append(this.$el);
        this.$box.html(this.$wp);
        this.$oel.trigger("froala.doInit");
      }
    }, this);
    var addAll = $.proxy(function() {
      this.$box = $("<div>");
      this.$oel.before(this.$box).hide();
      this._original_html = this.$oel.val();
      this.$oel.parents("form").on("submit." + this.id, $.proxy(function() {
        this.events.trigger("form.submit");
      }, this));
      this.$oel.parents("form").on("reset." + this.id, $.proxy(function() {
        this.events.trigger("form.reset");
      }, this));
      CLICK();
    }, this);
    var requestAnimationFrame = $.proxy(function() {
      this.$el = this.$oel;
      this.$el.attr("contenteditable", true).css("outline", "none").css("display", "inline-block");
      /** @type {boolean} */
      this.opts.multiLine = false;
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.trigger("froala.doInit");
    }, this);
    var to_string = $.proxy(function() {
      this.$el = this.$oel;
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.trigger("froala.doInit");
    }, this);
    var attach = $.proxy(function() {
      this.$el = this.$oel;
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.on("click.popup", function(types) {
        types.preventDefault();
      });
      this.$oel.trigger("froala.doInit");
    }, this);
    if (this.opts.editInPopup) {
      attach();
    } else {
      if ("TEXTAREA" == nodeName) {
        addAll();
      } else {
        if ("A" == nodeName) {
          requestAnimationFrame();
        } else {
          if ("IMG" == nodeName) {
            to_string();
          } else {
            if ("BUTTON" == nodeName || "INPUT" == nodeName) {
              /** @type {boolean} */
              this.opts.editInPopup = true;
              /** @type {boolean} */
              this.opts.toolbarInline = false;
              attach();
            } else {
              CLICK();
            }
          }
        }
      }
    }
  };
  /**
   * @param {Object} files
   * @return {?}
   */
  start.prototype.load = function(files) {
    var fileName;
    for (fileName in files) {
      if (files.hasOwnProperty(fileName)) {
        if (this[fileName]) {
          continue;
        }
        if ($.FE.PLUGINS[fileName] && this.opts.pluginsEnabled.indexOf(fileName) < 0) {
          continue;
        }
        if (this[fileName] = new files[fileName](this), this[fileName]._init && (this[fileName]._init(), this.opts.initOnClick && "core" == fileName)) {
          return false;
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  start.prototype.destroy = function() {
    this.shared.count--;
    this.events.$off();
    var udataCur = this.html.get();
    if (this.events.trigger("destroy", [], true), this.events.trigger("shared.destroy", void 0, true), 0 === this.shared.count) {
      var sel;
      for (sel in this.shared) {
        if (this.shared.hasOwnProperty(sel)) {
          null == this.shared[sel];
          /** @type {null} */
          $.FE.SHARED[this.sid][sel] = null;
        }
      }
      $.FE.SHARED[this.sid] = {};
    }
    this.$oel.parents("form").off("." + this.id);
    this.$oel.off("click.popup");
    this.$oel.removeData("froala.editor");
    this.core.destroy(udataCur);
    $.FE.INSTANCES.splice($.FE.INSTANCES.indexOf(this), 1);
  };
  /**
   * @param {string} opts
   * @return {?}
   */
  $.fn.froalaEditor = function(opts) {
    /** @type {Array} */
    var args = [];
    /** @type {number} */
    var i = 0;
    for (;i < arguments.length;i++) {
      args.push(arguments[i]);
    }
    if ("string" == typeof opts) {
      /** @type {Array} */
      var configList = [];
      return this.each(function() {
        var $spy = $(this);
        var cur = $spy.data("froala.editor");
        if (cur) {
          var tmp;
          var b;
          if (opts.indexOf(".") > 0 && cur[opts.split(".")[0]] ? (cur[opts.split(".")[0]] && (tmp = cur[opts.split(".")[0]]), b = opts.split(".")[1]) : (tmp = cur, b = opts.split(".")[0]), !tmp[b]) {
            return $.error("Method " + opts + " does not exist in Froala Editor.");
          }
          var name = tmp[b].apply(cur, args.slice(1));
          if (void 0 === name) {
            configList.push(this);
          } else {
            if (0 === configList.length) {
              configList.push(name);
            }
          }
        }
      }), 1 == configList.length ? configList[0] : configList;
    }
    return "object" != typeof opts && opts ? void 0 : this.each(function() {
      var d = $(this).data("froala.editor");
      if (!d) {
        var e = this;
        new start(e, opts);
      }
    });
  };
  /** @type {function (Node, boolean): undefined} */
  $.fn.froalaEditor.Constructor = start;
  /** @type {function (Node, boolean): undefined} */
  $.FroalaEditor = start;
  /** @type {function (Node, boolean): undefined} */
  $.FE = start;
  /**
   * @param {Object} item
   * @return {?}
   */
  $.FE.MODULES.node = function(item) {
    /**
     * @param {Node} elems
     * @return {?}
     */
    function require(elems) {
      return elems && "IFRAME" != elems.tagName ? $(elems).contents() : [];
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function fn(node) {
      return node ? node.nodeType != Node.ELEMENT_NODE ? false : $.FE.BLOCK_TAGS.indexOf(node.tagName.toLowerCase()) >= 0 : false;
    }
    /**
     * @param {?} node
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function parse(node, dataAndEvents) {
      if ($(node).find("table").length > 0) {
        return false;
      }
      if (node.querySelectorAll($.FE.VOID_ELEMENTS.join(",")).length - node.querySelectorAll("br").length) {
        return false;
      }
      if (node.querySelectorAll(item.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)").length) {
        return false;
      }
      if (node.querySelectorAll($.FE.BLOCK_TAGS.join(",")).length > 1) {
        return false;
      }
      if (node.querySelectorAll(item.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)").length) {
        return false;
      }
      var nodes = require(node);
      if (1 == nodes.length) {
        if (fn(nodes[0])) {
          nodes = require(nodes[0]);
        }
      }
      /** @type {boolean} */
      var h = false;
      /** @type {number} */
      var i = 0;
      for (;i < nodes.length;i++) {
        var el = nodes[i];
        if (!(dataAndEvents && $(el).hasClass("fr-marker") || el.nodeType == Node.TEXT_NODE && 0 == el.textContent.length)) {
          if ("BR" != el.tagName && (el.textContent || "").replace(/\u200B/gi, "").replace(/\n/g, "").length > 0) {
            return false;
          }
          if (h) {
            return false;
          }
          if ("BR" == el.tagName) {
            /** @type {boolean} */
            h = true;
          }
        }
      }
      return true;
    }
    /**
     * @param {string} node
     * @return {?}
     */
    function set(node) {
      for (;node && (node.parentNode !== item.$el.get(0) && (!node.parentNode || !$(node.parentNode).hasClass("fr-inner")));) {
        if (node = node.parentNode, fn(node)) {
          return node;
        }
      }
      return null;
    }
    /**
     * @param {boolean} element
     * @param {Array} parents
     * @param {boolean} factory
     * @return {?}
     */
    function init(element, parents, factory) {
      if ("undefined" == typeof parents && (parents = []), "undefined" == typeof factory && (factory = true), parents.push(item.$el.get(0)), parents.indexOf(element.parentNode) >= 0 || (element.parentNode && $(element.parentNode).hasClass("fr-inner") || element.parentNode && ($.FE.SIMPLE_ENTER_TAGS.indexOf(element.parentNode.tagName) >= 0 && factory))) {
        return null;
      }
      for (;parents.indexOf(element.parentNode) < 0 && (element.parentNode && (!$(element.parentNode).hasClass("fr-inner") && (($.FE.SIMPLE_ENTER_TAGS.indexOf(element.parentNode.tagName) < 0 || !factory) && (!fn(element) || (!fn(element.parentNode) || !factory)))));) {
        element = element.parentNode;
      }
      return element;
    }
    /**
     * @param {Object} model
     * @return {?}
     */
    function each(model) {
      var obj = {};
      var codeSegments = model.attributes;
      if (codeSegments) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var attribute = codeSegments[i];
          obj[attribute.nodeName] = attribute.value;
        }
      }
      return obj;
    }
    /**
     * @param {boolean} other
     * @return {?}
     */
    function compare(other) {
      /** @type {string} */
      var optsData = "";
      var scrubbed = each(other);
      var codeSegments = Object.keys(scrubbed).sort();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var name = codeSegments[i];
        var set = scrubbed[name];
        optsData += set.indexOf('"') < 0 ? " " + name + '="' + set + '"' : " " + name + "='" + set + "'";
      }
      return optsData;
    }
    /**
     * @param {Element} child
     * @return {undefined}
     */
    function setProperty(child) {
      var attributes = child.attributes;
      /** @type {number} */
      var i = 0;
      for (;i < attributes.length;i++) {
        var attribute = attributes[i];
        child.removeAttribute(attribute.nodeName);
      }
    }
    /**
     * @param {Element} node
     * @return {?}
     */
    function func(node) {
      return "<" + node.tagName.toLowerCase() + compare(node) + ">";
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function append(node) {
      return "</" + node.tagName.toLowerCase() + ">";
    }
    /**
     * @param {?} target
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function clone(target, dataAndEvents) {
      if ("undefined" == typeof dataAndEvents) {
        /** @type {boolean} */
        dataAndEvents = true;
      }
      var node = target.previousSibling;
      for (;node && (dataAndEvents && $(node).hasClass("fr-marker"));) {
        node = node.previousSibling;
      }
      return node ? node.nodeType == Node.TEXT_NODE && "" === node.textContent ? clone(node) : false : true;
    }
    /**
     * @param {(Array|Element)} context
     * @param {boolean} index
     * @return {?}
     */
    function getText(context, index) {
      if ("undefined" == typeof index) {
        /** @type {boolean} */
        index = true;
      }
      var node = context.nextSibling;
      for (;node && (index && $(node).hasClass("fr-marker"));) {
        node = node.nextSibling;
      }
      return node ? node.nodeType == Node.TEXT_NODE && "" === node.textContent ? getText(node) : false : true;
    }
    /**
     * @param {Node} node
     * @return {?}
     */
    function parseNode(node) {
      return node && (node.nodeType == Node.ELEMENT_NODE && $.FE.VOID_ELEMENTS.indexOf((node.tagName || "").toLowerCase()) >= 0);
    }
    /**
     * @param {?} context
     * @return {?}
     */
    function isList(context) {
      return context ? ["UL", "OL"].indexOf(context.tagName) >= 0 : false;
    }
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    function initialize(dataAndEvents) {
      return dataAndEvents === item.$el.get(0);
    }
    /**
     * @param {string} node
     * @return {?}
     */
    function make(node) {
      return node && (node.className && (node.className || "").indexOf("fr-deletable") >= 0);
    }
    /**
     * @param {Element} node
     * @return {?}
     */
    function loaded(node) {
      return node === item.doc.activeElement && ((!item.doc.hasFocus || item.doc.hasFocus()) && !!(initialize(node) || (node.type || (node.href || ~node.tabIndex))));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function isEditable(node) {
      return(!node.getAttribute || "false" != node.getAttribute("contenteditable")) && ["STYLE", "SCRIPT"].indexOf(node.tagName) < 0;
    }
    return{
      /** @type {function (?): ?} */
      isBlock : fn,
      /** @type {function (?, boolean): ?} */
      isEmpty : parse,
      /** @type {function (string): ?} */
      blockParent : set,
      /** @type {function (boolean, Array, boolean): ?} */
      deepestParent : init,
      /** @type {function (Object): ?} */
      rawAttributes : each,
      /** @type {function (boolean): ?} */
      attributes : compare,
      /** @type {function (Element): undefined} */
      clearAttributes : setProperty,
      /** @type {function (Element): ?} */
      openTagString : func,
      /** @type {function (?): ?} */
      closeTagString : append,
      /** @type {function (?, boolean): ?} */
      isFirstSibling : clone,
      /** @type {function ((Array|Element), boolean): ?} */
      isLastSibling : getText,
      /** @type {function (?): ?} */
      isList : isList,
      /** @type {function (?): ?} */
      isElement : initialize,
      /** @type {function (Node): ?} */
      contents : require,
      /** @type {function (Node): ?} */
      isVoid : parseNode,
      /** @type {function (Element): ?} */
      hasFocus : loaded,
      /** @type {function (?): ?} */
      isEditable : isEditable,
      /** @type {function (string): ?} */
      isDeletable : make
    };
  };
  $.extend($.FE.DEFAULTS, {
    htmlAllowedTags : ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", 
    "mark", "menu", "menuitem", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "queue", "rp", "rt", "ruby", "s", "samp", "script", "style", "section", "select", "small", "source", "span", "strike", "strong", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video", "wbr"],
    htmlRemoveTags : ["script", "style"],
    htmlAllowedAttrs : ["accept", "accept-charset", "accesskey", "action", "align", "allowfullscreen", "allowtransparency", "alt", "async", "autocomplete", "autofocus", "autoplay", "autosave", "background", "bgcolor", "border", "charset", "cellpadding", "cellspacing", "checked", "cite", "class", "color", "cols", "colspan", "content", "contenteditable", "contextmenu", "controls", "coords", "data", "data-.*", "datetime", "default", "defer", "dir", "dirname", "disabled", "download", "draggable", "dropzone", 
    "enctype", "for", "form", "formaction", "frameborder", "headers", "height", "hidden", "high", "href", "hreflang", "http-equiv", "icon", "id", "ismap", "itemprop", "keytype", "kind", "label", "lang", "language", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "mozallowfullscreen", "multiple", "name", "novalidate", "open", "optimum", "pattern", "ping", "placeholder", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "reversed", "rows", "rowspan", 
    "sandbox", "scope", "scoped", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "src", "srcdoc", "srclang", "srcset", "start", "step", "summary", "spellcheck", "style", "tabindex", "target", "title", "type", "translate", "usemap", "value", "valign", "webkitallowfullscreen", "width", "wrap"],
    htmlAllowComments : true,
    fullPage : false
  });
  $.FE.HTML5Map = {
    B : "STRONG",
    I : "EM",
    STRIKE : "S"
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.clean = function(self) {
    /**
     * @param {Node} node
     * @return {?}
     */
    function resolve(node) {
      if (node.className && node.className.indexOf("fr-marker") >= 0) {
        return false;
      }
      var i;
      var c = self.node.contents(node);
      /** @type {Array} */
      var a = [];
      /** @type {number} */
      i = 0;
      for (;i < c.length;i++) {
        if (c[i].nodeType != Node.ELEMENT_NODE || self.node.isVoid(c[i])) {
          if (c[i].nodeType == Node.TEXT_NODE) {
            c[i].textContent = c[i].textContent.replace(/\u200b/g, "");
          }
        } else {
          if (c[i].textContent.replace(/\u200b/g, "").length != c[i].textContent.length) {
            resolve(c[i]);
          }
        }
      }
      if (node.nodeType == Node.ELEMENT_NODE && (!self.node.isVoid(node) && (node.normalize(), c = self.node.contents(node), a = node.querySelectorAll(".fr-marker"), c.length - a.length == 0))) {
        /** @type {number} */
        i = 0;
        for (;i < c.length;i++) {
          if ((c[i].className || "").indexOf("fr-marker") < 0) {
            return false;
          }
        }
        /** @type {number} */
        i = 0;
        for (;i < a.length;i++) {
          node.parentNode.insertBefore(a[i].cloneNode(true), node);
        }
        return node.parentNode.removeChild(node), false;
      }
    }
    /**
     * @param {Node} node
     * @return {?}
     */
    function walk(node) {
      if (node.nodeType == Node.COMMENT_NODE) {
        return "\x3c!--" + node.nodeValue + "--\x3e";
      }
      if (node.nodeType == Node.TEXT_NODE) {
        return node.textContent.replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\u00A0/g, "&nbsp;");
      }
      if (node.nodeType != Node.ELEMENT_NODE) {
        return node.outerHTML;
      }
      if (node.nodeType == Node.ELEMENT_NODE && ["STYLE", "SCRIPT"].indexOf(node.tagName) >= 0) {
        return node.outerHTML;
      }
      if ("IFRAME" == node.tagName) {
        return node.outerHTML;
      }
      var children = node.childNodes;
      if (0 === children.length) {
        return node.outerHTML;
      }
      /** @type {string} */
      var space = "";
      /** @type {number} */
      var i = 0;
      for (;i < children.length;i++) {
        space += walk(children[i]);
      }
      return self.node.openTagString(node) + space + self.node.closeTagString(node);
    }
    /**
     * @param {string} attr
     * @return {?}
     */
    function compile(attr) {
      return arr = [], attr = attr.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, function(chunk) {
        return arr.push(chunk), "[FROALA.EDITOR.SCRIPT " + (arr.length - 1) + "]";
      }), attr = attr.replace(/<img((?:[\w\W]*?)) src="/g, '<img$1 data-fr-src="');
    }
    /**
     * @param {string} s
     * @return {?}
     */
    function format(s) {
      return s = s.replace(/\[FROALA\.EDITOR\.SCRIPT ([\d]*)\]/gi, function(dataAndEvents, m1) {
        return self.opts.htmlRemoveTags.indexOf("script") >= 0 ? "" : arr[parseInt(m1, 10)];
      }), s = s.replace(/<img((?:[\w\W]*?)) data-fr-src="/g, '<img$1 src="');
    }
    /**
     * @param {Object} object
     * @return {?}
     */
    function traverse(object) {
      var part;
      for (part in object) {
        if (object.hasOwnProperty(part)) {
          if (!part.match(regex)) {
            delete object[part];
          }
        }
      }
      /** @type {string} */
      var out = "";
      var codeSegments = Object.keys(object).sort();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        part = codeSegments[i];
        out += object[part].indexOf('"') < 0 ? " " + part + '="' + object[part] + '"' : " " + part + "='" + object[part] + "'";
      }
      return out;
    }
    /**
     * @param {string} handler
     * @param {string} el
     * @param {string} key
     * @return {?}
     */
    function Parser(handler, el, key) {
      if (self.opts.fullPage) {
        var child = self.html.extractDoctype(key);
        var parent = traverse(self.html.extractNodeAttrs(key, "html"));
        el = null == el ? self.html.extractNode(key, "head") || "<title></title>" : el;
        var destination = traverse(self.html.extractNodeAttrs(key, "head"));
        var files = traverse(self.html.extractNodeAttrs(key, "body"));
        return child + "<html" + parent + "><head" + destination + ">" + el + "</head><body" + files + ">" + handler + "</body></html>";
      }
      return handler;
    }
    /**
     * @param {string} element
     * @param {Function} callback
     * @return {?}
     */
    function start(element, callback) {
      var cl = $("<div>" + element + "</div>");
      /** @type {string} */
      var d = "";
      if (cl) {
        var codeSegments = self.node.contents(cl.get(0));
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          callback(codeSegments[i]);
        }
        codeSegments = self.node.contents(cl.get(0));
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          d += walk(codeSegments[i]);
        }
      }
      return d;
    }
    /**
     * @param {string} key
     * @param {Function} callback
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function load(key, callback, dataAndEvents) {
      key = compile(key);
      /** @type {string} */
      var result = key;
      /** @type {null} */
      var chain = null;
      if (self.opts.fullPage) {
        result = self.html.extractNode(key, "body") || (key.indexOf("<body") >= 0 ? "" : key);
        if (dataAndEvents) {
          chain = self.html.extractNode(key, "head") || "";
        }
      }
      result = start(result, callback);
      if (chain) {
        chain = start(chain, callback);
      }
      var d = Parser(result, chain, key);
      return format(d);
    }
    /**
     * @param {string} a
     * @return {?}
     */
    function normalize(a) {
      return a.replace(/\u200b/g, "").length == a.length ? a : self.clean.exec(a, resolve);
    }
    /**
     * @return {undefined}
     */
    function update() {
      var spans = self.$el.get(0).querySelectorAll(Object.keys($.FE.HTML5Map).join(","));
      if (spans.length) {
        self.selection.save();
        /** @type {number} */
        var i = 0;
        for (;i < spans.length;i++) {
          if ("" === self.node.attributes(spans[i])) {
            $(spans[i]).replaceWith("<" + $.FE.HTML5Map[spans[i].tagName] + ">" + spans[i].innerHTML + "</" + $.FE.HTML5Map[spans[i].tagName] + ">");
          }
        }
        self.selection.restore();
      }
    }
    /**
     * @param {boolean} el
     * @return {?}
     */
    function init(el) {
      if ("SPAN" == el.tagName && (el.className || "").indexOf("fr-marker") >= 0) {
        return false;
      }
      if ("PRE" == el.tagName && hasClass(el), el.nodeType == Node.ELEMENT_NODE && (el.getAttribute("data-fr-src") && el.setAttribute("data-fr-src", self.helpers.sanitizeURL(el.getAttribute("data-fr-src"))), el.getAttribute("href") && el.setAttribute("href", self.helpers.sanitizeURL(el.getAttribute("href"))), ["TABLE", "TBODY", "TFOOT", "TR"].indexOf(el.tagName) >= 0 && (el.innerHTML = el.innerHTML.trim())), !self.opts.pasteAllowLocalImages && (el.nodeType == Node.ELEMENT_NODE && ("IMG" == el.tagName && 
      (el.getAttribute("data-fr-src") && 0 == el.getAttribute("data-fr-src").indexOf("file://"))))) {
        return el.parentNode.removeChild(el), false;
      }
      if (el.nodeType == Node.ELEMENT_NODE && ($.FE.HTML5Map[el.tagName] && "" === self.node.attributes(el))) {
        var d = $.FE.HTML5Map[el.tagName];
        /** @type {string} */
        var html = "<" + d + ">" + el.innerHTML + "</" + d + ">";
        el.insertAdjacentHTML("beforebegin", html);
        el = el.previousSibling;
        el.parentNode.removeChild(el.nextSibling);
      }
      if (self.opts.htmlAllowComments || el.nodeType != Node.COMMENT_NODE) {
        if (el.tagName && el.tagName.match(rxNotLatin)) {
          el.parentNode.removeChild(el);
        } else {
          if (el.tagName && !el.tagName.match(_regex)) {
            el.outerHTML = el.innerHTML;
          } else {
            var attrs = el.attributes;
            if (attrs) {
              /** @type {number} */
              var i = attrs.length - 1;
              for (;i >= 0;i--) {
                var attr = attrs[i];
                if (!attr.nodeName.match(regex)) {
                  el.removeAttribute(attr.nodeName);
                }
              }
            }
          }
        }
      } else {
        if (0 !== el.data.indexOf("[FROALA.EDITOR")) {
          el.parentNode.removeChild(el);
        }
      }
    }
    /**
     * @param {Object} node
     * @return {undefined}
     */
    function render(node) {
      var codeSegments = self.node.contents(node);
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (codeSegments[i].nodeType != Node.TEXT_NODE) {
          render(codeSegments[i]);
        }
      }
      init(node);
    }
    /**
     * @param {Object} o
     * @return {undefined}
     */
    function hasClass(o) {
      var txt = o.innerHTML;
      if (txt.indexOf("\n") >= 0) {
        o.innerHTML = txt.replace(/\n/g, "<br>");
      }
    }
    /**
     * @param {string} value
     * @param {Array} args
     * @param {Array} tag
     * @param {boolean} execResult
     * @return {?}
     */
    function parse(value, args, tag, execResult) {
      if ("undefined" == typeof args) {
        /** @type {Array} */
        args = [];
      }
      if ("undefined" == typeof tag) {
        /** @type {Array} */
        tag = [];
      }
      if ("undefined" == typeof execResult) {
        /** @type {boolean} */
        execResult = false;
      }
      value = value.replace(/\u0009/g, "");
      var i;
      var paths = $.merge([], self.opts.htmlAllowedTags);
      /** @type {number} */
      i = 0;
      for (;i < args.length;i++) {
        if (paths.indexOf(args[i]) >= 0) {
          paths.splice(paths.indexOf(args[i]), 1);
        }
      }
      var tags = $.merge([], self.opts.htmlAllowedAttrs);
      /** @type {number} */
      i = 0;
      for (;i < tag.length;i++) {
        if (tags.indexOf(tag[i]) >= 0) {
          tags.splice(tags.indexOf(tag[i]), 1);
        }
      }
      return tags.push("data-fr-.*"), tags.push("fr-.*"), _regex = new RegExp("^" + paths.join("$|^") + "$", "gi"), regex = new RegExp("^" + tags.join("$|^") + "$", "gi"), rxNotLatin = new RegExp("^" + self.opts.htmlRemoveTags.join("$|^") + "$", "gi"), value = load(value, render, true);
    }
    /**
     * @return {undefined}
     */
    function select() {
      var codeSegments = self.$el.get(0).querySelectorAll("blockquote + blockquote");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var el = codeSegments[i];
        if (self.node.attributes(el) == self.node.attributes(el.previousSibling)) {
          $(el).prev().append($(el).html());
          $(el).remove();
        }
      }
    }
    /**
     * @return {undefined}
     */
    function replaceWith() {
      var codeSegments = self.$el.get(0).querySelectorAll("tr");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var children = codeSegments[i].children;
        /** @type {boolean} */
        var e = true;
        /** @type {number} */
        var ci = 0;
        for (;ci < children.length;ci++) {
          if ("TH" != children[ci].tagName) {
            /** @type {boolean} */
            e = false;
            break;
          }
        }
        if (0 != e && 0 != children.length) {
          var element = codeSegments[i];
          for (;element && ("TABLE" != element.tagName && "THEAD" != element.tagName);) {
            element = element.parentNode;
          }
          var template = element;
          if ("THEAD" != template.tagName) {
            template = self.doc.createElement("THEAD");
            element.insertBefore(template, element.firstChild);
          }
          template.appendChild(codeSegments[i]);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function process() {
      var codeSegments = self.$el.get(0).querySelectorAll("table");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i].previousSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.textContent.length);) {
          node = node.previousSibling;
        }
        if (!!node) {
          if (!self.node.isBlock(node)) {
            if (!("BR" == node.tagName)) {
              if (!(node.nodeType != Node.TEXT_NODE && node.nodeType != Node.ELEMENT_NODE)) {
                if (!$(node).is(self.opts.htmlDoNotWrapTags.join(","))) {
                  codeSegments[i].parentNode.insertBefore(self.doc.createElement("br"), codeSegments[i]);
                }
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function create() {
      var NG_ANIMATE_CLASS_NAME = self.html.defaultTag();
      if (NG_ANIMATE_CLASS_NAME) {
        var codeSegments = self.$el.get(0).querySelectorAll("td > " + NG_ANIMATE_CLASS_NAME + ", th > " + NG_ANIMATE_CLASS_NAME);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if ("" === self.node.attributes(codeSegments[i])) {
            $(codeSegments[i]).replaceWith(codeSegments[i].innerHTML + "<br>");
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function next() {
      replaceWith();
      process();
      create();
    }
    /**
     * @return {undefined}
     */
    function initialize() {
      /** @type {Array} */
      var results = [];
      /**
       * @param {Node} domNode
       * @return {?}
       */
      var create = function(domNode) {
        return!self.node.isList(domNode.parentNode);
      };
      do {
        if (results.length) {
          var node = results[0];
          var li = self.doc.createElement("ul");
          node.parentNode.insertBefore(li, node);
          do {
            var b = node;
            node = node.nextSibling;
            li.appendChild(b);
          } while (node && "LI" == node.tagName);
        }
        /** @type {Array} */
        results = [];
        var nodes = self.$el.get(0).querySelectorAll("li");
        /** @type {number} */
        var index = 0;
        for (;index < nodes.length;index++) {
          if (create(nodes[index])) {
            results.push(nodes[index]);
          }
        }
      } while (results.length > 0);
    }
    /**
     * @return {undefined}
     */
    function removeNode() {
      var codeSegments = self.$el.get(0).querySelectorAll("ol + ol, ul + ul");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (self.node.isList(node.previousSibling) && self.node.openTagString(node) == self.node.openTagString(node.previousSibling)) {
          var subnodes = self.node.contents(node);
          /** @type {number} */
          var iNode = 0;
          for (;iNode < subnodes.length;iNode++) {
            node.previousSibling.appendChild(subnodes[iNode]);
          }
          node.parentNode.removeChild(node);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function ready() {
      var a;
      /**
       * @param {Node} element
       * @return {undefined}
       */
      var init = function(element) {
        if (0 === element.querySelectorAll("LI").length) {
          /** @type {boolean} */
          a = true;
          element.parentNode.removeChild(element);
        }
      };
      do {
        /** @type {boolean} */
        a = false;
        var codeSegments = self.$el.get(0).querySelectorAll("li:empty");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          codeSegments[i].parentNode.removeChild(codeSegments[i]);
        }
        var resultItems = self.$el.get(0).querySelectorAll("ul, ol");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          init(resultItems[i]);
        }
      } while (a === true);
    }
    /**
     * @return {undefined}
     */
    function loaded() {
      var codeSegments = self.$el.get(0).querySelectorAll("ul > ul, ol > ol, ul > ol, ol > ul");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        var container = node.previousSibling;
        if (container) {
          if ("LI" == container.tagName) {
            container.appendChild(node);
          } else {
            $(node).wrap("<li></li>");
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function destroy() {
      var codeSegments = self.$el.get(0).querySelectorAll("li > ul, li > ol");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var elem = codeSegments[i];
        if (elem.nextSibling) {
          var cursor = elem.nextSibling;
          var warningLi = $("<li>");
          $(elem.parentNode).after(warningLi);
          do {
            var lineSeparator = cursor;
            cursor = cursor.nextSibling;
            warningLi.append(lineSeparator);
          } while (cursor);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function handler() {
      var codeSegments = self.$el.get(0).querySelectorAll("li > ul, li > ol");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var div = codeSegments[i];
        if (self.node.isFirstSibling(div)) {
          $(div).before("<br/>");
        } else {
          if (div.previousSibling && "BR" == div.previousSibling.tagName) {
            var link = div.previousSibling.previousSibling;
            for (;link && $(link).hasClass("fr-marker");) {
              link = link.previousSibling;
            }
            if (link) {
              if ("BR" != link.tagName) {
                $(div.previousSibling).remove();
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function wrapper() {
      var codeSegments = self.$el.get(0).querySelectorAll("li:empty");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        $(codeSegments[i]).remove();
      }
    }
    /**
     * @return {undefined}
     */
    function addNode() {
      var branchDataJSON = self.$el.get(0).querySelectorAll("ul, ol");
      /** @type {number} */
      var conditionIndex = 0;
      for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
        var nodes = self.node.contents(branchDataJSON[conditionIndex]);
        /** @type {null} */
        var head = null;
        /** @type {number} */
        var i = nodes.length - 1;
        for (;i >= 0;i--) {
          if ("LI" != nodes[i].tagName) {
            if (!head) {
              head = $("<li>");
              head.insertBefore(nodes[i]);
            }
            head.append(nodes[i]);
          } else {
            /** @type {null} */
            head = null;
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onload() {
      initialize();
      removeNode();
      ready();
      loaded();
      destroy();
      handler();
      addNode();
      wrapper();
    }
    /**
     * @return {undefined}
     */
    function dataToHtml() {
      if (self.opts.fullPage) {
        $.merge(self.opts.htmlAllowedTags, ["head", "title", "style", "link", "base", "body", "html"]);
      }
    }
    var _regex;
    var rxNotLatin;
    var regex;
    /** @type {Array} */
    var arr = [];
    /** @type {Array} */
    arr = [];
    return{
      /** @type {function (): undefined} */
      _init : dataToHtml,
      /** @type {function (string, Array, Array, boolean): ?} */
      html : parse,
      /** @type {function (): undefined} */
      toHTML5 : update,
      /** @type {function (): undefined} */
      tables : next,
      /** @type {function (): undefined} */
      lists : onload,
      /** @type {function (): undefined} */
      quotes : select,
      /** @type {function (string): ?} */
      invisibleSpaces : normalize,
      /** @type {function (string, Function, boolean): ?} */
      exec : load
    };
  };
  /** @type {number} */
  $.FE.XS = 0;
  /** @type {number} */
  $.FE.SM = 1;
  /** @type {number} */
  $.FE.MD = 2;
  /** @type {number} */
  $.FE.LG = 3;
  /**
   * @param {Object} obj
   * @return {?}
   */
  $.FE.MODULES.helpers = function(obj) {
    /**
     * @return {?}
     */
    function getIE() {
      var prop;
      var re;
      /** @type {number} */
      var q = -1;
      return "Microsoft Internet Explorer" == navigator.appName ? (prop = navigator.userAgent, re = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})"), null !== re.exec(prop) && (q = parseFloat(RegExp.$1))) : "Netscape" == navigator.appName && (prop = navigator.userAgent, re = new RegExp("Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})"), null !== re.exec(prop) && (q = parseFloat(RegExp.$1))), q;
    }
    /**
     * @return {?}
     */
    function getBrowser() {
      var browser = {};
      var value = getIE();
      if (value > 0) {
        /** @type {boolean} */
        browser.msie = true;
      } else {
        /** @type {string} */
        var prop = navigator.userAgent.toLowerCase();
        /** @type {Array.<string>} */
        var segmentMatch = /(edge)[ \/]([\w.]+)/.exec(prop) || (/(chrome)[ \/]([\w.]+)/.exec(prop) || (/(webkit)[ \/]([\w.]+)/.exec(prop) || (/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(prop) || (/(msie) ([\w.]+)/.exec(prop) || (prop.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(prop) || [])))));
        var result = {
          browser : segmentMatch[1] || "",
          version : segmentMatch[2] || "0"
        };
        if (segmentMatch[1]) {
          /** @type {boolean} */
          browser[result.browser] = true;
        }
        if (browser.chrome) {
          /** @type {boolean} */
          browser.webkit = true;
        } else {
          if (browser.webkit) {
            /** @type {boolean} */
            browser.safari = true;
          }
        }
      }
      return browser.msie && (browser.version = value), browser;
    }
    /**
     * @return {?}
     */
    function test() {
      return/(iPad|iPhone|iPod)/g.test(navigator.userAgent) && !layout();
    }
    /**
     * @return {?}
     */
    function callback() {
      return/(Android)/g.test(navigator.userAgent) && !layout();
    }
    /**
     * @return {?}
     */
    function isWhiteSpace() {
      return/(Blackberry)/g.test(navigator.userAgent);
    }
    /**
     * @return {?}
     */
    function layout() {
      return/(Windows Phone)/gi.test(navigator.userAgent);
    }
    /**
     * @return {?}
     */
    function next() {
      return callback() || (test() || isWhiteSpace());
    }
    /**
     * @return {?}
     */
    function requestAnimationFrame() {
      return window.requestAnimationFrame || (window.webkitRequestAnimationFrame || (window.mozRequestAnimationFrame || function(after) {
        window.setTimeout(after, 1E3 / 60);
      }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    function cont(index) {
      return parseInt(index, 10) || 0;
    }
    /**
     * @return {?}
     */
    function get() {
      var $div = $('<div class="fr-visibility-helper"></div>').appendTo("body");
      var ret = cont($div.css("margin-left"));
      return $div.remove(), ret;
    }
    /**
     * @return {?}
     */
    function isTouch() {
      return "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch;
    }
    /**
     * @param {string} arg
     * @return {?}
     */
    function check(arg) {
      if (!/^(https?:|ftps?:|)\/\//i.test(arg)) {
        return false;
      }
      /** @type {string} */
      arg = String(arg).replace(/</g, "%3C").replace(/>/g, "%3E").replace(/"/g, "%22").replace(/ /g, "%20");
      /** @type {RegExp} */
      var tags = /(http|ftp|https):\/\/[a-z\u00a1-\uffff0-9]+(\.[a-z\u00a1-\uffff0-9]*)*([a-z\u00a1-\uffff0-9.,@?^=%&amp;:\/~+#-]*[a-z\u00a1-\uffff0-9@?^=%&amp;\/~+#-])?/gi;
      return tags.test(arg);
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function parse(html) {
      if (/^(https?:|ftps?:|)\/\//i.test(html)) {
        if (!check(html) && !check("http:" + html)) {
          return "";
        }
      } else {
        /** @type {string} */
        html = encodeURIComponent(html).replace(/%23/g, "#").replace(/%2F/g, "/").replace(/%25/g, "%").replace(/mailto%3A/gi, "mailto:").replace(/file%3A/gi, "file:").replace(/sms%3A/gi, "sms:").replace(/tel%3A/gi, "tel:").replace(/notes%3A/gi, "notes:").replace(/data%3Aimage/gi, "data:image").replace(/blob%3A/gi, "blob:").replace(/webkit-fake-url%3A/gi, "webkit-fake-url:").replace(/%3F/g, "?").replace(/%3D/g, "=").replace(/%26/g, "&").replace(/&amp;/g, "&").replace(/%2C/g, ",").replace(/%3B/g, ";").replace(/%2B/g, 
        "+").replace(/%40/g, "@").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/%7B/g, "{").replace(/%7D/g, "}");
      }
      return html;
    }
    /**
     * @param {boolean} obj
     * @return {?}
     */
    function _isArray(obj) {
      return obj && (!obj.propertyIsEnumerable("length") && ("object" == typeof obj && "number" == typeof obj.length));
    }
    /**
     * @param {string} selector
     * @return {?}
     */
    function init(selector) {
      /**
       * @param {?} s
       * @return {?}
       */
      function hex(s) {
        return("0" + parseInt(s, 10).toString(16)).slice(-2);
      }
      try {
        return selector && "transparent" !== selector ? /^#[0-9A-F]{6}$/i.test(selector) ? selector : (selector = selector.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/), ("#" + hex(selector[1]) + hex(selector[2]) + hex(selector[3])).toUpperCase()) : "";
      } catch (c) {
        return null;
      }
    }
    /**
     * @param {string} text
     * @return {?}
     */
    function load(text) {
      /** @type {RegExp} */
      var cx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      text = text.replace(cx, function(dataAndEvents, r, g, b) {
        return r + r + g + g + b + b;
      });
      /** @type {(Array.<string>|null)} */
      var code = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(text);
      return code ? "rgb(" + parseInt(code[1], 16) + ", " + parseInt(code[2], 16) + ", " + parseInt(code[3], 16) + ")" : "";
    }
    /**
     * @param {Object} context
     * @return {?}
     */
    function render(context) {
      var ee = (context.css("text-align") || "").replace(/-(.*)-/g, "");
      if (["left", "right", "justify", "center"].indexOf(ee) < 0) {
        if (!location) {
          var head = $('<div dir="auto" style="text-align: initial; position: fixed; left: -3000px;"><span id="s1">.</span><span id="s2">.</span></div>');
          $("body").append(head);
          var k = head.find("#s1").get(0).getBoundingClientRect().left;
          var xdiff = head.find("#s2").get(0).getBoundingClientRect().left;
          head.remove();
          /** @type {string} */
          location = xdiff > k ? "left" : "right";
        }
        /** @type {string} */
        ee = location;
      }
      return ee;
    }
    /**
     * @return {?}
     */
    function add() {
      return null == n && (n = navigator.platform.toUpperCase().indexOf("MAC") >= 0), n;
    }
    /**
     * @return {undefined}
     */
    function dispose() {
      obj.browser = getBrowser();
    }
    var location;
    /** @type {null} */
    var n = null;
    return{
      /** @type {function (): undefined} */
      _init : dispose,
      /** @type {function (): ?} */
      isIOS : test,
      /** @type {function (): ?} */
      isMac : add,
      /** @type {function (): ?} */
      isAndroid : callback,
      /** @type {function (): ?} */
      isBlackberry : isWhiteSpace,
      /** @type {function (): ?} */
      isWindowsPhone : layout,
      /** @type {function (): ?} */
      isMobile : next,
      /** @type {function (): ?} */
      requestAnimationFrame : requestAnimationFrame,
      /** @type {function (?): ?} */
      getPX : cont,
      /** @type {function (): ?} */
      screenSize : get,
      /** @type {function (): ?} */
      isTouch : isTouch,
      /** @type {function (string): ?} */
      sanitizeURL : parse,
      /** @type {function (boolean): ?} */
      isArray : _isArray,
      /** @type {function (string): ?} */
      RGBToHex : init,
      /** @type {function (string): ?} */
      HEXtoRGB : load,
      /** @type {function (string): ?} */
      isURL : check,
      /** @type {function (Object): ?} */
      getAlignment : render
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.events = function(self) {
    /**
     * @param {?} node
     * @param {string} listener
     * @param {Function} options
     * @return {undefined}
     */
    function bind(node, listener, options) {
      run(node, listener, options);
    }
    /**
     * @return {undefined}
     */
    function replace() {
      bind(self.$el, "cut copy paste beforepaste", function(event) {
        trigger(event.type, [event]);
      });
    }
    /**
     * @return {undefined}
     */
    function setup() {
      bind(self.$el, "click mouseup mousedown touchstart touchend dragenter dragover dragleave dragend drop dragstart", function(event) {
        trigger(event.type, [event]);
      });
      on("mousedown", function() {
        /** @type {number} */
        var i = 0;
        for (;i < $.FE.INSTANCES.length;i++) {
          if ($.FE.INSTANCES[i] != self) {
            if ($.FE.INSTANCES[i].popups) {
              if ($.FE.INSTANCES[i].popups.areVisible()) {
                $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
              }
            }
          }
        }
      });
    }
    /**
     * @return {undefined}
     */
    function fn() {
      bind(self.$el, "keydown keypress keyup input", function(event) {
        trigger(event.type, [event]);
      });
    }
    /**
     * @return {undefined}
     */
    function refresh() {
      bind(self.$win, self._mousedown, function(dataAndEvents) {
        trigger("window.mousedown", [dataAndEvents]);
        click();
      });
      bind(self.$win, self._mouseup, function(dataAndEvents) {
        trigger("window.mouseup", [dataAndEvents]);
      });
      bind(self.$win, "cut copy keydown keyup touchmove touchend", function(object) {
        trigger("window." + object.type, [object]);
      });
    }
    /**
     * @return {undefined}
     */
    function load() {
      bind(self.$doc, "dragend drop", function(object) {
        trigger("document." + object.type, [object]);
      });
    }
    /**
     * @param {boolean} recurring
     * @return {?}
     */
    function toggle(recurring) {
      if ("undefined" == typeof recurring && (recurring = true), !self.$wp) {
        return false;
      }
      if (self.helpers.isIOS() && self.$win.get(0).focus(), !self.core.hasFocus() && recurring) {
        var w = self.$win.scrollTop();
        return self.$el.focus(), w != self.$win.scrollTop() && self.$win.scrollTop(w), false;
      }
      if (!self.core.hasFocus() || self.$el.find(".fr-marker").length > 0) {
        return false;
      }
      var br = self.selection.info(self.$el.get(0));
      if (br.atStart && (self.selection.isCollapsed() && null != self.html.defaultTag())) {
        var node = self.markers.insert();
        if (node && !self.node.blockParent(node)) {
          $(node).remove();
          var thead = self.$el.find(self.html.blockTagsQuery()).get(0);
          if (thead) {
            $(thead).prepend($.FE.MARKERS);
            self.selection.restore();
          }
        } else {
          if (node) {
            $(node).remove();
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      bind(self.$el, "focus", function(event) {
        if (makeArray()) {
          toggle(false);
          if (C === false) {
            trigger(event.type, [event]);
          }
        }
      });
      bind(self.$el, "blur", function(event) {
        if (makeArray()) {
          if (C === true) {
            trigger(event.type, [event]);
            click();
          }
        }
      });
      on("focus", function() {
        /** @type {boolean} */
        C = true;
      });
      on("blur", function() {
        /** @type {boolean} */
        C = false;
      });
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.helpers.isMobile()) {
        /** @type {string} */
        self._mousedown = "touchstart";
        /** @type {string} */
        self._mouseup = "touchend";
        /** @type {string} */
        self._move = "touchmove";
        /** @type {string} */
        self._mousemove = "touchmove";
      } else {
        /** @type {string} */
        self._mousedown = "mousedown";
        /** @type {string} */
        self._mouseup = "mouseup";
        /** @type {string} */
        self._move = "";
        /** @type {string} */
        self._mousemove = "mousemove";
      }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function start(e) {
      var $target = $(e.currentTarget);
      return self.edit.isDisabled() || $target.hasClass("fr-disabled") ? (e.preventDefault(), false) : "mousedown" === e.type && 1 !== e.which ? true : (self.helpers.isMobile() || e.preventDefault(), (self.helpers.isAndroid() || self.helpers.isWindowsPhone()) && (0 === $target.parents(".fr-dropdown-menu").length && (e.preventDefault(), e.stopPropagation())), $target.addClass("fr-selected"), void self.events.trigger("commands.mousedown", [$target]));
    }
    /**
     * @param {Event} e
     * @param {Function} callback
     * @return {?}
     */
    function remove(e, callback) {
      var input = $(e.currentTarget);
      if (self.edit.isDisabled() || input.hasClass("fr-disabled")) {
        return e.preventDefault(), false;
      }
      if ("mouseup" === e.type && 1 !== e.which) {
        return true;
      }
      if (!input.hasClass("fr-selected")) {
        return true;
      }
      if ("touchmove" != e.type) {
        if (e.stopPropagation(), e.stopImmediatePropagation(), e.preventDefault(), !input.hasClass("fr-selected")) {
          return $(".fr-selected").removeClass("fr-selected"), false;
        }
        if ($(".fr-selected").removeClass("fr-selected"), input.data("dragging") || input.attr("disabled")) {
          return input.removeData("dragging"), false;
        }
        var sleep = input.data("timeout");
        if (sleep) {
          clearTimeout(sleep);
          input.removeData("timeout");
        }
        callback.apply(self, [e]);
      } else {
        if (!input.data("timeout")) {
          input.data("timeout", setTimeout(function() {
            input.data("dragging", true);
          }, 100));
        }
      }
    }
    /**
     * @return {undefined}
     */
    function click() {
      /** @type {boolean} */
      ret = true;
    }
    /**
     * @return {undefined}
     */
    function disableBlur() {
      /** @type {boolean} */
      ret = false;
    }
    /**
     * @return {?}
     */
    function makeArray() {
      return ret;
    }
    /**
     * @param {Object} c
     * @param {Object} name
     * @param {Function} type
     * @return {undefined}
     */
    function create(c, name, type) {
      run(c, self._mousedown, name, function(e) {
        if (!self.edit.isDisabled()) {
          start(e);
        }
      }, true);
      run(c, self._mouseup + " " + self._move, name, function(ele) {
        if (!self.edit.isDisabled()) {
          remove(ele, type);
        }
      }, true);
      run(c, "mousedown click mouseup", name, function(event) {
        if (!self.edit.isDisabled()) {
          event.stopPropagation();
        }
      }, true);
      on("window.mouseup", function() {
        if (!self.edit.isDisabled()) {
          c.find(name).removeClass("fr-selected");
          click();
        }
      });
    }
    /**
     * @param {string} name
     * @param {Function} callback
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function on(name, callback, deepDataAndEvents) {
      var codeSegments = name.split(" ");
      if (codeSegments.length > 1) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          on(codeSegments[i], callback, deepDataAndEvents);
        }
        return true;
      }
      if ("undefined" == typeof deepDataAndEvents) {
        /** @type {boolean} */
        deepDataAndEvents = false;
      }
      var listeners;
      listeners = 0 != name.indexOf("shared.") ? methods[name] = methods[name] || [] : self.shared._events[name] = self.shared._events[name] || [];
      if (deepDataAndEvents) {
        listeners.unshift(callback);
      } else {
        listeners.push(callback);
      }
    }
    /**
     * @param {Object} obj
     * @param {string} type
     * @param {boolean} fn
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function run(obj, type, fn, deepDataAndEvents, dataAndEvents) {
      if ("function" == typeof fn) {
        /** @type {boolean} */
        dataAndEvents = deepDataAndEvents;
        /** @type {boolean} */
        deepDataAndEvents = fn;
        /** @type {boolean} */
        fn = false;
      }
      var point = dataAndEvents ? self.shared.$_events : e;
      var keypath = dataAndEvents ? self.sid : self.id;
      if (fn) {
        obj.on(type.split(" ").join(".ed" + keypath + " ") + ".ed" + keypath, fn, deepDataAndEvents);
      } else {
        obj.on(type.split(" ").join(".ed" + keypath + " ") + ".ed" + keypath, deepDataAndEvents);
      }
      if (point.indexOf(obj.get(0)) < 0) {
        point.push(obj.get(0));
      }
    }
    /**
     * @param {Array} assertions
     * @param {string} total
     * @return {undefined}
     */
    function done(assertions, total) {
      /** @type {number} */
      var i = 0;
      for (;i < assertions.length;i++) {
        $(assertions[i]).off(".ed" + total);
      }
    }
    /**
     * @return {undefined}
     */
    function finish() {
      done(e, self.id);
      /** @type {Array} */
      e = [];
      if (0 == self.shared.count) {
        done(self.shared.$_events, self.sid);
        /** @type {null} */
        self.shared.$_events = null;
      }
    }
    /**
     * @param {string} eventName
     * @param {Array} params
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function trigger(eventName, params, dataAndEvents) {
      if (!self.edit.isDisabled() || dataAndEvents) {
        var codeSegments;
        if (0 != eventName.indexOf("shared.")) {
          codeSegments = methods[eventName];
        } else {
          if (self.shared.count > 0) {
            return false;
          }
          codeSegments = self.shared._events[eventName];
        }
        var result;
        if (codeSegments) {
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            if (result = codeSegments[i].apply(self, params), result === false) {
              return false;
            }
          }
        }
        return result = self.$oel.triggerHandler("froalaEditor." + eventName, $.merge([self], params || [])), result === false ? false : result;
      }
    }
    /**
     * @param {string} name
     * @param {Node} input
     * @param {boolean} allBindingsAccessor
     * @return {?}
     */
    function update(name, input, allBindingsAccessor) {
      if (!self.edit.isDisabled() || allBindingsAccessor) {
        var method;
        if (0 != name.indexOf("shared.")) {
          method = methods[name];
        } else {
          if (self.shared.count > 0) {
            return false;
          }
          method = self.shared._events[name];
        }
        var text;
        if (method) {
          /** @type {number} */
          var j = 0;
          for (;j < method.length;j++) {
            text = method[j].apply(self, [input]);
            if ("undefined" != typeof text) {
              input = text;
            }
          }
        }
        return text = self.$oel.triggerHandler("froalaEditor." + name, $.merge([self], [input])), "undefined" != typeof text && (input = text), input;
      }
    }
    /**
     * @return {undefined}
     */
    function finalize() {
      var property;
      for (property in methods) {
        if (methods.hasOwnProperty(property)) {
          delete methods[property];
        }
      }
    }
    /**
     * @return {undefined}
     */
    function restoreScript() {
      var eventName;
      for (eventName in self.shared._events) {
        if (self.shared._events.hasOwnProperty(eventName)) {
          delete self.shared._events[eventName];
        }
      }
    }
    /**
     * @return {undefined}
     */
    function runTest() {
      self.shared.$_events = self.shared.$_events || [];
      self.shared._events = {};
      init();
      setup();
      refresh();
      load();
      fn();
      render();
      click();
      replace();
      on("destroy", finalize);
      on("shared.destroy", restoreScript);
    }
    var ret;
    var methods = {};
    /** @type {boolean} */
    var C = false;
    /** @type {Array} */
    var e = [];
    return{
      /** @type {function (): undefined} */
      _init : runTest,
      /** @type {function (string, Function, boolean): ?} */
      on : on,
      /** @type {function (string, Array, boolean): ?} */
      trigger : trigger,
      /** @type {function (Object, Object, Function): undefined} */
      bindClick : create,
      /** @type {function (): undefined} */
      disableBlur : disableBlur,
      /** @type {function (): undefined} */
      enableBlur : click,
      /** @type {function (): ?} */
      blurActive : makeArray,
      /** @type {function (boolean): ?} */
      focus : toggle,
      /** @type {function (string, Node, boolean): ?} */
      chainTrigger : update,
      /** @type {function (Object, string, boolean, boolean, boolean): undefined} */
      $on : run,
      /** @type {function (): undefined} */
      $off : finish
    };
  };
  /** @type {string} */
  $.FE.INVISIBLE_SPACE = "&#8203;";
  /** @type {string} */
  $.FE.START_MARKER = '<span class="fr-marker" data-id="0" data-type="true" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
  /** @type {string} */
  $.FE.END_MARKER = '<span class="fr-marker" data-id="0" data-type="false" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
  /** @type {string} */
  $.FE.MARKERS = $.FE.START_MARKER + $.FE.END_MARKER;
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.markers = function(self) {
    /**
     * @param {Object} success
     * @param {number} keepData
     * @return {?}
     */
    function callback(success, keepData) {
      return $('<span class="fr-marker" data-id="' + keepData + '" data-type="' + success + '" style="display: ' + (self.browser.safari ? "none" : "inline-block") + '; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", self.doc)[0];
    }
    /**
     * @param {Object} range
     * @param {boolean} value
     * @param {number} key
     * @return {?}
     */
    function set(range, value, key) {
      try {
        var result = range.cloneRange();
        if (result.collapse(value), result.insertNode(callback(value, key)), value === true && range.collapsed) {
          var el = self.$el.find('span.fr-marker[data-type="true"][data-id="' + key + '"]');
          var node = el.get(0).nextSibling;
          for (;node && (node.nodeType === Node.TEXT_NODE && 0 === node.textContent.length);) {
            $(node).remove();
            node = el.nextSibling;
          }
        }
        if (value === true && !range.collapsed) {
          el = self.$el.find('span.fr-marker[data-type="true"][data-id="' + key + '"]').get(0);
          node = el.nextSibling;
          if (node && (node.nodeType === Node.ELEMENT_NODE && self.node.isBlock(node))) {
            /** @type {Array} */
            var nodes = [node];
            do {
              node = nodes[0];
              nodes = self.node.contents(node);
            } while (nodes[0] && self.node.isBlock(nodes[0]));
            $(node).prepend($(el));
          }
        }
        if (value === false && !range.collapsed) {
          el = self.$el.find('span.fr-marker[data-type="false"][data-id="' + key + '"]').get(0);
          node = el.previousSibling;
          if (node && (node.nodeType === Node.ELEMENT_NODE && self.node.isBlock(node))) {
            /** @type {Array} */
            nodes = [node];
            do {
              node = nodes[nodes.length - 1];
              nodes = self.node.contents(node);
            } while (nodes[nodes.length - 1] && self.node.isBlock(nodes[nodes.length - 1]));
            $(node).append($(el));
          }
          if (el.parentNode) {
            if (["TD", "TH"].indexOf(el.parentNode.tagName) >= 0) {
              if (el.parentNode.previousSibling) {
                if (!el.previousSibling) {
                  $(el.parentNode.previousSibling).append(el);
                }
              }
            }
          }
        }
        var testElement = self.$el.find('span.fr-marker[data-type="' + value + '"][data-id="' + key + '"]').get(0);
        return testElement && (testElement.style.display = "none"), testElement;
      } catch (l) {
        return null;
      }
    }
    /**
     * @return {?}
     */
    function parse() {
      if (!self.$wp) {
        return null;
      }
      try {
        var range = self.selection.ranges(0);
        var sel = range.commonAncestorContainer;
        if (sel != self.$el.get(0) && 0 == self.$el.find(sel).length) {
          return null;
        }
        var clone1 = range.cloneRange();
        var r2 = range.cloneRange();
        clone1.collapse(true);
        var child = $('<span class="fr-marker" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", self.doc)[0];
        if (clone1.insertNode(child), child = self.$el.find("span.fr-marker").get(0)) {
          var node = child.nextSibling;
          for (;node && (node.nodeType === Node.TEXT_NODE && 0 === node.textContent.length);) {
            $(node).remove();
            node = self.$el.find("span.fr-marker").get(0).nextSibling;
          }
          return self.selection.clear(), self.selection.get().addRange(r2), child;
        }
        return null;
      } catch (i) {
      }
    }
    /**
     * @return {?}
     */
    function init() {
      if (!self.selection.isCollapsed()) {
        self.selection.remove();
      }
      var element = self.$el.find(".fr-marker").get(0);
      if (null == element && (element = parse()), null == element) {
        return null;
      }
      var node;
      if (node = self.node.deepestParent(element)) {
        if (self.node.isBlock(node) && self.node.isEmpty(node)) {
          $(node).replaceWith('<span class="fr-marker"></span>');
        } else {
          var cur = element;
          /** @type {string} */
          var fullName = "";
          /** @type {string} */
          var version = "";
          do {
            cur = cur.parentNode;
            fullName += self.node.closeTagString(cur);
            version = self.node.openTagString(cur) + version;
          } while (cur != node);
          $(element).replaceWith('<span id="fr-break"></span>');
          var text = self.node.openTagString(node) + $(node).html() + self.node.closeTagString(node);
          text = text.replace(/<span id="fr-break"><\/span>/g, fullName + '<span class="fr-marker"></span>' + version);
          $(node).replaceWith(text);
        }
      }
      return self.$el.find(".fr-marker").get(0);
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function select(e) {
      var x = e.clientX;
      var y = e.clientY;
      removeClass();
      var ref;
      /** @type {null} */
      var range = null;
      if ("undefined" != typeof self.doc.caretPositionFromPoint ? (ref = self.doc.caretPositionFromPoint(x, y), range = self.doc.createRange(), range.setStart(ref.offsetNode, ref.offset), range.setEnd(ref.offsetNode, ref.offset)) : "undefined" != typeof self.doc.caretRangeFromPoint && (ref = self.doc.caretRangeFromPoint(x, y), range = self.doc.createRange(), range.setStart(ref.startContainer, ref.startOffset), range.setEnd(ref.startContainer, ref.startOffset)), null !== range && "undefined" != typeof self.win.getSelection) {
        var selection = self.win.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
      } else {
        if ("undefined" != typeof self.doc.body.createTextRange) {
          try {
            range = self.doc.body.createTextRange();
            range.moveToPoint(x, y);
            var rangeEnd = range.duplicate();
            rangeEnd.moveToPoint(x, y);
            range.setEndPoint("EndToEnd", rangeEnd);
            range.select();
          } catch (k) {
            return false;
          }
        }
      }
      parse();
    }
    /**
     * @return {undefined}
     */
    function removeClass() {
      self.$el.find(".fr-marker").remove();
    }
    return{
      /** @type {function (Object, boolean, number): ?} */
      place : set,
      /** @type {function (): ?} */
      insert : parse,
      /** @type {function (): ?} */
      split : init,
      /** @type {function (Event): ?} */
      insertAtPoint : select,
      /** @type {function (): undefined} */
      remove : removeClass
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.selection = function(self) {
    /**
     * @return {?}
     */
    function getSelectedText() {
      /** @type {string} */
      var text = "";
      return self.win.getSelection ? text = self.win.getSelection() : self.doc.getSelection ? text = self.doc.getSelection() : self.doc.selection && (text = self.doc.selection.createRange().text), text.toString();
    }
    /**
     * @return {?}
     */
    function get() {
      /** @type {string} */
      var optsData = "";
      return optsData = self.win.getSelection ? self.win.getSelection() : self.doc.getSelection ? self.doc.getSelection() : self.doc.selection.createRange();
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function start(mayParseLabeledStatementInstead) {
      var selection = get();
      /** @type {Array} */
      var colNames = [];
      if (selection && (selection.getRangeAt && selection.rangeCount)) {
        /** @type {Array} */
        colNames = [];
        /** @type {number} */
        var i = 0;
        for (;i < selection.rangeCount;i++) {
          colNames.push(selection.getRangeAt(i));
        }
      } else {
        /** @type {Array} */
        colNames = self.doc.createRange ? [self.doc.createRange()] : [];
      }
      return "undefined" != typeof mayParseLabeledStatementInstead ? colNames[mayParseLabeledStatementInstead] : colNames;
    }
    /**
     * @return {undefined}
     */
    function clear() {
      var selection = get();
      try {
        if (selection.removeAllRanges) {
          selection.removeAllRanges();
        } else {
          if (selection.empty) {
            selection.empty();
          } else {
            if (selection.clear) {
              selection.clear();
            }
          }
        }
      } catch (b) {
      }
    }
    /**
     * @return {?}
     */
    function walk() {
      var selection = get();
      try {
        if (selection.rangeCount) {
          var range = start(0);
          var node = range.startContainer;
          if (node.nodeType == Node.TEXT_NODE && (range.startOffset == (node.textContent || "").length && (node.nextSibling && (node = node.nextSibling))), node.nodeType == Node.ELEMENT_NODE) {
            /** @type {boolean} */
            var i = false;
            if (node.childNodes.length > 0 && node.childNodes[range.startOffset]) {
              var parent = node.childNodes[range.startOffset];
              for (;parent && (parent.nodeType == Node.TEXT_NODE && 0 == parent.textContent.length);) {
                parent = parent.nextSibling;
              }
              if (parent) {
                if (parent.textContent.replace(/\u200B/g, "") === getSelectedText().replace(/\u200B/g, "")) {
                  node = parent;
                  /** @type {boolean} */
                  i = true;
                }
              }
            } else {
              if (!range.collapsed && (node.nextSibling && node.nextSibling.nodeType == Node.ELEMENT_NODE)) {
                parent = node.nextSibling;
                if (parent) {
                  if (parent.textContent.replace(/\u200B/g, "") === getSelectedText().replace(/\u200B/g, "")) {
                    node = parent;
                    /** @type {boolean} */
                    i = true;
                  }
                }
              }
            }
            if (!i) {
              if (node.childNodes.length > 0) {
                if ($(node.childNodes[0]).text().replace(/\u200B/g, "") === getSelectedText().replace(/\u200B/g, "")) {
                  if (["BR", "IMG", "HR"].indexOf(node.childNodes[0].tagName) < 0) {
                    node = node.childNodes[0];
                  }
                }
              }
            }
          }
          for (;node.nodeType != Node.ELEMENT_NODE && node.parentNode;) {
            node = node.parentNode;
          }
          var current = node;
          for (;current && "HTML" != current.tagName;) {
            if (current == self.$el.get(0)) {
              return node;
            }
            current = $(current).parent()[0];
          }
        }
      } catch (l) {
      }
      return self.$el.get(0);
    }
    /**
     * @return {?}
     */
    function initialize() {
      var selection = get();
      try {
        if (selection.rangeCount) {
          var obj = start(0);
          var node = obj.endContainer;
          if (node.nodeType == Node.ELEMENT_NODE) {
            /** @type {boolean} */
            var i = false;
            if (node.childNodes.length > 0 && (node.childNodes[obj.endOffset] && $(node.childNodes[obj.endOffset]).text() === getSelectedText())) {
              node = node.childNodes[obj.endOffset];
              /** @type {boolean} */
              i = true;
            } else {
              if (!obj.collapsed && (node.previousSibling && node.previousSibling.nodeType == Node.ELEMENT_NODE)) {
                var child = node.previousSibling;
                if (child) {
                  if (child.textContent.replace(/\u200B/g, "") === getSelectedText().replace(/\u200B/g, "")) {
                    node = child;
                    /** @type {boolean} */
                    i = true;
                  }
                }
              } else {
                if (!obj.collapsed && (node.childNodes.length > 0 && node.childNodes[obj.endOffset])) {
                  child = node.childNodes[obj.endOffset].previousSibling;
                  if (child.nodeType == Node.ELEMENT_NODE) {
                    if (child) {
                      if (child.textContent.replace(/\u200B/g, "") === getSelectedText().replace(/\u200B/g, "")) {
                        node = child;
                        /** @type {boolean} */
                        i = true;
                      }
                    }
                  }
                }
              }
            }
            if (!i) {
              if (node.childNodes.length > 0) {
                if ($(node.childNodes[node.childNodes.length - 1]).text() === getSelectedText()) {
                  if (["BR", "IMG", "HR"].indexOf(node.childNodes[node.childNodes.length - 1].tagName) < 0) {
                    node = node.childNodes[node.childNodes.length - 1];
                  }
                }
              }
            }
          }
          if (node.nodeType == Node.TEXT_NODE) {
            if (0 == obj.endOffset) {
              if (node.previousSibling) {
                if (node.previousSibling.nodeType == Node.ELEMENT_NODE) {
                  node = node.previousSibling;
                }
              }
            }
          }
          for (;node.nodeType != Node.ELEMENT_NODE && node.parentNode;) {
            node = node.parentNode;
          }
          var current = node;
          for (;current && "HTML" != current.tagName;) {
            if (current == self.$el.get(0)) {
              return node;
            }
            current = $(current).parent()[0];
          }
        }
      } catch (l) {
      }
      return self.$el.get(0);
    }
    /**
     * @param {?} any
     * @param {?} offset
     * @return {?}
     */
    function innerNode(any, offset) {
      var node = any;
      return node.nodeType == Node.ELEMENT_NODE && (node.childNodes.length > 0 && (node.childNodes[offset] && (node = node.childNodes[offset]))), node.nodeType == Node.TEXT_NODE && (node = node.parentNode), node;
    }
    /**
     * @return {?}
     */
    function next() {
      /** @type {Array} */
      var items = [];
      var selection = get();
      if (parseUrl() && selection.rangeCount) {
        var codeSegments = start();
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var range = codeSegments[i];
          var item = innerNode(range.startContainer, range.startOffset);
          var child = innerNode(range.endContainer, range.endOffset);
          if (self.node.isBlock(item)) {
            if (items.indexOf(item) < 0) {
              items.push(item);
            }
          }
          var w = self.node.blockParent(item);
          if (w) {
            if (items.indexOf(w) < 0) {
              items.push(w);
            }
          }
          /** @type {Array} */
          var ancestors = [];
          var node = item;
          for (;node !== child && node !== self.$el.get(0);) {
            if (ancestors.indexOf(node) < 0 && (node.children && node.children.length)) {
              ancestors.push(node);
              node = node.children[0];
            } else {
              if (node.nextSibling) {
                node = node.nextSibling;
              } else {
                if (node.parentNode) {
                  node = node.parentNode;
                  ancestors.push(node);
                }
              }
            }
            if (self.node.isBlock(node)) {
              if (ancestors.indexOf(node) < 0) {
                if (items.indexOf(node) < 0) {
                  if (node !== child || range.endOffset > 0) {
                    items.push(node);
                  }
                }
              }
            }
          }
          if (self.node.isBlock(child)) {
            if (items.indexOf(child) < 0) {
              if (range.endOffset > 0) {
                items.push(child);
              }
            }
          }
          w = self.node.blockParent(child);
          if (w) {
            if (items.indexOf(w) < 0) {
              items.push(w);
            }
          }
        }
      }
      /** @type {number} */
      i = items.length - 1;
      for (;i > 0;i--) {
        if ($(items[i]).find(items).length) {
          if ("LI" != items[i].tagName) {
            items.splice(i, 1);
          }
        }
      }
      return items;
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.$wp) {
        self.markers.remove();
        var codeSegments = start();
        /** @type {Array} */
        var ranges = [];
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].startContainer !== self.doc) {
            var range = codeSegments[i];
            var collapsed = range.collapsed;
            var marker = self.markers.place(range, true, i);
            var end = self.markers.place(range, false, i);
            if (self.$el.get(0).normalize(), self.browser.safari && !collapsed) {
              range = self.doc.createRange();
              range.setStartAfter(marker);
              range.setEndBefore(end);
              ranges.push(range);
            }
          }
        }
        if (self.browser.safari && ranges.length) {
          self.selection.clear();
          /** @type {number} */
          i = 0;
          for (;i < ranges.length;i++) {
            self.selection.get().addRange(ranges[i]);
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function update() {
      var codeSegments = self.$el.get(0).querySelectorAll('.fr-marker[data-type="true"]');
      if (!self.$wp) {
        return self.markers.remove(), false;
      }
      if (0 === codeSegments.length) {
        return false;
      }
      if (self.browser.msie || self.browser.edge) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          /** @type {string} */
          codeSegments[i].style.display = "inline-block";
        }
      }
      if (!self.core.hasFocus()) {
        if (!self.browser.msie) {
          if (!self.browser.webkit) {
            self.$el.focus();
          }
        }
      }
      clear();
      var selection = get();
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var targetNode = $(codeSegments[i]).data("id");
        var elem = codeSegments[i];
        var range = self.doc.createRange();
        var element = self.$el.find('.fr-marker[data-type="false"][data-id="' + targetNode + '"]');
        if (self.browser.msie || self.browser.edge) {
          element.css("display", "inline-block");
        }
        /** @type {null} */
        var $child = null;
        if (element.length > 0) {
          element = element[0];
          try {
            /** @type {boolean} */
            var n = false;
            var parent = elem.nextSibling;
            for (;parent && (parent.nodeType == Node.TEXT_NODE && 0 == parent.textContent.length);) {
              var container = parent;
              parent = parent.nextSibling;
              $(container).remove();
            }
            var sibling = element.nextSibling;
            for (;sibling && (sibling.nodeType == Node.TEXT_NODE && 0 == sibling.textContent.length);) {
              container = sibling;
              sibling = sibling.nextSibling;
              $(container).remove();
            }
            if (elem.nextSibling == element || element.nextSibling == elem) {
              var dom = elem.nextSibling == element ? elem : element;
              var me = dom == elem ? element : elem;
              var node = dom.previousSibling;
              for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.length);) {
                container = node;
                node = node.previousSibling;
                $(container).remove();
              }
              if (node && node.nodeType == Node.TEXT_NODE) {
                for (;node && (node.previousSibling && node.previousSibling.nodeType == Node.TEXT_NODE);) {
                  node.previousSibling.textContent = node.previousSibling.textContent + node.textContent;
                  node = node.previousSibling;
                  $(node.nextSibling).remove();
                }
              }
              var el = me.nextSibling;
              for (;el && (el.nodeType == Node.TEXT_NODE && 0 == el.length);) {
                container = el;
                el = el.nextSibling;
                $(container).remove();
              }
              if (el && el.nodeType == Node.TEXT_NODE) {
                for (;el && (el.nextSibling && el.nextSibling.nodeType == Node.TEXT_NODE);) {
                  el.nextSibling.textContent = el.textContent + el.nextSibling.textContent;
                  el = el.nextSibling;
                  $(el.previousSibling).remove();
                }
              }
              if (node && ((self.node.isVoid(node) || self.node.isBlock(node)) && (node = null)), el && ((self.node.isVoid(el) || self.node.isBlock(el)) && (el = null)), node && (el && (node.nodeType == Node.TEXT_NODE && el.nodeType == Node.TEXT_NODE))) {
                $(elem).remove();
                $(element).remove();
                var endIndex = node.textContent.length;
                node.textContent = node.textContent + el.textContent;
                $(el).remove();
                self.spaces.normalize(node);
                range.setStart(node, endIndex);
                range.setEnd(node, endIndex);
                /** @type {boolean} */
                n = true;
              } else {
                if (!node && (el && el.nodeType == Node.TEXT_NODE)) {
                  $(elem).remove();
                  $(element).remove();
                  self.spaces.normalize(el);
                  $child = $(self.doc.createTextNode("\u200b"));
                  $(el).before($child);
                  range.setStart(el, 0);
                  range.setEnd(el, 0);
                  /** @type {boolean} */
                  n = true;
                } else {
                  if (!el) {
                    if (node) {
                      if (node.nodeType == Node.TEXT_NODE) {
                        $(elem).remove();
                        $(element).remove();
                        self.spaces.normalize(node);
                        $child = $(self.doc.createTextNode("\u200b"));
                        $(node).after($child);
                        range.setStart(node, node.textContent.length);
                        range.setEnd(node, node.textContent.length);
                        /** @type {boolean} */
                        n = true;
                      }
                    }
                  }
                }
              }
            }
            if (!n) {
              var fn;
              var handler;
              if (self.browser.chrome && elem.nextSibling == element) {
                fn = getText(element, range, true) || range.setStartAfter(element);
                handler = getText(elem, range, false) || range.setEndBefore(elem);
              } else {
                if (elem.previousSibling == element) {
                  elem = element;
                  element = elem.nextSibling;
                }
                if (!(element.nextSibling && "BR" === element.nextSibling.tagName)) {
                  if (!(!element.nextSibling && self.node.isBlock(elem.previousSibling))) {
                    if (!(elem.previousSibling && "BR" == elem.previousSibling.tagName)) {
                      /** @type {string} */
                      elem.style.display = "inline";
                      /** @type {string} */
                      element.style.display = "inline";
                      $child = $(self.doc.createTextNode("\u200b"));
                    }
                  }
                }
                var span = elem.previousSibling;
                if (span && (span.style && ("block" == self.win.getComputedStyle(span).display && !self.opts.enter == $.FE.ENTER_BR))) {
                  range.setEndAfter(span);
                  range.setStartAfter(span);
                } else {
                  fn = getText(elem, range, true) || $(elem).before($child) && range.setStartBefore(elem);
                  handler = getText(element, range, false) || $(element).after($child) && range.setEndAfter(element);
                }
              }
              if ("function" == typeof fn) {
                fn();
              }
              if ("function" == typeof handler) {
                handler();
              }
            }
          } catch (z) {
          }
        }
        if ($child) {
          $child.remove();
        }
        try {
          selection.addRange(range);
        } catch (z) {
        }
      }
      self.markers.remove();
    }
    /**
     * @param {Node} el
     * @param {?} range
     * @param {boolean} recurring
     * @return {?}
     */
    function getText(el, range, recurring) {
      var node = el.previousSibling;
      var container = el.nextSibling;
      if (node && (container && (node.nodeType == Node.TEXT_NODE && container.nodeType == Node.TEXT_NODE))) {
        var endIndex = node.textContent.length;
        return recurring ? (container.textContent = node.textContent + container.textContent, $(node).remove(), $(el).remove(), self.spaces.normalize(container), function() {
          range.setStart(container, endIndex);
        }) : (node.textContent = node.textContent + container.textContent, $(container).remove(), $(el).remove(), self.spaces.normalize(node), function() {
          range.setEnd(node, endIndex);
        });
      }
      if (node && (!container && node.nodeType == Node.TEXT_NODE)) {
        endIndex = node.textContent.length;
        return recurring ? (self.spaces.normalize(node), function() {
          range.setStart(node, endIndex);
        }) : (self.spaces.normalize(node), function() {
          range.setEnd(node, endIndex);
        });
      }
      return container && (!node && container.nodeType == Node.TEXT_NODE) ? recurring ? (self.spaces.normalize(container), function() {
        range.setStart(container, 0);
      }) : (self.spaces.normalize(container), function() {
        range.setEnd(container, 0);
      }) : false;
    }
    /**
     * @return {?}
     */
    function isWhitespace() {
      return true;
    }
    /**
     * @return {?}
     */
    function toJSON() {
      var codeSegments = start();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (!codeSegments[i].collapsed) {
          return false;
        }
      }
      return true;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function getSelection(node) {
      var constraint;
      var rng;
      /** @type {boolean} */
      var atStart = false;
      /** @type {boolean} */
      var atEnd = false;
      if (self.win.getSelection) {
        var sel = self.win.getSelection();
        if (sel.rangeCount) {
          constraint = sel.getRangeAt(0);
          rng = constraint.cloneRange();
          rng.selectNodeContents(node);
          rng.setEnd(constraint.startContainer, constraint.startOffset);
          /** @type {boolean} */
          atStart = "" === rng.toString();
          rng.selectNodeContents(node);
          rng.setStart(constraint.endContainer, constraint.endOffset);
          /** @type {boolean} */
          atEnd = "" === rng.toString();
        }
      } else {
        if (self.doc.selection) {
          if ("Control" != self.doc.selection.type) {
            constraint = self.doc.selection.createRange();
            rng = constraint.duplicate();
            rng.moveToElementText(node);
            rng.setEndPoint("EndToStart", constraint);
            /** @type {boolean} */
            atStart = "" === rng.text;
            rng.moveToElementText(node);
            rng.setEndPoint("StartToEnd", constraint);
            /** @type {boolean} */
            atEnd = "" === rng.text;
          }
        }
      }
      return{
        atStart : atStart,
        atEnd : atEnd
      };
    }
    /**
     * @return {?}
     */
    function set() {
      if (toJSON()) {
        return false;
      }
      self.$el.find("td").prepend('<span class="fr-mk">' + $.FE.INVISIBLE_SPACE + "</span>");
      self.$el.find("img").append('<span class="fr-mk">' + $.FE.INVISIBLE_SPACE + "</span>");
      /** @type {boolean} */
      var atEnd = false;
      var br = getSelection(self.$el.get(0));
      return br.atStart && (br.atEnd && (atEnd = true)), self.$el.find(".fr-mk").remove(), atEnd;
    }
    /**
     * @param {Node} node
     * @param {boolean} last
     * @return {undefined}
     */
    function process(node, last) {
      if ("undefined" == typeof last) {
        /** @type {boolean} */
        last = true;
      }
      var vals = $(node).html();
      if (vals) {
        if (vals.replace(/\u200b/g, "").length != vals.length) {
          $(node).html(vals.replace(/\u200b/g, ""));
        }
      }
      var children = self.node.contents(node);
      /** @type {number} */
      var i = 0;
      for (;i < children.length;i++) {
        if (children[i].nodeType != Node.ELEMENT_NODE) {
          $(children[i]).remove();
        } else {
          process(children[i], 0 == i);
          if (0 == i) {
            /** @type {boolean} */
            last = false;
          }
        }
      }
      if (node.nodeType == Node.TEXT_NODE) {
        $(node).replaceWith('<span data-first="true" data-text="true"></span>');
      } else {
        if (last) {
          $(node).attr("data-first", true);
        }
      }
    }
    /**
     * @param {HTMLElement} component
     * @param {number} doc
     * @return {?}
     */
    function load(component, doc) {
      var codeSegments = self.node.contents(component.get(0));
      if (["TD", "TH"].indexOf(component.get(0).tagName) >= 0) {
        if (1 == component.find(".fr-marker").length) {
          if ($(codeSegments[0]).hasClass("fr-marker")) {
            component.attr("data-del-cell", true);
          }
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var val = codeSegments[i];
        if ($(val).hasClass("fr-marker")) {
          /** @type {number} */
          doc = (doc + 1) % 2;
        } else {
          if (doc) {
            if ($(val).find(".fr-marker").length > 0) {
              doc = load($(val), doc);
            } else {
              if (["TD", "TH"].indexOf(val.tagName) < 0 && !$(val).hasClass("fr-inner")) {
                if (!self.opts.keepFormatOnDelete || self.$el.find("[data-first]").length > 0) {
                  $(val).remove();
                } else {
                  process(val);
                }
              } else {
                if ($(val).hasClass("fr-inner")) {
                  if (0 == $(val).find(".fr-inner").length) {
                    $(val).html("<br>");
                  } else {
                    $(val).find(".fr-inner").filter(function() {
                      return 0 == $(this).find("fr-inner").length;
                    }).html("<br>");
                  }
                } else {
                  $(val).empty();
                  $(val).attr("data-del-cell", true);
                }
              }
            }
          } else {
            if ($(val).find(".fr-marker").length > 0) {
              doc = load($(val), doc);
            }
          }
        }
      }
      return doc;
    }
    /**
     * @return {?}
     */
    function parseUrl() {
      try {
        if (!self.$wp) {
          return false;
        }
        var child = start(0);
        var node = child.commonAncestorContainer;
        for (;node && !self.node.isElement(node);) {
          node = node.parentNode;
        }
        return self.node.isElement(node) ? true : false;
      } catch (d) {
        return false;
      }
    }
    /**
     * @return {?}
     */
    function parse() {
      if (toJSON()) {
        return true;
      }
      init();
      /**
       * @param {Element} target
       * @return {?}
       */
      var walk = function(target) {
        var node = target.previousSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.textContent.length);) {
          var next = node;
          node = node.previousSibling;
          $(next).remove();
        }
        return node;
      };
      /**
       * @param {(Array|Element)} parent
       * @return {?}
       */
      var parse = function(parent) {
        var node = parent.nextSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.textContent.length);) {
          var next = node;
          node = node.nextSibling;
          $(next).remove();
        }
        return node;
      };
      var comparisons = self.$el.find('.fr-marker[data-type="true"]');
      /** @type {number} */
      var i = 0;
      for (;i < comparisons.length;i++) {
        var t = comparisons[i];
        for (;!walk(t) && (!self.node.isBlock(t.parentNode) && !self.$el.is(t.parentNode));) {
          $(t.parentNode).before(t);
        }
      }
      var codeSegments = self.$el.find('.fr-marker[data-type="false"]');
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var item = codeSegments[i];
        for (;!parse(item) && (!self.node.isBlock(item.parentNode) && !self.$el.is(item.parentNode));) {
          $(item.parentNode).after(item);
        }
        if (item.parentNode) {
          if (self.node.isBlock(item.parentNode)) {
            if (self.node.isEmpty(item.parentNode)) {
              if (!self.$el.is(item.parentNode)) {
                $(item.parentNode).after(item);
              }
            }
          }
        }
      }
      if (isWhitespace()) {
        load(self.$el, 0);
        var $content = self.$el.find('[data-first="true"]');
        if ($content.length) {
          self.$el.find(".fr-marker").remove();
          $content.append($.FE.INVISIBLE_SPACE + $.FE.MARKERS).removeAttr("data-first");
          if ($content.attr("data-text")) {
            $content.replaceWith($content.html());
          }
        } else {
          self.$el.find("table").filter(function() {
            /** @type {boolean} */
            var obj = $(this).find("[data-del-cell]").length > 0 && $(this).find("[data-del-cell]").length == $(this).find("td, th").length;
            return obj;
          }).remove();
          self.$el.find("[data-del-cell]").removeAttr("data-del-cell");
          comparisons = self.$el.find('.fr-marker[data-type="true"]');
          /** @type {number} */
          i = 0;
          for (;i < comparisons.length;i++) {
            var element = comparisons[i];
            var node = element.nextSibling;
            var container = self.$el.find('.fr-marker[data-type="false"][data-id="' + $(element).data("id") + '"]').get(0);
            if (container) {
              if (node && node == container) {
              } else {
                if (element) {
                  var target = self.node.blockParent(element);
                  var el = self.node.blockParent(container);
                  /** @type {boolean} */
                  var u = false;
                  /** @type {boolean} */
                  var v = false;
                  if (target && (["UL", "OL"].indexOf(target.tagName) >= 0 && (target = null, u = true)), el && (["UL", "OL"].indexOf(el.tagName) >= 0 && (el = null, v = true)), $(element).after(container), target == el) {
                  } else {
                    if (null != target || u) {
                      if (null != el || (v || 0 != $(target).parentsUntil(self.$el, "table").length)) {
                        if (target) {
                          if (el) {
                            if (0 == $(target).parentsUntil(self.$el, "table").length) {
                              if (0 == $(el).parentsUntil(self.$el, "table").length) {
                                $(target).append($(el).html());
                                $(el).remove();
                              }
                            }
                          }
                        }
                      } else {
                        node = target;
                        for (;!node.nextSibling && node.parentNode != self.$el.get(0);) {
                          node = node.parentNode;
                        }
                        node = node.nextSibling;
                        for (;node && "BR" != node.tagName;) {
                          var nextNode = node.nextSibling;
                          $(target).append(node);
                          node = nextNode;
                        }
                        if (node) {
                          if ("BR" == node.tagName) {
                            $(node).remove();
                          }
                        }
                      }
                    } else {
                      var html = self.node.deepestParent(element);
                      if (html) {
                        $(html).after($(el).html());
                        $(el).remove();
                      } else {
                        if (0 == $(el).parentsUntil(self.$el, "table").length) {
                          $(element).next().after($(el).html());
                          $(el).remove();
                        }
                      }
                    }
                  }
                }
              }
            } else {
              container = $(element).clone().attr("data-type", false);
              $(element).after(container);
            }
          }
        }
      }
      if (!self.opts.keepFormatOnDelete) {
        self.html.fillEmptyBlocks();
      }
      self.html.cleanEmptyTags(true);
      self.clean.lists();
      self.spaces.normalize();
      var elem = self.$el.find(".fr-marker:last").get(0);
      var startNode = self.$el.find(".fr-marker:first").get(0);
      if (!elem.nextSibling) {
        if (startNode.previousSibling) {
          if ("BR" == startNode.previousSibling.tagName) {
            if (self.node.isElement(elem.parentNode)) {
              if (self.node.isElement(startNode.parentNode)) {
                self.$el.append("<br>");
              }
            }
          }
        }
      }
      update();
    }
    /**
     * @param {(RegExp|string)} node
     * @return {?}
     */
    function animate(node) {
      if ($(node).find(".fr-marker").length > 0) {
        return false;
      }
      var nodes = self.node.contents(node);
      for (;nodes.length && self.node.isBlock(nodes[0]);) {
        node = nodes[0];
        nodes = self.node.contents(node);
      }
      $(node).prepend($.FE.MARKERS);
    }
    /**
     * @param {(RegExp|string)} node
     * @return {?}
     */
    function wrap(node) {
      if ($(node).find(".fr-marker").length > 0) {
        return false;
      }
      var nodes = self.node.contents(node);
      for (;nodes.length && self.node.isBlock(nodes[nodes.length - 1]);) {
        node = nodes[nodes.length - 1];
        nodes = self.node.contents(node);
      }
      $(node).append($.FE.MARKERS);
    }
    /**
     * @param {Element} target
     * @return {?}
     */
    function select(target) {
      var node = target.previousSibling;
      for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.textContent.length);) {
        node = node.previousSibling;
      }
      return node ? (self.node.isBlock(node) ? wrap(node) : "BR" == node.tagName ? $(node).before($.FE.MARKERS) : $(node).after($.FE.MARKERS), true) : false;
    }
    /**
     * @param {(Array|Element)} end
     * @return {?}
     */
    function tick(end) {
      var node = end.nextSibling;
      for (;node && (node.nodeType == Node.TEXT_NODE && 0 == node.textContent.length);) {
        node = node.nextSibling;
      }
      return node ? (self.node.isBlock(node) ? animate(node) : $(node).before($.FE.MARKERS), true) : false;
    }
    return{
      /** @type {function (): ?} */
      text : getSelectedText,
      /** @type {function (): ?} */
      get : get,
      /** @type {function (number): ?} */
      ranges : start,
      /** @type {function (): undefined} */
      clear : clear,
      /** @type {function (): ?} */
      element : walk,
      /** @type {function (): ?} */
      endElement : initialize,
      /** @type {function (): undefined} */
      save : init,
      /** @type {function (): ?} */
      restore : update,
      /** @type {function (): ?} */
      isCollapsed : toJSON,
      /** @type {function (): ?} */
      isFull : set,
      /** @type {function (): ?} */
      inEditor : parseUrl,
      /** @type {function (): ?} */
      remove : parse,
      /** @type {function (): ?} */
      blocks : next,
      /** @type {function (?): ?} */
      info : getSelection,
      /** @type {function ((RegExp|string)): ?} */
      setAtEnd : wrap,
      /** @type {function ((RegExp|string)): ?} */
      setAtStart : animate,
      /** @type {function (Element): ?} */
      setBefore : select,
      /** @type {function ((Array|Element)): ?} */
      setAfter : tick,
      /** @type {function (?, ?): ?} */
      rangeElement : innerNode
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.spaces = function(self) {
    /**
     * @param {Node} node
     * @return {?}
     */
    function check(node) {
      var b = node.nextSibling || node.parentNode;
      return node.parentNode.removeChild(node), b;
    }
    /**
     * @param {Object} parent
     * @param {Node} node
     * @return {?}
     */
    function query(parent, node) {
      return parent && parent.parentNode === node || "PRE" === node.nodeName ? node.nextSibling || node.parentNode : node.firstChild || (node.nextSibling || node.parentNode);
    }
    /**
     * @param {Node} n
     * @return {undefined}
     */
    function walk(n) {
      if (n.firstChild && ("PRE" !== n.nodeName && !(["STYLE", "SCRIPT"].indexOf(n.tagName) >= 0))) {
        /** @type {null} */
        var item = null;
        /** @type {null} */
        var target = null;
        var node = query(target, n);
        for (;node !== n && ("PRE" !== node.nodeName && ["STYLE", "SCRIPT"].indexOf(node.tagName) < 0);) {
          if (node.nodeType === Node.TEXT_NODE) {
            var contents = node.data.replace(/[ \r\n\t]+/g, " ");
            if (item && !/ $/.test(item.data) || (" " !== contents[0] || (node.previousSibling && (self.node.isVoid(node.previousSibling) && "BR" !== node.previousSibling.tagName) || (contents = contents.substr(1)))), !contents || 0 == contents.length) {
              node = check(node);
              continue;
            }
            node.data = contents;
            item = node;
          } else {
            if (node.nodeType === Node.ELEMENT_NODE) {
              if (self.node.isBlock(node) || self.node.isVoid(node)) {
                if (item) {
                  if (item.data) {
                    if (self.node.isBlock(node) || "BR" === node.tagName) {
                      item.data = item.data.replace(/ $/, "");
                    }
                  }
                }
                /** @type {null} */
                item = null;
              } else {
                if (0 == node.textContent.length) {
                  item = node;
                }
              }
            }
          }
          var output = query(target, node);
          target = node;
          node = output;
        }
        if (item) {
          if (item.data) {
            item.data = item.data.replace(/ $/, "");
            if (!item.data) {
              check(item);
            }
          }
        }
      }
    }
    /**
     * @param {Node} node
     * @param {boolean} callback
     * @return {undefined}
     */
    function parse(node, callback) {
      if ("undefined" != typeof node && node || (node = self.$el.get(0)), "undefined" == typeof callback && (callback = false), callback && walk(node), !node.getAttribute || "false" != node.getAttribute("contenteditable")) {
        if (node.nodeType == Node.ELEMENT_NODE && ["STYLE", "SCRIPT", "HEAD"].indexOf(node.tagName) < 0) {
          var children = self.node.contents(node);
          /** @type {number} */
          var id = children.length - 1;
          for (;id >= 0;id--) {
            if (children[id].tagName != Node.ELEMENT_NODE || (children[id].className || "").indexOf("fr-marker") < 0) {
              parse(children[id]);
            }
          }
        } else {
          if (node.nodeType == Node.TEXT_NODE && node.textContent.length > 0) {
            var source = (node.previousSibling, node.nextSibling, node.textContent);
            source = source.replace(new RegExp($.FE.UNICODE_NBSP, "g"), " ");
            /** @type {string} */
            var text = "";
            /** @type {number} */
            var pos = 0;
            for (;pos < source.length;pos++) {
              text += 32 != source.charCodeAt(pos) || 0 !== pos && 32 != text.charCodeAt(pos - 1) ? source[pos] : $.FE.UNICODE_NBSP;
            }
            if (!node.nextSibling || (self.node.isBlock(node.nextSibling) || node.nextSibling.nodeType == Node.ELEMENT_NODE && (self.win.getComputedStyle(node.nextSibling) && "block" == self.win.getComputedStyle(node.nextSibling).display))) {
              text = text.replace(/ $/, $.FE.UNICODE_NBSP);
            }
            if (!!node.previousSibling) {
              if (!self.node.isVoid(node.previousSibling)) {
                if (!self.node.isBlock(node.previousSibling)) {
                  text = text.replace(/^\u00A0([^ $])/, " $1");
                  if (!(1 !== text.length)) {
                    if (!(160 !== text.charCodeAt(0))) {
                      if (!!node.nextSibling) {
                        if (!self.node.isVoid(node.nextSibling)) {
                          if (!self.node.isBlock(node.nextSibling)) {
                            /** @type {string} */
                            text = " ";
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            text = text.replace(/([^ \u00A0])\u00A0([^ \u00A0])/g, "$1 $2");
            if (node.textContent != text) {
              node.textContent = text;
            }
          }
        }
      }
    }
    return{
      /** @type {function (Node, boolean): undefined} */
      normalize : parse
    };
  };
  /** @type {string} */
  $.FE.UNICODE_NBSP = String.fromCharCode(160);
  /** @type {Array} */
  $.FE.VOID_ELEMENTS = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];
  /** @type {Array} */
  $.FE.BLOCK_TAGS = ["address", "article", "aside", "audio", "blockquote", "canvas", "dd", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav", "noscript", "ol", "output", "p", "pre", "section", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "ul", "video"];
  $.extend($.FE.DEFAULTS, {
    htmlAllowedEmptyTags : ["textarea", "a", "iframe", "object", "video", "style", "script", ".fa", ".fr-emoticon"],
    htmlDoNotWrapTags : ["script", "style"],
    htmlSimpleAmpersand : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.html = function(self) {
    /**
     * @return {?}
     */
    function getFixBodyTag() {
      return self.opts.enter == $.FE.ENTER_P ? "p" : self.opts.enter == $.FE.ENTER_DIV ? "div" : self.opts.enter == $.FE.ENTER_BR ? null : void 0;
    }
    /**
     * @return {?}
     */
    function update() {
      /** @type {Array} */
      var res = [];
      var xs = self.$el.get(0).querySelectorAll(fn());
      /** @type {number} */
      var j = 0;
      for (;j < xs.length;j++) {
        if (!(xs[j].querySelectorAll($.FE.VOID_ELEMENTS.join(",")).length > 0 || (xs[j].querySelectorAll(self.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)").length > 0 || xs[j].querySelectorAll(fn()).length > 0))) {
          var codeSegments = self.node.contents(xs[j]);
          /** @type {boolean} */
          var h = false;
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            if (codeSegments[i].nodeType != Node.COMMENT_NODE && (codeSegments[i].textContent && codeSegments[i].textContent.replace(/\u200B/g, "").replace(/\n/g, "").length > 0)) {
              /** @type {boolean} */
              h = true;
              break;
            }
          }
          if (!h) {
            res.push(xs[j]);
          }
        }
      }
      return res;
    }
    /**
     * @return {?}
     */
    function updateElement() {
      return $.FE.BLOCK_TAGS.join(":empty, ") + ":empty";
    }
    /**
     * @return {?}
     */
    function fn() {
      return $.FE.BLOCK_TAGS.join(", ");
    }
    /**
     * @param {boolean} last
     * @return {undefined}
     */
    function process(last) {
      var markers = $.merge([], $.FE.VOID_ELEMENTS);
      markers = $.merge(markers, self.opts.htmlAllowedEmptyTags);
      if ("undefined" == typeof last) {
        markers = $.merge(markers, $.FE.BLOCK_TAGS);
      }
      var nodes;
      var nodeIndexOutOfRange;
      do {
        /** @type {boolean} */
        nodeIndexOutOfRange = false;
        nodes = self.$el.get(0).querySelectorAll("*:empty:not(" + markers.join("):not(") + "):not(.fr-marker)");
        /** @type {number} */
        var i = 0;
        for (;i < nodes.length;i++) {
          if (0 === nodes[i].attributes.length || "undefined" != typeof nodes[i].getAttribute("href")) {
            $(nodes[i]).remove();
            /** @type {boolean} */
            nodeIndexOutOfRange = true;
          }
        }
        nodes = self.$el.get(0).querySelectorAll("*:empty:not(" + markers.join("):not(") + "):not(.fr-marker)");
      } while (nodes.length && nodeIndexOutOfRange);
    }
    /**
     * @param {Node} simple
     * @param {boolean} args
     * @return {undefined}
     */
    function parse(simple, args) {
      var dm = getFixBodyTag();
      if (args && (dm = 'div class="fr-temp-div"'), dm) {
        var minArray = self.node.contents(simple.get(0));
        /** @type {null} */
        var elem = null;
        /** @type {number} */
        var itemIndex = 0;
        for (;itemIndex < minArray.length;itemIndex++) {
          var node = minArray[itemIndex];
          if (node.nodeType == Node.ELEMENT_NODE && (self.node.isBlock(node) || $(node).is(self.opts.htmlDoNotWrapTags.join(",")) && !$(node).hasClass("fr-marker"))) {
            /** @type {null} */
            elem = null;
          } else {
            if (node.nodeType != Node.ELEMENT_NODE && node.nodeType != Node.TEXT_NODE) {
              /** @type {null} */
              elem = null;
            } else {
              if (node.nodeType == Node.ELEMENT_NODE && "BR" == node.tagName) {
                if (null == elem) {
                  if (args) {
                    $(node).replaceWith("<" + dm + ' data-empty="true"><br></div>');
                  } else {
                    $(node).replaceWith("<" + dm + "><br></" + dm + ">");
                  }
                } else {
                  $(node).remove();
                  var children = self.node.contents(elem);
                  /** @type {boolean} */
                  var l = false;
                  /** @type {number} */
                  var i = 0;
                  for (;i < children.length;i++) {
                    if (!$(children[i]).hasClass("fr-marker") && (children[i].nodeType != Node.TEXT_NODE || 0 !== children[i].textContent.replace(/ /g, "").length)) {
                      /** @type {boolean} */
                      l = true;
                      break;
                    }
                  }
                  if (l === false) {
                    elem.append("<br>");
                    elem.data("empty", true);
                  }
                  /** @type {null} */
                  elem = null;
                }
              } else {
                if (node.nodeType == Node.TEXT_NODE && 0 == $(node).text().trim().length) {
                  $(node).remove();
                } else {
                  if (null == elem) {
                    elem = $("<" + dm + ">");
                    $(node).before(elem);
                  }
                  if (node.nodeType == Node.TEXT_NODE && $(node).text().trim().length > 0) {
                    elem.append($(node).clone());
                    $(node).remove();
                  } else {
                    elem.append($(node));
                  }
                }
              }
            }
          }
        }
      }
    }
    /**
     * @param {boolean} callback
     * @param {boolean} index
     * @param {boolean} dataAndEvents
     * @param {boolean} args
     * @return {?}
     */
    function start(callback, index, dataAndEvents, args) {
      return self.$wp ? ("undefined" == typeof callback && (callback = false), "undefined" == typeof index && (index = false), "undefined" == typeof dataAndEvents && (dataAndEvents = false), "undefined" == typeof args && (args = false), parse(self.$el, callback), args && self.$el.find(".fr-inner").each(function() {
        parse($(this), callback);
      }), index && self.$el.find("td, th").each(function() {
        parse($(this), callback);
      }), void(dataAndEvents && self.$el.find("blockquote").each(function() {
        parse($(this), callback);
      }))) : false;
    }
    /**
     * @return {undefined}
     */
    function postLink() {
      self.$el.find("div.fr-temp-div").each(function() {
        if ($(this).data("empty") || "LI" == this.parentNode.tagName) {
          $(this).replaceWith($(this).html());
        } else {
          $(this).replaceWith($(this).html() + "<br>");
        }
      });
      self.$el.find(".fr-temp-div").removeClass("fr-temp-div").filter(function() {
        return "" == $(this).attr("class");
      }).removeAttr("class");
    }
    /**
     * @return {undefined}
     */
    function install() {
      var codeSegments = update();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (!("false" == node.getAttribute("contenteditable"))) {
          if (!(0 != node.querySelectorAll(self.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)").length)) {
            if (!self.node.isVoid(node)) {
              if ("TABLE" != node.tagName) {
                node.appendChild(self.doc.createElement("br"));
              }
            }
          }
        }
      }
      if (self.browser.msie && self.opts.enter == $.FE.ENTER_BR) {
        var all = self.node.contents(self.$el.get(0));
        if (all.length) {
          if (all[all.length - 1].nodeType == Node.TEXT_NODE) {
            self.$el.append("<br>");
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function find() {
      return self.$el.find(fn());
    }
    /**
     * @param {Element} node
     * @return {?}
     */
    function walk(node) {
      if ("undefined" == typeof node && (node = self.$el.get(0)), node && ["SCRIPT", "STYLE", "PRE"].indexOf(node.tagName) >= 0) {
        return false;
      }
      var c = self.node.contents(node);
      /** @type {number} */
      var i = c.length - 1;
      for (;i >= 0;i--) {
        if (c[i].nodeType == Node.TEXT_NODE) {
          c[i].textContent = c[i].textContent.replace(/(?!^)( ){2,}(?!$)/g, " ");
          c[i].textContent = c[i].textContent.replace(/\n/g, " ");
          c[i].textContent = c[i].textContent.replace(/^[ ]{2,}/g, " ");
          c[i].textContent = c[i].textContent.replace(/[ ]{2,}$/g, " ");
          if (self.node.isBlock(node) || self.node.isElement(node)) {
            if (!c[i].previousSibling) {
              c[i].textContent = c[i].textContent.replace(/^ */, "");
            }
            if (!c[i].nextSibling) {
              c[i].textContent = c[i].textContent.replace(/ *$/, "");
            }
            if (c[i].previousSibling) {
              if (c[i].nextSibling) {
                if (" " == c[i].textContent) {
                  if (c[i].previousSibling && (c[i].nextSibling && (self.node.isBlock(c[i].previousSibling) && self.node.isBlock(c[i].nextSibling)))) {
                    /** @type {string} */
                    c[i].textContent = "";
                  } else {
                    /** @type {string} */
                    c[i].textContent = "\n";
                  }
                }
              }
            }
          }
        } else {
          walk(c[i]);
        }
      }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function extract(node) {
      return node && (self.node.isBlock(node) || (["STYLE", "SCRIPT", "HEAD", "BR", "HR"].indexOf(node.tagName) >= 0 || node.nodeType == Node.COMMENT_NODE));
    }
    /**
     * @param {Node} node
     * @return {?}
     */
    function load(node) {
      if ("undefined" == typeof node && (node = self.$el.get(0)), node.nodeType == Node.ELEMENT_NODE && ["STYLE", "SCRIPT", "HEAD"].indexOf(node.tagName) < 0) {
        var list = self.node.contents(node);
        /** @type {number} */
        var name = list.length - 1;
        for (;name >= 0;name--) {
          if (!$(list[name]).hasClass("fr-marker")) {
            var ok = load(list[name]);
            if (1 == ok) {
              return true;
            }
          }
        }
      } else {
        if (node.nodeType == Node.TEXT_NODE && node.textContent.length > 0) {
          var sib = node.previousSibling;
          var sibling = node.nextSibling;
          if (extract(sib) && (extract(sibling) && 0 === node.textContent.trim().length)) {
            return true;
          }
          var template = node.textContent;
          template = template.replace(new RegExp($.FE.UNICODE_NBSP, "g"), " ");
          /** @type {string} */
          var text = "";
          /** @type {number} */
          var i = 0;
          for (;i < template.length;i++) {
            text += 32 != template.charCodeAt(i) || 0 !== i && 32 != text.charCodeAt(i - 1) ? template[i] : $.FE.UNICODE_NBSP;
          }
          if (node.nextSibling || (text = text.replace(/ $/, $.FE.UNICODE_NBSP)), node.previousSibling && (!self.node.isVoid(node.previousSibling) && (text = text.replace(/^\u00A0([^ $])/, " $1"))), text = text.replace(/([^ \u00A0])\u00A0([^ \u00A0])/g, "$1 $2"), node.textContent != text) {
            return true;
          }
        }
      }
      return false;
    }
    /**
     * @param {string} item
     * @param {string} pattern
     * @param {number} property
     * @return {?}
     */
    function getValue(item, pattern, property) {
      /** @type {RegExp} */
      var regex = new RegExp(pattern, "gi");
      /** @type {(Array.<string>|null)} */
      var object = regex.exec(item);
      return object ? object[property] : null;
    }
    /**
     * @param {string} segment
     * @param {Object} bind
     * @return {?}
     */
    function filter(segment, bind) {
      var token = segment.match(/<!DOCTYPE ?([^ ]*) ?([^ ]*) ?"?([^"]*)"? ?"?([^"]*)"?>/i);
      return token ? bind.implementation.createDocumentType(token[1], token[3], token[4]) : bind.implementation.createDocumentType("html");
    }
    /**
     * @param {?} doc
     * @return {?}
     */
    function isEqual(doc) {
      var doctype = doc.doctype;
      /** @type {string} */
      var c = "<!DOCTYPE html>";
      return doctype && (c = "<!DOCTYPE " + doctype.name + (doctype.publicId ? ' PUBLIC "' + doctype.publicId + '"' : "") + (!doctype.publicId && doctype.systemId ? " SYSTEM" : "") + (doctype.systemId ? ' "' + doctype.systemId + '"' : "") + ">"), c;
    }
    /**
     * @return {undefined}
     */
    function add() {
      start();
      walk();
      process();
      self.spaces.normalize(null, true);
      self.html.fillEmptyBlocks();
      self.clean.quotes();
      self.clean.lists();
      self.clean.tables();
      self.clean.toHTML5();
      self.selection.restore();
      init();
      self.placeholder.refresh();
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.core.isEmpty()) {
        if (null != getFixBodyTag()) {
          if (0 === self.$el.get(0).querySelectorAll(fn()).length) {
            if (0 === self.$el.get(0).querySelectorAll(self.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)").length) {
              if (self.core.hasFocus()) {
                self.$el.html("<" + getFixBodyTag() + ">" + $.FE.MARKERS + "<br/></" + getFixBodyTag() + ">");
                self.selection.restore();
              } else {
                self.$el.html("<" + getFixBodyTag() + "><br/></" + getFixBodyTag() + ">");
              }
            }
          }
        } else {
          if (0 === self.$el.get(0).querySelectorAll("*:not(.fr-marker):not(br)").length) {
            if (self.core.hasFocus()) {
              self.$el.html($.FE.MARKERS + "<br/>");
              self.selection.restore();
            } else {
              self.$el.html("<br/>");
            }
          }
        }
      }
    }
    /**
     * @param {string} key
     * @param {string} el
     * @return {?}
     */
    function loop(key, el) {
      return getValue(key, "<" + el + "[^>]*?>([\\w\\W]*)</" + el + ">", 1);
    }
    /**
     * @param {string} key
     * @param {string} data
     * @return {?}
     */
    function callback(key, data) {
      var cl = $("<div " + (getValue(key, "<" + data + "([^>]*?)>", 1) || "") + ">");
      return self.node.rawAttributes(cl.get(0));
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function save(value) {
      return getValue(value, "<!DOCTYPE([^>]*?)>", 0) || "<!DOCTYPE html>";
    }
    /**
     * @param {string} value
     * @return {undefined}
     */
    function render(value) {
      var m = self.clean.html(value || "", [], [], self.opts.fullPage);
      if (self.opts.fullPage) {
        var str = loop(m, "body") || (m.indexOf("<body") >= 0 ? "" : m);
        var current = callback(m, "body");
        var context = loop(m, "head") || "<title></title>";
        var val = callback(m, "head");
        var label = $("<div>").append(context).find("base, link, meta, noscript, script, style, template, title").remove().end().html().trim();
        context = $("<div>").append(context).find("base, link, meta, noscript, script, style, template, title").map(function() {
          return this.outerHTML;
        }).toArray().join("");
        var row = save(m);
        var a = callback(m, "html");
        self.$el.html(label + "\n" + str);
        self.node.clearAttributes(self.$el.get(0));
        self.$el.attr(current);
        self.$el.addClass("fr-view");
        self.$el.attr("spellcheck", self.opts.spellcheck);
        self.$el.attr("dir", self.opts.direction);
        self.$head.html(context);
        self.node.clearAttributes(self.$head.get(0));
        self.$head.attr(val);
        self.node.clearAttributes(self.$html.get(0));
        self.$html.attr(a);
        self.iframe_document.doctype.parentNode.replaceChild(filter(row, self.iframe_document), self.iframe_document.doctype);
      } else {
        self.$el.html(m);
      }
      var l = self.edit.isDisabled();
      self.edit.on();
      self.core.injectStyle(self.opts.iframeStyle);
      add();
      if (!self.opts.useClasses) {
        self.$el.find("[fr-original-class]").each(function() {
          this.setAttribute("class", this.getAttribute("fr-original-class"));
          this.removeAttribute("fr-original-class");
        });
        self.$el.find("[fr-original-style]").each(function() {
          this.setAttribute("style", this.getAttribute("fr-original-style"));
          this.removeAttribute("fr-original-style");
        });
      }
      if (l) {
        self.edit.off();
      }
      self.events.trigger("html.set");
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @param {boolean} opt_isCancel
     * @return {?}
     */
    function set(mayParseLabeledStatementInstead, opt_isCancel) {
      if (!self.$wp) {
        return self.$oel.clone().removeClass("fr-view").removeAttr("contenteditable").get(0).outerHTML;
      }
      /** @type {string} */
      var string = "";
      self.events.trigger("html.beforeGet");
      var index;
      /**
       * @param {Text} line
       * @return {?}
       */
      var done = function(line) {
        /** @type {RegExp} */
        var rclass = /(#[^\s\+>~\.\[:]+)/g;
        /** @type {RegExp} */
        var r20 = /(\[[^\]]+\])/g;
        /** @type {RegExp} */
        var rreturn = /(\.[^\s\+>~\.\[:]+)/g;
        /** @type {RegExp} */
        var re = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi;
        /** @type {RegExp} */
        var typePattern = /(:[\w-]+\([^\)]*\))/gi;
        /** @type {RegExp} */
        var directive = /(:[^\s\+>~\.\[:]+)/g;
        /** @type {RegExp} */
        var LINKY_URL_REGEXP = /([^\s\+>~\.\[:]+)/g;
        !function() {
          /** @type {RegExp} */
          var re = /:not\(([^\)]*)\)/g;
          if (re.test(line)) {
            line = line.replace(re, "     $1 ");
          }
        }();
        var prevChunksLen = 100 * (line.match(rclass) || []).length + 10 * (line.match(r20) || []).length + 10 * (line.match(rreturn) || []).length + 10 * (line.match(typePattern) || []).length + 10 * (line.match(directive) || []).length + (line.match(re) || []).length;
        return line = line.replace(/[\*\s\+>~]/g, " "), line = line.replace(/[#\.]/g, " "), prevChunksLen += (line.match(LINKY_URL_REGEXP) || []).length;
      };
      /** @type {Array} */
      var items = [];
      var value = {};
      if (!self.opts.useClasses && !opt_isCancel) {
        /** @type {number} */
        index = 0;
        for (;index < self.doc.styleSheets.length;index++) {
          var rules;
          /** @type {number} */
          var j = 0;
          try {
            rules = self.doc.styleSheets[index].cssRules;
            if (self.doc.styleSheets[index].ownerNode) {
              if ("STYLE" == self.doc.styleSheets[index].ownerNode.nodeType) {
                /** @type {number} */
                j = 1;
              }
            }
          } catch (k) {
          }
          if (rules) {
            /** @type {number} */
            var i = 0;
            var len = rules.length;
            for (;len > i;i++) {
              if (rules[i].selectorText && rules[i].style.cssText.length > 0) {
                var nodes;
                var selector = rules[i].selectorText.replace(/body |\.fr-view /g, "").replace(/::/g, ":");
                try {
                  nodes = self.$el.get(0).querySelectorAll(selector);
                } catch (k) {
                  /** @type {Array} */
                  nodes = [];
                }
                /** @type {number} */
                var x = 0;
                for (;x < nodes.length;x++) {
                  if (!nodes[x].getAttribute("fr-original-style") && nodes[x].getAttribute("style")) {
                    nodes[x].setAttribute("fr-original-style", nodes[x].getAttribute("style"));
                    items.push(nodes[x]);
                  } else {
                    if (!nodes[x].getAttribute("fr-original-style")) {
                      items.push(nodes[x]);
                    }
                  }
                  if (!value[nodes[x]]) {
                    value[nodes[x]] = {};
                  }
                  var ref = 1E3 * j + done(rules[i].selectorText);
                  var parameters = rules[i].style.cssText.split(";");
                  /** @type {number} */
                  var p = 0;
                  for (;p < parameters.length;p++) {
                    var name = parameters[p].trim().split(":")[0];
                    if (!value[nodes[x]][name]) {
                      /** @type {number} */
                      value[nodes[x]][name] = 0;
                      if ((nodes[x].getAttribute("fr-original-style") || "").indexOf(name + ":") >= 0) {
                        /** @type {number} */
                        value[nodes[x]][name] = 1E4;
                      }
                    }
                    if (ref >= value[nodes[x]][name]) {
                      value[nodes[x]][name] = ref;
                      if (parameters[p].trim().length) {
                        nodes[x].style[name.trim()] = parameters[p].trim().split(":")[1].trim();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        /** @type {number} */
        index = 0;
        for (;index < items.length;index++) {
          if (items[index].getAttribute("class") && (items[index].setAttribute("fr-original-class", items[index].getAttribute("class")), items[index].removeAttribute("class")), (items[index].getAttribute("fr-original-style") || "").trim().length > 0) {
            var scriptArgs = items[index].getAttribute("fr-original-style").split(";");
            /** @type {number} */
            x = 0;
            for (;x < scriptArgs.length;x++) {
              if (scriptArgs[x].indexOf(":") > 0) {
                items[index].style[scriptArgs[x].split(":")[0].trim()] = scriptArgs[x].split(":")[1].trim();
              }
            }
          }
        }
      }
      if (self.core.isEmpty() ? self.opts.fullPage && (string = isEqual(self.iframe_document), string += "<html" + self.node.attributes(self.$html.get(0)) + ">" + self.$html.find("head").get(0).outerHTML + "<body></body></html>") : ("undefined" == typeof mayParseLabeledStatementInstead && (mayParseLabeledStatementInstead = false), self.opts.fullPage ? (string = isEqual(self.iframe_document), self.$el.removeClass("fr-view"), string += "<html" + self.node.attributes(self.$html.get(0)) + ">" + self.$html.html() + 
      "</html>", self.$el.addClass("fr-view")) : string = self.$el.html()), !self.opts.useClasses && !opt_isCancel) {
        /** @type {number} */
        index = 0;
        for (;index < items.length;index++) {
          if (items[index].getAttribute("fr-original-class")) {
            items[index].setAttribute("class", items[index].getAttribute("fr-original-class"));
            items[index].removeAttribute("fr-original-class");
          }
          if (items[index].getAttribute("fr-original-style")) {
            items[index].setAttribute("style", items[index].getAttribute("fr-original-style"));
            items[index].removeAttribute("fr-original-style");
          } else {
            items[index].removeAttribute("style");
          }
        }
      }
      if (self.opts.fullPage) {
        /** @type {string} */
        string = string.replace(/<style data-fr-style="true">(?:[\w\W]*?)<\/style>/g, "");
        /** @type {string} */
        string = string.replace(/<link(?:[\w\W]*?)data-fr-style="true"(?:[\w\W]*?)>/g, "");
        /** @type {string} */
        string = string.replace(/<style(?:[\w\W]*?)class="firebugResetStyles"(?:[\w\W]*?)>(?:[\w\W]*?)<\/style>/g, "");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) spellcheck="true"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) contenteditable="(true|false)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$3>$4</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) dir="([\w]*)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$3>$4</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?))class="([\w\W]*?)(fr-rtl|fr-ltr)([\w\W]*?)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, '<body$1class="$2$4"$5>$6</body>');
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) class=""((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>");
      }
      if (self.opts.htmlSimpleAmpersand) {
        /** @type {string} */
        string = string.replace(/\&amp;/gi, "&");
      }
      self.events.trigger("html.afterGet");
      if (!mayParseLabeledStatementInstead) {
        /** @type {string} */
        string = string.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, "");
      }
      string = self.clean.invisibleSpaces(string);
      var err = self.events.chainTrigger("html.get", string);
      return "string" == typeof err && (string = err), string = string.replace(/<pre(?:[\w\W]*?)>(?:[\w\W]*?)<\/pre>/g, function(messageFormat) {
        return messageFormat.replace(/<br>/g, "\n");
      });
    }
    /**
     * @return {?}
     */
    function initialize() {
      /**
       * @param {Element} element
       * @param {string} node
       * @return {undefined}
       */
      var walk = function(element, node) {
        for (;node && ((node.nodeType == Node.TEXT_NODE || !self.node.isBlock(node)) && !self.node.isElement(node));) {
          if (node) {
            if (node.nodeType != Node.TEXT_NODE) {
              $(element).wrapInner(self.node.openTagString(node) + self.node.closeTagString(node));
            }
          }
          node = node.parentNode;
        }
        if (node) {
          if (element.innerHTML == node.innerHTML) {
            element.innerHTML = node.outerHTML;
          }
        }
      };
      /**
       * @return {?}
       */
      var init = function() {
        var selection;
        /** @type {null} */
        var node = null;
        return self.win.getSelection ? (selection = self.win.getSelection(), selection && (selection.rangeCount && (node = selection.getRangeAt(0).commonAncestorContainer, node.nodeType != Node.ELEMENT_NODE && (node = node.parentNode)))) : (selection = self.doc.selection) && ("Control" != selection.type && (node = selection.createRange().parentElement())), null != node && ($.inArray(self.$el.get(0), $(node).parents()) >= 0 || node == self.$el.get(0)) ? node : null;
      };
      /** @type {string} */
      var html = "";
      if ("undefined" != typeof self.win.getSelection) {
        if (self.browser.mozilla) {
          self.selection.save();
          if (self.$el.find('.fr-marker[data-type="false"]').length > 1) {
            self.$el.find('.fr-marker[data-type="false"][data-id="0"]').remove();
            self.$el.find('.fr-marker[data-type="false"]:last').attr("data-id", "0");
            self.$el.find(".fr-marker").not('[data-id="0"]').remove();
          }
          self.selection.restore();
        }
        var codeSegments = self.selection.ranges();
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          /** @type {Element} */
          var e = document.createElement("div");
          e.appendChild(codeSegments[i].cloneContents());
          walk(e, init());
          if ($(e).find(".fr-element").length > 0) {
            e = self.$el.get(0);
          }
          html += e.innerHTML;
        }
      } else {
        if ("undefined" != typeof self.doc.selection) {
          if ("Text" == self.doc.selection.type) {
            html = self.doc.selection.createRange().htmlText;
          }
        }
      }
      return html;
    }
    /**
     * @param {string} options
     * @return {?}
     */
    function compile(options) {
      var r = $("<div>").html(options);
      return r.find(fn()).length > 0;
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function fragment(html) {
      var container = self.doc.createElement("div");
      return container.innerHTML = html, self.selection.setAtEnd(container), container.innerHTML;
    }
    /**
     * @param {string} val
     * @return {?}
     */
    function encodeUriSegment(val) {
      return val.replace(/</gi, "&lt;").replace(/>/gi, "&gt;").replace(/"/gi, "&quot;").replace(/'/gi, "&apos;");
    }
    /**
     * @param {string} value
     * @param {boolean} shallow
     * @param {?} var_args
     * @return {?}
     */
    function create(value, shallow, var_args) {
      if (!self.selection.isCollapsed()) {
        self.selection.remove();
      }
      var content;
      if (content = shallow ? value : self.clean.html(value), content = content.replace(/\r|\n/g, " "), value.indexOf('class="fr-marker"') < 0 && (content = fragment(content)), self.core.isEmpty()) {
        self.$el.html(content);
      } else {
        var parent = self.markers.insert();
        if (parent) {
          var obj;
          if ((compile(content) || var_args) && (obj = self.node.deepestParent(parent))) {
            parent = self.markers.split();
            if (!parent) {
              return false;
            }
            $(parent).replaceWith(content);
          } else {
            $(parent).replaceWith(content);
          }
        } else {
          self.$el.append(content);
        }
      }
      add();
      self.events.trigger("html.inserted");
    }
    /**
     * @param {?} index
     * @return {undefined}
     */
    function get(index) {
      /** @type {null} */
      var c = null;
      if ("undefined" == typeof index) {
        c = self.selection.element();
      }
      var codeSegments;
      var f;
      do {
        /** @type {boolean} */
        f = false;
        codeSegments = self.$el.get(0).querySelectorAll("*:not(.fr-marker)");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var node = codeSegments[i];
          if (c != node) {
            var value = node.textContent;
            if (0 === node.children.length) {
              if (1 === value.length) {
                if (8203 == value.charCodeAt(0)) {
                  $(node).remove();
                  /** @type {boolean} */
                  f = true;
                }
              }
            }
          }
        }
      } while (f);
    }
    /**
     * @return {undefined}
     */
    function addListeners() {
      /**
       * @return {undefined}
       */
      var open = function() {
        get();
        if (self.placeholder) {
          self.placeholder.refresh();
        }
      };
      self.events.on("mouseup", open);
      self.events.on("keydown", open);
      self.events.on("contentChanged", init);
    }
    return{
      /** @type {function (): ?} */
      defaultTag : getFixBodyTag,
      /** @type {function (): ?} */
      emptyBlocks : update,
      /** @type {function (): ?} */
      emptyBlockTagsQuery : updateElement,
      /** @type {function (): ?} */
      blockTagsQuery : fn,
      /** @type {function (): undefined} */
      fillEmptyBlocks : install,
      /** @type {function (boolean): undefined} */
      cleanEmptyTags : process,
      /** @type {function (?): undefined} */
      cleanWhiteTags : get,
      /** @type {function (Node): ?} */
      doNormalize : load,
      /** @type {function (Element): ?} */
      cleanBlankSpaces : walk,
      /** @type {function (): ?} */
      blocks : find,
      /** @type {function (?): ?} */
      getDoctype : isEqual,
      /** @type {function (string): undefined} */
      set : render,
      /** @type {function (number, boolean): ?} */
      get : set,
      /** @type {function (): ?} */
      getSelected : initialize,
      /** @type {function (string, boolean, ?): ?} */
      insert : create,
      /** @type {function (boolean, boolean, boolean, boolean): ?} */
      wrap : start,
      /** @type {function (): undefined} */
      unwrap : postLink,
      /** @type {function (string): ?} */
      escapeEntities : encodeUriSegment,
      /** @type {function (): undefined} */
      checkIfEmpty : init,
      /** @type {function (string, string): ?} */
      extractNode : loop,
      /** @type {function (string, string): ?} */
      extractNodeAttrs : callback,
      /** @type {function (string): ?} */
      extractDoctype : save,
      /** @type {function (): undefined} */
      _init : addListeners
    };
  };
  $.extend($.FE.DEFAULTS, {
    height : null,
    heightMax : null,
    heightMin : null,
    width : null
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.size = function(self) {
    /**
     * @return {undefined}
     */
    function initialize() {
      render();
      if (self.opts.height) {
        self.$el.css("minHeight", self.opts.height - self.helpers.getPX(self.$el.css("padding-top")) - self.helpers.getPX(self.$el.css("padding-bottom")));
      }
      self.$iframe.height(self.$el.outerHeight(true));
    }
    /**
     * @return {undefined}
     */
    function render() {
      if (self.opts.heightMin) {
        self.$el.css("minHeight", self.opts.heightMin);
      } else {
        self.$el.css("minHeight", "");
      }
      if (self.opts.heightMax) {
        self.$wp.css("maxHeight", self.opts.heightMax);
        self.$wp.css("overflow", "auto");
      } else {
        self.$wp.css("maxHeight", "");
        self.$wp.css("overflow", "");
      }
      if (self.opts.height) {
        self.$wp.height(self.opts.height);
        self.$el.css("minHeight", self.opts.height - self.helpers.getPX(self.$el.css("padding-top")) - self.helpers.getPX(self.$el.css("padding-bottom")));
        self.$wp.css("overflow", "auto");
      } else {
        self.$wp.css("height", "");
        if (!self.opts.heightMin) {
          self.$el.css("minHeight", "");
        }
        if (!self.opts.heightMax) {
          self.$wp.css("overflow", "");
        }
      }
      if (self.opts.width) {
        self.$box.width(self.opts.width);
      }
    }
    /**
     * @return {?}
     */
    function init() {
      return self.$wp ? (render(), void(self.$iframe && (self.events.on("keyup", initialize), self.events.on("commands.after", initialize), self.events.on("html.set", initialize), self.events.on("init", initialize), self.events.on("initialized", initialize)))) : false;
    }
    return{
      /** @type {function (): ?} */
      _init : init,
      /** @type {function (): undefined} */
      syncIframe : initialize,
      /** @type {function (): undefined} */
      refresh : render
    };
  };
  $.extend($.FE.DEFAULTS, {
    language : null
  });
  $.FE.LANGUAGE = {};
  /**
   * @param {Object} data
   * @return {?}
   */
  $.FE.MODULES.language = function(data) {
    /**
     * @param {string} name
     * @return {?}
     */
    function attr(name) {
      return params && params.translation[name] ? params.translation[name] : name;
    }
    /**
     * @return {undefined}
     */
    function initContacts() {
      if ($.FE.LANGUAGE) {
        params = $.FE.LANGUAGE[data.opts.language];
      }
      if (params) {
        if (params.direction) {
          data.opts.direction = params.direction;
        }
      }
    }
    var params;
    return{
      /** @type {function (): undefined} */
      _init : initContacts,
      /** @type {function (string): ?} */
      translate : attr
    };
  };
  $.extend($.FE.DEFAULTS, {
    placeholderText : "Type something"
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.placeholder = function(self) {
    /**
     * @return {undefined}
     */
    function update() {
      if (!self.$placeholder) {
        transition();
      }
      /** @type {number} */
      var rh = 0;
      /** @type {number} */
      var one_vh = 0;
      /** @type {number} */
      var newDuration = 0;
      /** @type {number} */
      var minVal = 0;
      var all = self.node.contents(self.$el.get(0));
      if (all.length && all[0].nodeType == Node.ELEMENT_NODE) {
        var $this = $(all[0]);
        if (!self.opts.toolbarInline) {
          rh = self.helpers.getPX($this.css("margin-top"));
          newDuration = self.helpers.getPX($this.css("padding-top"));
          one_vh = self.helpers.getPX($this.css("margin-left"));
          minVal = self.helpers.getPX($this.css("padding-left"));
        }
        self.$placeholder.css("font-size", $this.css("font-size"));
        self.$placeholder.css("line-height", $this.css("line-height"));
      } else {
        self.$placeholder.css("font-size", self.$el.css("font-size"));
        self.$placeholder.css("line-height", self.$el.css("line-height"));
      }
      self.$wp.addClass("show-placeholder");
      self.$placeholder.css({
        marginTop : Math.max(self.helpers.getPX(self.$el.css("margin-top")), rh),
        paddingTop : Math.max(self.helpers.getPX(self.$el.css("padding-top")), newDuration),
        paddingLeft : Math.max(self.helpers.getPX(self.$el.css("padding-left")), minVal),
        marginLeft : Math.max(self.helpers.getPX(self.$el.css("margin-left")), one_vh)
      }).text(self.language.translate(self.opts.placeholderText || (self.$oel.attr("placeholder") || "")));
      self.$placeholder.html(self.$placeholder.text().replace(/\n/g, "<br>"));
    }
    /**
     * @return {undefined}
     */
    function hide() {
      self.$wp.removeClass("show-placeholder");
    }
    /**
     * @return {?}
     */
    function addClass() {
      return self.$wp ? self.$wp.hasClass("show-placeholder") : true;
    }
    /**
     * @return {?}
     */
    function refresh() {
      return self.$wp ? void(self.core.isEmpty() ? update() : hide()) : false;
    }
    /**
     * @return {undefined}
     */
    function transition() {
      self.$placeholder = $('<span class="fr-placeholder"></span>');
      self.$wp.append(self.$placeholder);
    }
    /**
     * @return {?}
     */
    function execute() {
      return self.$wp ? void self.events.on("init input keydown keyup contentChanged initialized", refresh) : false;
    }
    return{
      /** @type {function (): ?} */
      _init : execute,
      /** @type {function (): undefined} */
      show : update,
      /** @type {function (): undefined} */
      hide : hide,
      /** @type {function (): ?} */
      refresh : refresh,
      /** @type {function (): ?} */
      isVisible : addClass
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.edit = function(self) {
    /**
     * @return {undefined}
     */
    function init() {
      if (self.browser.mozilla) {
        try {
          self.doc.execCommand("enableObjectResizing", false, "false");
          self.doc.execCommand("enableInlineTableEditing", false, "false");
        } catch (b) {
        }
      }
      if (self.browser.msie) {
        try {
          self.doc.body.addEventListener("mscontrolselect", function(types) {
            return types.preventDefault(), false;
          });
        } catch (b) {
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onClick() {
      if (self.$wp) {
        self.$el.attr("contenteditable", true);
        self.$el.removeClass("fr-disabled");
        if (self.$tb) {
          self.$tb.removeClass("fr-disabled");
        }
        init();
      } else {
        if (self.$el.is("a")) {
          self.$el.attr("contenteditable", true);
        }
      }
      /** @type {boolean} */
      event = false;
    }
    /**
     * @return {undefined}
     */
    function handler() {
      if (self.$wp) {
        self.$el.attr("contenteditable", false);
        self.$el.addClass("fr-disabled");
        if (self.$tb) {
          self.$tb.addClass("fr-disabled");
        }
      } else {
        if (self.$el.is("a")) {
          self.$el.attr("contenteditable", false);
        }
      }
      /** @type {boolean} */
      event = true;
    }
    /**
     * @return {?}
     */
    function filter() {
      return event;
    }
    /** @type {boolean} */
    var event = false;
    return{
      /** @type {function (): undefined} */
      on : onClick,
      /** @type {function (): undefined} */
      off : handler,
      /** @type {function (): undefined} */
      disableDesign : init,
      /** @type {function (): ?} */
      isDisabled : filter
    };
  };
  $.extend($.FE.DEFAULTS, {
    editorClass : null,
    typingTimer : 500,
    iframe : false,
    requestWithCORS : true,
    requestHeaders : {},
    useClasses : true,
    spellcheck : true,
    iframeStyle : 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000000;position:relative;z-index: 2;-webkit-user-select:auto;margin:0px;overflow:hidden;min-height:20px;}body:after{content:"";display:block;clear:both;}',
    iframeStyleFiles : [],
    direction : "auto",
    zIndex : 1,
    disableRightClick : false,
    scrollableContainer : "body",
    keepFormatOnDelete : false,
    theme : null
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.core = function(self) {
    /**
     * @param {string} removeResizeFix
     * @return {undefined}
     */
    function destroy(removeResizeFix) {
      if (self.opts.iframe) {
        self.$head.find("style[data-fr-style], link[data-fr-style]").remove();
        self.$head.append('<style data-fr-style="true">' + removeResizeFix + "</style>");
        /** @type {number} */
        var conditionIndex = 0;
        for (;conditionIndex < self.opts.iframeStyleFiles.length;conditionIndex++) {
          self.$head.append('<link data-fr-style="true" rel="stylesheet" href="' + self.opts.iframeStyleFiles[conditionIndex] + '">');
        }
      }
    }
    /**
     * @return {undefined}
     */
    function callback() {
      if (!self.opts.iframe) {
        self.$el.addClass("fr-element fr-view");
      }
    }
    /**
     * @return {undefined}
     */
    function draw() {
      if (self.$box.addClass("fr-box" + (self.opts.editorClass ? " " + self.opts.editorClass : "")), self.$wp.addClass("fr-wrapper"), callback(), self.opts.iframe) {
        self.$iframe.addClass("fr-iframe");
        self.$el.addClass("fr-view");
        /** @type {number} */
        var i = 0;
        for (;i < self.o_doc.styleSheets.length;i++) {
          var rules;
          try {
            rules = self.o_doc.styleSheets[i].cssRules;
          } catch (e) {
          }
          if (rules) {
            /** @type {number} */
            var x = 0;
            var len = rules.length;
            for (;len > x;x++) {
              if (!!rules[x].selectorText) {
                if (!(0 !== rules[x].selectorText.indexOf(".fr-view") && 0 !== rules[x].selectorText.indexOf(".fr-element"))) {
                  if (rules[x].style.cssText.length > 0) {
                    if (0 === rules[x].selectorText.indexOf(".fr-view")) {
                      self.opts.iframeStyle += rules[x].selectorText.replace(/\.fr-view/g, "body") + "{" + rules[x].style.cssText + "}";
                    } else {
                      self.opts.iframeStyle += rules[x].selectorText.replace(/\.fr-element/g, "body") + "{" + rules[x].style.cssText + "}";
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ("auto" != self.opts.direction) {
        self.$box.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      self.$el.attr("dir", self.opts.direction);
      self.$wp.attr("dir", self.opts.direction);
      if (self.opts.zIndex > 1) {
        self.$box.css("z-index", self.opts.zIndex);
      }
      if (self.opts.theme) {
        self.$box.addClass(self.opts.theme + "-theme");
      }
    }
    /**
     * @return {?}
     */
    function isEmpty() {
      return self.node.isEmpty(self.$el.get(0));
    }
    /**
     * @return {undefined}
     */
    function fn() {
      self.drag_support = {
        filereader : "undefined" != typeof FileReader,
        formdata : !!self.win.FormData,
        progress : "upload" in new XMLHttpRequest
      };
    }
    /**
     * @param {?} url
     * @param {?} method
     * @return {?}
     */
    function send(url, method) {
      /** @type {XMLHttpRequest} */
      var xhr = new XMLHttpRequest;
      xhr.open(method, url, true);
      if (self.opts.requestWithCORS) {
        /** @type {boolean} */
        xhr.withCredentials = true;
      }
      var header;
      for (header in self.opts.requestHeaders) {
        if (self.opts.requestHeaders.hasOwnProperty(header)) {
          xhr.setRequestHeader(header, self.opts.requestHeaders[header]);
        }
      }
      return xhr;
    }
    /**
     * @param {?} value
     * @return {undefined}
     */
    function render(value) {
      if ("TEXTAREA" == self.$oel.get(0).tagName) {
        self.$oel.val(value);
      }
      if (self.$wp) {
        if ("TEXTAREA" == self.$oel.get(0).tagName) {
          self.$el.html("");
          self.$wp.html("");
          self.$box.replaceWith(self.$oel);
          self.$oel.show();
        } else {
          self.$wp.replaceWith(value);
          self.$el.html("");
          self.$box.removeClass("fr-view fr-ltr fr-box " + (self.opts.editorClass || ""));
          if (self.opts.theme) {
            self.$box.addClass(self.opts.theme + "-theme");
          }
        }
      }
      /** @type {null} */
      this.$wp = null;
      /** @type {null} */
      this.$el = null;
      /** @type {null} */
      this.$box = null;
    }
    /**
     * @return {?}
     */
    function handler() {
      return self.browser.mozilla && self.helpers.isMobile() ? self.selection.inEditor() : self.node.hasFocus(self.$el.get(0)) || self.$el.find("*:focus").length > 0;
    }
    /**
     * @param {MessageEvent} d
     * @return {?}
     */
    function find(d) {
      if (!d) {
        return false;
      }
      var data = d.data("instance");
      return data ? data.id == self.id : false;
    }
    /**
     * @return {undefined}
     */
    function init() {
      if ($.FE.INSTANCES.push(self), fn(), self.$wp) {
        draw();
        self.html.set(self._original_html);
        self.$el.attr("spellcheck", self.opts.spellcheck);
        if (self.helpers.isMobile()) {
          self.$el.attr("autocomplete", self.opts.spellcheck ? "on" : "off");
          self.$el.attr("autocorrect", self.opts.spellcheck ? "on" : "off");
          self.$el.attr("autocapitalize", self.opts.spellcheck ? "on" : "off");
        }
        if (self.opts.disableRightClick) {
          self.events.$on(self.$el, "contextmenu", function(e) {
            return 2 == e.button ? false : void 0;
          });
        }
        try {
          self.doc.execCommand("styleWithCSS", false, false);
        } catch (c) {
        }
      }
      self.events.on("drop", function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
      if ("TEXTAREA" == self.$oel.get(0).tagName) {
        self.events.on("contentChanged", function() {
          self.$oel.val(self.html.get());
        });
        self.events.on("form.submit", function() {
          self.$oel.val(self.html.get());
        });
        self.events.on("form.reset", function() {
          self.html.set(self._original_html);
        });
        self.$oel.val(self.html.get());
      }
      if (self.helpers.isIOS()) {
        self.events.$on(self.$doc, "selectionchange", function() {
          if (!self.$doc.get(0).hasFocus()) {
            self.$win.get(0).focus();
          }
        });
      }
      self.events.trigger("init");
    }
    return{
      /** @type {function (): undefined} */
      _init : init,
      /** @type {function (?): undefined} */
      destroy : render,
      /** @type {function (): ?} */
      isEmpty : isEmpty,
      /** @type {function (?, ?): ?} */
      getXHR : send,
      /** @type {function (string): undefined} */
      injectStyle : destroy,
      /** @type {function (): ?} */
      hasFocus : handler,
      /** @type {function (MessageEvent): ?} */
      sameInstance : find
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.format = function(self) {
    /**
     * @param {string} name
     * @param {Object} data
     * @return {?}
     */
    function func(name, data) {
      /** @type {string} */
      var propname = "<" + name;
      var dataItem;
      for (dataItem in data) {
        if (data.hasOwnProperty(dataItem)) {
          propname += " " + dataItem + '="' + data[dataItem] + '"';
        }
      }
      return propname += ">";
    }
    /**
     * @param {string} arr
     * @return {?}
     */
    function makeArray(arr) {
      return "</" + arr + ">";
    }
    /**
     * @param {string} item
     * @param {Object} attr
     * @return {?}
     */
    function fn(item, attr) {
      /** @type {string} */
      var v = item;
      var key;
      for (key in attr) {
        if (attr.hasOwnProperty(key)) {
          item += "id" == key ? "#" + attr[key] : "class" == key ? "." + attr[key] : "[" + key + '="' + attr[key] + '"]';
        }
      }
      return v;
    }
    /**
     * @param {Object} el
     * @param {?} expr
     * @return {?}
     */
    function matches(el, expr) {
      return el && el.nodeType == Node.ELEMENT_NODE ? (el.matches || (el.matchesSelector || (el.msMatchesSelector || (el.mozMatchesSelector || (el.webkitMatchesSelector || el.oMatchesSelector))))).call(el, expr) : false;
    }
    /**
     * @param {?} node
     * @param {string} name
     * @param {Object} callback
     * @return {?}
     */
    function walk(node, name, callback) {
      if (node) {
        if (self.node.isBlock(node)) {
          return walk(node.firstChild, name, callback), false;
        }
        var file = $(func(name, callback)).insertBefore(node);
        var element = node;
        for (;element && (!$(element).is(".fr-marker") && 0 == $(element).find(".fr-marker").length);) {
          var template = element;
          element = element.nextSibling;
          file.append(template);
        }
        if (element) {
          if ($(element).find(".fr-marker").length) {
            walk(element.firstChild, name, callback);
          }
        } else {
          var parent = file.get(0).parentNode;
          for (;parent && (!parent.nextSibling && !self.node.isElement(parent));) {
            parent = parent.parentNode;
          }
          if (parent) {
            var child = parent.nextSibling;
            if (child) {
              if (self.node.isBlock(child)) {
                walk(child.firstChild, name, callback);
              } else {
                walk(child, name, callback);
              }
            }
          }
        }
        if (file.is(":empty")) {
          file.remove();
        }
      }
    }
    /**
     * @param {string} elem
     * @param {Object} callback
     * @return {undefined}
     */
    function update(elem, callback) {
      if ("undefined" == typeof callback && (callback = {}), callback.style && delete callback.style, self.selection.isCollapsed()) {
        self.markers.insert();
        var $inline = self.$el.find(".fr-marker");
        $inline.replaceWith(func(elem, callback) + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + makeArray(elem));
        self.selection.restore();
      } else {
        self.selection.save();
        var vvar = self.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling;
        walk(vvar, elem, callback);
        var others;
        do {
          others = self.$el.find(fn(elem, callback) + " > " + fn(elem, callback));
          others.each(function() {
            $(this).replaceWith(this.innerHTML);
          });
        } while (others.length);
        self.$el.get(0).normalize();
        var codeSegments = self.$el.get(0).querySelectorAll(".fr-marker");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var page = $(codeSegments[i]);
          if (1 == page.data("type")) {
            if (matches(page.get(0).nextSibling, fn(elem, callback))) {
              page.next().prepend(page);
            }
          } else {
            if (matches(page.get(0).previousSibling, fn(elem, callback))) {
              page.prev().append(page);
            }
          }
        }
        self.selection.restore();
      }
    }
    /**
     * @param {Object} el
     * @param {string} sel
     * @param {Object} n
     * @param {?} obj
     * @return {?}
     */
    function find(el, sel, n, obj) {
      if (!obj) {
        /** @type {boolean} */
        var h = false;
        if (el.data("type") === true) {
          for (;self.node.isFirstSibling(el.get(0)) && !el.parent().is(self.$el);) {
            el.parent().before(el);
            /** @type {boolean} */
            h = true;
          }
        } else {
          if (el.data("type") === false) {
            for (;self.node.isLastSibling(el.get(0)) && !el.parent().is(self.$el);) {
              el.parent().after(el);
              /** @type {boolean} */
              h = true;
            }
          }
        }
        if (h) {
          return true;
        }
      }
      if (el.parents(sel).length || "undefined" == typeof sel) {
        /** @type {string} */
        var inner = "";
        /** @type {string} */
        var name = "";
        var $el = el.parent();
        if ($el.is(self.$el) || self.node.isBlock($el.get(0))) {
          return false;
        }
        for (;"undefined" == typeof sel && !self.node.isBlock($el.parent().get(0)) || "undefined" != typeof sel && !matches($el.get(0), fn(sel, n));) {
          inner += self.node.closeTagString($el.get(0));
          name = self.node.openTagString($el.get(0)) + name;
          $el = $el.parent();
        }
        var s = el.get(0).outerHTML;
        el.replaceWith('<span id="mark"></span>');
        var m = $el.html().replace(/<span id="mark"><\/span>/, inner + self.node.closeTagString($el.get(0)) + name + s + inner + self.node.openTagString($el.get(0)) + name);
        return $el.replaceWith(self.node.openTagString($el.get(0)) + m + self.node.closeTagString($el.get(0))), true;
      }
      return false;
    }
    /**
     * @param {Node} last
     * @param {number} result
     * @param {string} callback
     * @param {Object} i
     * @return {?}
     */
    function process(last, result, callback, i) {
      var minArray = self.node.contents(last.get(0));
      /** @type {number} */
      var itemIndex = 0;
      for (;itemIndex < minArray.length;itemIndex++) {
        var node = minArray[itemIndex];
        if ($(node).hasClass("fr-marker")) {
          /** @type {number} */
          result = (result + 1) % 2;
        } else {
          if (result) {
            if ($(node).find(".fr-marker").length > 0) {
              result = process($(node), result, callback, i);
            } else {
              $($(node).find(callback || "*").get().reverse()).each(function() {
                if (!self.node.isBlock(this)) {
                  if (!self.node.isVoid(this)) {
                    $(this).replaceWith(this.innerHTML);
                  }
                }
              });
              if ("undefined" == typeof callback && (node.nodeType == Node.ELEMENT_NODE && (!self.node.isVoid(node) && !self.node.isBlock(node))) || matches(node, fn(callback, i))) {
                $(node).replaceWith(node.innerHTML);
              }
            }
          } else {
            if ($(node).find(".fr-marker").length > 0) {
              result = process($(node), result, callback, i);
            }
          }
        }
      }
      return result;
    }
    /**
     * @param {string} selector
     * @param {Object} callback
     * @return {undefined}
     */
    function init(selector, callback) {
      if ("undefined" == typeof callback) {
        callback = {};
      }
      if (callback.style) {
        delete callback.style;
      }
      var suiteView = self.selection.isCollapsed();
      self.selection.save();
      /** @type {boolean} */
      var f = true;
      for (;f;) {
        /** @type {boolean} */
        f = false;
        var codeSegments = self.$el.find(".fr-marker");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (find($(codeSegments[i]), selector, callback, suiteView)) {
            /** @type {boolean} */
            f = true;
            break;
          }
        }
      }
      process(self.$el, 0, selector, callback);
      if (suiteView) {
        self.$el.find(".fr-marker").before($.FE.INVISIBLE_SPACE).after($.FE.INVISIBLE_SPACE);
      }
      self.html.cleanEmptyTags();
      self.$el.get(0).normalize();
      self.selection.restore();
    }
    /**
     * @param {string} element
     * @param {Object} callback
     * @return {undefined}
     */
    function get(element, callback) {
      if (insert(element, callback)) {
        init(element, callback);
      } else {
        update(element, callback);
      }
    }
    /**
     * @param {?} elem
     * @param {string} type
     * @return {undefined}
     */
    function create(elem, type) {
      var $elem = $(elem);
      $elem.css(type, "");
      if ("" === $elem.attr("style")) {
        $elem.replaceWith($elem.html());
      }
    }
    /**
     * @param {?} elements
     * @param {string} id
     * @return {?}
     */
    function load(elements, id) {
      return 0 === $(elements).attr("style").indexOf(id + ":") || ($(elements).attr("style").indexOf(";" + id + ":") >= 0 || $(elements).attr("style").indexOf("; " + id + ":") >= 0);
    }
    /**
     * @param {string} url
     * @param {string} pos
     * @return {undefined}
     */
    function initialize(url, pos) {
      if (self.selection.isCollapsed()) {
        self.markers.insert();
        var $div = self.$el.find(".fr-marker");
        var element = $div.parent();
        if (self.node.openTagString(element.get(0)) == '<span style="' + url + ": " + element.css(url) + ';">' && self.node.isEmpty(element.get(0))) {
          element.replaceWith('<span style="' + url + ": " + pos + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
        } else {
          if (self.node.isEmpty(element.get(0)) && element.is("span")) {
            $div.replaceWith($.FE.MARKERS);
            element.css(url, pos);
          } else {
            $div.replaceWith('<span style="' + url + ": " + pos + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
          }
        }
        self.selection.restore();
      } else {
        if (self.selection.save(), null === pos) {
          var codeSegments = self.$el.find(".fr-marker");
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            $div = $(codeSegments[i]);
            if ($div.data("type") === true) {
              for (;self.node.isFirstSibling($div.get(0)) && !$div.parent().is(self.$el);) {
                $div.parent().before($div);
              }
            } else {
              for (;self.node.isLastSibling($div.get(0)) && !$div.parent().is(self.$el);) {
                $div.parent().after($div);
              }
            }
          }
        }
        var vvar = self.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling;
        var opts = {
          "class" : "fr-unprocessed"
        };
        if (pos) {
          /** @type {string} */
          opts.style = url + ": " + pos + ";";
        }
        walk(vvar, "span", opts);
        self.$el.find(".fr-marker + .fr-unprocessed").each(function() {
          $(this).prepend($(this).prev());
        });
        self.$el.find(".fr-unprocessed + .fr-marker").each(function() {
          $(this).prev().append(this);
        });
        for (;self.$el.find("span.fr-unprocessed").length > 0;) {
          var $el = self.$el.find("span.fr-unprocessed:first").removeClass("fr-unprocessed");
          if ($el.parent().get(0).normalize(), $el.parent().is("span") && 1 == $el.parent().get(0).childNodes.length) {
            $el.parent().css(url, pos);
            var clone = $el;
            $el = $el.parent();
            clone.replaceWith(clone.html());
          }
          var elems = $el.find("span");
          /** @type {number} */
          i = elems.length - 1;
          for (;i >= 0;i--) {
            create(elems[i], url);
          }
          var surfaces = $el.parentsUntil(self.$el, "span[style]").filter(function() {
            return load(this, url);
          });
          if (surfaces.length) {
            /** @type {string} */
            var name = "";
            /** @type {string} */
            var desc = "";
            /** @type {string} */
            var ret = "";
            /** @type {string} */
            var fmt = "";
            var node = $el.get(0);
            do {
              node = node.parentNode;
              name += self.node.closeTagString(node);
              desc = self.node.openTagString($(node).clone().addClass("fr-split").get(0)) + desc;
              if (surfaces.get(0) != node) {
                ret += self.node.closeTagString(node);
                fmt = self.node.openTagString($(node).clone().addClass("fr-split").get(0)) + fmt;
              }
            } while (surfaces.get(0) != node);
            /** @type {string} */
            var text = name + self.node.openTagString($(surfaces.get(0)).clone().css(url, pos || "").get(0)) + fmt + $el.css(url, "").get(0).outerHTML + ret + "</span>" + desc;
            $el.replaceWith('<span id="fr-break"></span>');
            var html = surfaces.get(0).outerHTML;
            $(surfaces.get(0)).replaceWith(html.replace(/<span id="fr-break"><\/span>/g, text));
          }
        }
        for (;self.$el.find(".fr-split:empty").length > 0;) {
          self.$el.find(".fr-split:empty").remove();
        }
        self.$el.find(".fr-split").removeClass("fr-split");
        self.$el.find('span[style=""]').removeAttr("style");
        self.$el.find('span[class=""]').removeAttr("class");
        self.html.cleanEmptyTags();
        $(self.$el.find("span").get().reverse()).each(function() {
          if (!(this.attributes && 0 != this.attributes.length)) {
            $(this).replaceWith(this.innerHTML);
          }
        });
        self.$el.get(0).normalize();
        var resultItems = self.$el.find("span[style] + span[style]");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var $field = $(resultItems[i]);
          var cl = $(resultItems[i]).prev();
          if ($field.get(0).previousSibling == cl.get(0)) {
            if (self.node.openTagString($field.get(0)) == self.node.openTagString(cl.get(0))) {
              $field.prepend(cl.html());
              cl.remove();
            }
          }
        }
        self.$el.get(0).normalize();
        self.selection.restore();
      }
    }
    /**
     * @param {string} node
     * @return {undefined}
     */
    function handler(node) {
      initialize(node, null);
    }
    /**
     * @param {string} child
     * @param {Object} callback
     * @return {?}
     */
    function insert(child, callback) {
      if ("undefined" == typeof callback) {
        callback = {};
      }
      if (callback.style) {
        delete callback.style;
      }
      var range = self.selection.ranges(0);
      var element = range.startContainer;
      if (element.nodeType == Node.ELEMENT_NODE) {
        if (element.childNodes.length > 0) {
          if (element.childNodes[range.startOffset]) {
            element = element.childNodes[range.startOffset];
          }
        }
      }
      var el = element;
      for (;el && (el.nodeType == Node.ELEMENT_NODE && !matches(el, fn(child, callback)));) {
        el = el.firstChild;
      }
      if (el && (el.nodeType == Node.ELEMENT_NODE && matches(el, fn(child, callback)))) {
        return true;
      }
      var node = element;
      if (node) {
        if (node.nodeType != Node.ELEMENT_NODE) {
          node = node.parentNode;
        }
      }
      for (;node && (node.nodeType == Node.ELEMENT_NODE && (node != self.$el.get(0) && !matches(node, fn(child, callback))));) {
        node = node.parentNode;
      }
      return node && (node.nodeType == Node.ELEMENT_NODE && (node != self.$el.get(0) && matches(node, fn(child, callback)))) ? true : false;
    }
    return{
      /** @type {function (string, Object): ?} */
      is : insert,
      /** @type {function (string, Object): undefined} */
      toggle : get,
      /** @type {function (string, Object): undefined} */
      apply : update,
      /** @type {function (string, Object): undefined} */
      remove : init,
      /** @type {function (string, string): undefined} */
      applyStyle : initialize,
      /** @type {function (string): undefined} */
      removeStyle : handler
    };
  };
  $.FE.COMMANDS = {
    bold : {
      title : "Bold",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("strong"));
      }
    },
    italic : {
      title : "Italic",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("em"));
      }
    },
    underline : {
      title : "Underline",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("u"));
      }
    },
    strikeThrough : {
      title : "Strikethrough",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("s"));
      }
    },
    subscript : {
      title : "Subscript",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("sub"));
      }
    },
    superscript : {
      title : "Superscript",
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        elem.toggleClass("fr-active", this.format.is("sup"));
      }
    },
    outdent : {
      title : "Decrease Indent"
    },
    indent : {
      title : "Increase Indent"
    },
    undo : {
      title : "Undo",
      undo : false,
      forcedRefresh : true,
      disabled : true
    },
    redo : {
      title : "Redo",
      undo : false,
      forcedRefresh : true,
      disabled : true
    },
    insertHR : {
      title : "Insert Horizontal Line"
    },
    clearFormatting : {
      title : "Clear Formatting"
    },
    selectAll : {
      title : "Select All",
      undo : false
    }
  };
  /**
   * @param {string} action
   * @param {?} opt_attributes
   * @return {undefined}
   */
  $.FE.RegisterCommand = function(action, opt_attributes) {
    $.FE.COMMANDS[action] = opt_attributes;
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.commands = function(self) {
    /**
     * @param {string} index
     * @param {Array} callback
     * @return {undefined}
     */
    function update(index, callback) {
      if (self.events.trigger("commands.before", $.merge([index], callback || [])) !== false) {
        var fn = $.FE.COMMANDS[index] && $.FE.COMMANDS[index].callback || commands[index];
        /** @type {boolean} */
        var hover = true;
        if ($.FE.COMMANDS[index]) {
          if ("undefined" != typeof $.FE.COMMANDS[index].focus) {
            hover = $.FE.COMMANDS[index].focus;
          }
        }
        if (!self.core.hasFocus()) {
          if (!!hover) {
            if (!self.popups.areVisible()) {
              self.events.focus(true);
            }
          }
        }
        if ($.FE.COMMANDS[index]) {
          if ($.FE.COMMANDS[index].undo !== false) {
            self.undo.saveStep();
          }
        }
        if (fn) {
          fn.apply(self, $.merge([index], callback || []));
        }
        self.events.trigger("commands.after", $.merge([index], callback || []));
        if ($.FE.COMMANDS[index]) {
          if ($.FE.COMMANDS[index].undo !== false) {
            self.undo.saveStep();
          }
        }
      }
    }
    /**
     * @param {string} command
     * @param {string} name
     * @return {undefined}
     */
    function exec(command, name) {
      self.format.toggle(name);
    }
    /**
     * @param {number} delta
     * @return {undefined}
     */
    function init(delta) {
      self.selection.save();
      self.html.wrap(true, true, true, true);
      self.selection.restore();
      var j = self.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < j.length;i++) {
        if ("LI" != j[i].tagName && "LI" != j[i].parentNode.tagName) {
          var $this = $(j[i]);
          /** @type {string} */
          var type = "rtl" == self.opts.direction || "rtl" == $this.css("direction") ? "margin-right" : "margin-left";
          var from = self.helpers.getPX($this.css(type));
          $this.css(type, Math.max(from + 20 * delta, 0) || "");
          $this.removeClass("fr-temp-div");
        }
      }
      self.selection.save();
      self.html.unwrap();
      self.selection.restore();
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function chain(name) {
      return function() {
        update(name);
      };
    }
    /**
     * @return {undefined}
     */
    function postLink() {
      self.events.on("keydown", function(types) {
        var offsetParent = self.selection.element();
        return offsetParent && "HR" == offsetParent.tagName ? (types.preventDefault(), false) : void 0;
      });
      self.events.on("mousedown", function(e) {
        return e.target && "HR" == e.target.tagName ? (e.preventDefault(), e.stopPropagation(), false) : void 0;
      });
      self.events.on("mouseup", function(dataAndEvents) {
        var node = self.selection.element();
        var parent = self.selection.endElement();
        if (node == parent) {
          if (node) {
            if ("HR" == node.tagName) {
              if (node.nextSibling) {
                if (self.node.isBlock(node.nextSibling)) {
                  self.selection.setAtStart(node.nextSibling);
                } else {
                  $(node).after($.FE.MARKERS);
                }
              }
              self.selection.restore();
            }
          }
        }
      });
    }
    var commands = {
      /**
       * @return {undefined}
       */
      bold : function() {
        exec("bold", "strong");
      },
      /**
       * @return {undefined}
       */
      subscript : function() {
        exec("subscript", "sub");
      },
      /**
       * @return {undefined}
       */
      superscript : function() {
        exec("superscript", "sup");
      },
      /**
       * @return {undefined}
       */
      italic : function() {
        exec("italic", "em");
      },
      /**
       * @return {undefined}
       */
      strikeThrough : function() {
        exec("strikeThrough", "s");
      },
      /**
       * @return {undefined}
       */
      underline : function() {
        exec("underline", "u");
      },
      /**
       * @return {undefined}
       */
      undo : function() {
        self.undo.run();
      },
      /**
       * @return {undefined}
       */
      redo : function() {
        self.undo.redo();
      },
      /**
       * @return {undefined}
       */
      indent : function() {
        init(1);
      },
      /**
       * @return {undefined}
       */
      outdent : function() {
        init(-1);
      },
      /**
       * @return {undefined}
       */
      show : function() {
        if (self.opts.toolbarInline) {
          self.toolbar.showInline(null, true);
        }
      },
      /**
       * @return {undefined}
       */
      insertHR : function() {
        self.selection.remove();
        /** @type {string} */
        var optsData = "";
        if (self.core.isEmpty()) {
          /** @type {string} */
          optsData = "<br>";
          if (self.html.defaultTag()) {
            /** @type {string} */
            optsData = "<" + self.html.defaultTag() + ">" + optsData + "</" + self.html.defaultTag() + ">";
          }
        }
        self.html.insert('<hr id="fr-just">' + optsData);
        var newNode = self.$el.find("hr#fr-just");
        newNode.removeAttr("id");
        if (!self.selection.setAfter(newNode.get(0))) {
          self.selection.setBefore(newNode.get(0));
        }
        self.selection.restore();
      },
      /**
       * @return {undefined}
       */
      clearFormatting : function() {
        self.format.remove();
      },
      /**
       * @return {undefined}
       */
      selectAll : function() {
        self.doc.execCommand("selectAll", false, false);
      }
    };
    var proto = {};
    var name;
    for (name in commands) {
      if (commands.hasOwnProperty(name)) {
        proto[name] = chain(name);
      }
    }
    return $.extend(proto, {
      /** @type {function (string, Array): undefined} */
      exec : update,
      /** @type {function (): undefined} */
      _init : postLink
    });
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.cursorLists = function(self) {
    /**
     * @param {(Node|string)} el
     * @return {?}
     */
    function fn(el) {
      /** @type {(Node|string)} */
      var element = el;
      for (;"LI" != element.tagName;) {
        element = element.parentNode;
      }
      return element;
    }
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    function walk(dataAndEvents) {
      var target = dataAndEvents;
      for (;!self.node.isList(target);) {
        target = target.parentNode;
      }
      return target;
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function update(el) {
      var element;
      var node = fn(el);
      var nn = node.nextSibling;
      var sib = node.previousSibling;
      var withHours = self.html.defaultTag();
      if (self.node.isEmpty(node, true) && nn) {
        /** @type {string} */
        var s = "";
        /** @type {string} */
        var optsData = "";
        var parent = el.parentNode;
        for (;!self.node.isList(parent) && (parent.parentNode && "LI" !== parent.parentNode.tagName);) {
          s = self.node.openTagString(parent) + s;
          optsData += self.node.closeTagString(parent);
          parent = parent.parentNode;
        }
        s = self.node.openTagString(parent) + s;
        optsData += self.node.closeTagString(parent);
        /** @type {string} */
        var n = "";
        /** @type {string} */
        n = parent.parentNode && "LI" == parent.parentNode.tagName ? optsData + "<li>" + $.FE.MARKERS + "<br>" + s : withHours ? optsData + "<" + withHours + ">" + $.FE.MARKERS + "<br></" + withHours + ">" + s : optsData + $.FE.MARKERS + "<br>" + s;
        $(node).html('<span id="fr-break"></span>');
        for (;["UL", "OL"].indexOf(parent.tagName) < 0 || parent.parentNode && "LI" === parent.parentNode.tagName;) {
          parent = parent.parentNode;
        }
        var source = self.node.openTagString(parent) + $(parent).html() + self.node.closeTagString(parent);
        source = source.replace(/<span id="fr-break"><\/span>/g, n);
        $(parent).replaceWith(source);
        self.$el.find("li:empty").remove();
      } else {
        if (sib && nn || !self.node.isEmpty(node, true)) {
          $(node).before("<li><br></li>");
          $(el).remove();
        } else {
          if (sib) {
            element = walk(node);
            if (element.parentNode && "LI" == element.parentNode.tagName) {
              $(element.parentNode).after("<li>" + $.FE.MARKERS + "<br></li>");
            } else {
              if (withHours) {
                $(element).after("<" + withHours + ">" + $.FE.MARKERS + "<br></" + withHours + ">");
              } else {
                $(element).after($.FE.MARKERS + "<br>");
              }
            }
            $(node).remove();
          } else {
            element = walk(node);
            if (element.parentNode && "LI" == element.parentNode.tagName) {
              $(element.parentNode).before("<li>" + $.FE.MARKERS + "<br></li>");
            } else {
              if (withHours) {
                $(element).before("<" + withHours + ">" + $.FE.MARKERS + "<br></" + withHours + ">");
              } else {
                $(element).before($.FE.MARKERS + "<br>");
              }
            }
            $(node).remove();
          }
        }
      }
    }
    /**
     * @param {string} element
     * @return {undefined}
     */
    function handleClick(element) {
      var child = fn(element);
      /** @type {string} */
      var name = "";
      /** @type {string} */
      var node = element;
      /** @type {string} */
      var suffix = "";
      /** @type {string} */
      var prefix = "";
      for (;node != child;) {
        node = node.parentNode;
        /** @type {string} */
        var n = "A" == node.tagName && self.cursor.isAtEnd(element, node) ? "fr-to-remove" : "";
        suffix = self.node.openTagString($(node).clone().addClass(n).get(0)) + suffix;
        prefix = self.node.closeTagString(node) + prefix;
      }
      /** @type {string} */
      name = prefix + name + suffix + $.FE.MARKERS;
      $(element).replaceWith('<span id="fr-break"></span>');
      var elem = self.node.openTagString(child) + $(child).html() + self.node.closeTagString(child);
      elem = elem.replace(/<span id="fr-break"><\/span>/g, name);
      $(child).replaceWith(elem);
    }
    /**
     * @param {string} el
     * @return {undefined}
     */
    function init(el) {
      var parent = fn(el);
      var ret = $.FE.MARKERS;
      /** @type {string} */
      var label = "";
      /** @type {string} */
      var node = el;
      /** @type {boolean} */
      var i = false;
      for (;node != parent;) {
        node = node.parentNode;
        /** @type {string} */
        var n = "A" == node.tagName && self.cursor.isAtEnd(el, node) ? "fr-to-remove" : "";
        if (!i) {
          if (!(node == parent)) {
            if (!self.node.isBlock(node)) {
              /** @type {boolean} */
              i = true;
              label += $.FE.INVISIBLE_SPACE;
            }
          }
        }
        label = self.node.openTagString($(node).clone().addClass(n).get(0)) + label;
        ret += self.node.closeTagString(node);
      }
      var msg = label + ret;
      $(el).remove();
      $(parent).after(msg);
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function load(el) {
      var node = fn(el);
      var container = node.previousSibling;
      if (container) {
        container = $(container).find(self.html.blockTagsQuery()).get(-1) || container;
        $(el).replaceWith($.FE.MARKERS);
        var elements = self.node.contents(container);
        if (elements.length) {
          if ("BR" == elements[elements.length - 1].tagName) {
            $(elements[elements.length - 1]).remove();
          }
        }
        $(node).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
          if (this.parentNode == node) {
            $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
          }
        });
        var first;
        var fragment = self.node.contents(node)[0];
        for (;fragment && !self.node.isList(fragment);) {
          first = fragment.nextSibling;
          $(container).append(fragment);
          fragment = first;
        }
        container = node.previousSibling;
        for (;fragment;) {
          first = fragment.nextSibling;
          $(container).append(fragment);
          fragment = first;
        }
        $(node).remove();
      } else {
        var element = walk(node);
        if ($(el).replaceWith($.FE.MARKERS), element.parentNode && "LI" == element.parentNode.tagName) {
          var sibling = element.previousSibling;
          if (self.node.isBlock(sibling)) {
            $(node).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
              if (this.parentNode == node) {
                $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
              }
            });
            $(sibling).append($(node).html());
          } else {
            $(element).before($(node).html());
          }
        } else {
          var m = self.html.defaultTag();
          if (m && 0 === $(node).find(self.html.blockTagsQuery()).length) {
            $(element).before("<" + m + ">" + $(node).html() + "</" + m + ">");
          } else {
            $(element).before($(node).html());
          }
        }
        $(node).remove();
        if (0 === $(element).find("li").length) {
          $(element).remove();
        }
      }
    }
    /**
     * @param {Node} element
     * @return {?}
     */
    function create(element) {
      var children;
      var el = fn(element);
      var val = el.nextSibling;
      if (val) {
        children = self.node.contents(val);
        if (children.length) {
          if ("BR" == children[0].tagName) {
            $(children[0]).remove();
          }
        }
        $(val).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
          if (this.parentNode == val) {
            $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
          }
        });
        var first;
        /** @type {Node} */
        var template = element;
        var fragment = self.node.contents(val)[0];
        for (;fragment && !self.node.isList(fragment);) {
          first = fragment.nextSibling;
          $(template).after(fragment);
          template = fragment;
          fragment = first;
        }
        for (;fragment;) {
          first = fragment.nextSibling;
          $(el).append(fragment);
          fragment = first;
        }
        $(element).replaceWith($.FE.MARKERS);
        $(val).remove();
      } else {
        var node = el;
        for (;!node.nextSibling && node != self.$el.get(0);) {
          node = node.parentNode;
        }
        if (node == self.$el.get(0)) {
          return false;
        }
        if (node = node.nextSibling, self.node.isBlock(node)) {
          if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0) {
            $(element).replaceWith($.FE.MARKERS);
            children = self.node.contents(el);
            if (children.length) {
              if ("BR" == children[children.length - 1].tagName) {
                $(children[children.length - 1]).remove();
              }
            }
            $(el).append($(node).html());
            $(node).remove();
          }
        } else {
          children = self.node.contents(el);
          if (children.length) {
            if ("BR" == children[children.length - 1].tagName) {
              $(children[children.length - 1]).remove();
            }
          }
          $(element).replaceWith($.FE.MARKERS);
          for (;node && (!self.node.isBlock(node) && "BR" != node.tagName);) {
            $(el).append($(node));
            node = node.nextSibling;
          }
        }
      }
    }
    return{
      /** @type {function (Node): undefined} */
      _startEnter : update,
      /** @type {function (string): undefined} */
      _middleEnter : handleClick,
      /** @type {function (string): undefined} */
      _endEnter : init,
      /** @type {function (Node): undefined} */
      _backspace : load,
      /** @type {function (Node): ?} */
      _del : create
    };
  };
  /** @type {Array} */
  $.FE.NO_DELETE_TAGS = ["TH", "TD", "TABLE", "FORM"];
  /** @type {Array} */
  $.FE.SIMPLE_ENTER_TAGS = ["TH", "TD", "LI", "DL", "DT", "FORM"];
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.cursor = function(self) {
    /**
     * @param {Element} element
     * @return {?}
     */
    function find(element) {
      return element ? self.node.isBlock(element) ? true : element.nextSibling ? false : find(element.parentNode) : false;
    }
    /**
     * @param {Element} node
     * @return {?}
     */
    function param(node) {
      return node ? self.node.isBlock(node) ? true : node.previousSibling ? false : param(node.parentNode) : false;
    }
    /**
     * @param {Element} target
     * @param {?} element
     * @return {?}
     */
    function insert(target, element) {
      return target ? target == self.$wp.get(0) ? false : target.previousSibling ? false : target.parentNode == element ? true : insert(target.parentNode, element) : false;
    }
    /**
     * @param {Element} e
     * @param {?} node
     * @return {?}
     */
    function fn(e, node) {
      return e ? e == self.$wp.get(0) ? false : e.nextSibling ? false : e.parentNode == node ? true : fn(e.parentNode, node) : false;
    }
    /**
     * @param {?} allow
     * @return {?}
     */
    function animate(allow) {
      return $(allow).parentsUntil(self.$el, "LI").length > 0 && 0 === $(allow).parentsUntil("LI", "TABLE").length;
    }
    /**
     * @param {boolean} elem
     * @return {undefined}
     */
    function create(elem) {
      /** @type {boolean} */
      var deepestParent = $(elem).parentsUntil(self.$el, "BLOCKQUOTE").length > 0;
      var item = self.node.deepestParent(elem, [], !deepestParent);
      if (item && "BLOCKQUOTE" == item.tagName) {
        var parent = self.node.deepestParent(elem, [$(elem).parentsUntil(self.$el, "BLOCKQUOTE").get(0)]);
        if (parent) {
          if (parent.previousSibling) {
            item = parent;
          }
        }
      }
      if (null !== item) {
        var children;
        var node = item.previousSibling;
        if (self.node.isBlock(item) && (self.node.isEditable(item) && (node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0))) {
          if (self.node.isDeletable(node)) {
            $(node).remove();
            $(elem).replaceWith($.FE.MARKERS);
          } else {
            if (self.node.isEditable(node)) {
              if (self.node.isBlock(node)) {
                if (self.node.isEmpty(node) && !self.node.isList(node)) {
                  $(node).remove();
                } else {
                  if (self.node.isList(node) && (node = $(node).find("li:last").get(0)), children = self.node.contents(node), children.length && ("BR" == children[children.length - 1].tagName && $(children[children.length - 1]).remove()), "BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != item.tagName) {
                    children = self.node.contents(node);
                    for (;children.length && self.node.isBlock(children[children.length - 1]);) {
                      node = children[children.length - 1];
                      children = self.node.contents(node);
                    }
                  } else {
                    if ("BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == item.tagName) {
                      children = self.node.contents(item);
                      for (;children.length && self.node.isBlock(children[0]);) {
                        item = children[0];
                        children = self.node.contents(item);
                      }
                    }
                  }
                  $(elem).replaceWith($.FE.MARKERS);
                  $(node).append(self.node.isEmpty(item) ? $.FE.MARKERS : item.innerHTML);
                  $(item).remove();
                }
              } else {
                $(elem).replaceWith($.FE.MARKERS);
                if ("BLOCKQUOTE" == item.tagName && node.nodeType == Node.ELEMENT_NODE) {
                  $(node).remove();
                } else {
                  $(node).after(self.node.isEmpty(item) ? "" : $(item).html());
                  $(item).remove();
                  if ("BR" == node.tagName) {
                    $(node).remove();
                  }
                }
              }
            }
          }
        }
      }
    }
    /**
     * @param {Node} element
     * @return {?}
     */
    function parse(element) {
      /** @type {Node} */
      var node = element;
      for (;!node.previousSibling;) {
        if (node = node.parentNode, self.node.isElement(node)) {
          return false;
        }
      }
      node = node.previousSibling;
      var nodes;
      if (!self.node.isBlock(node) && self.node.isEditable(node)) {
        nodes = self.node.contents(node);
        for (;node.nodeType != Node.TEXT_NODE && (!self.node.isDeletable(node) && (nodes.length && self.node.isEditable(node)));) {
          node = nodes[nodes.length - 1];
          nodes = self.node.contents(node);
        }
        if (node.nodeType == Node.TEXT_NODE) {
          if (self.helpers.isIOS()) {
            return true;
          }
          var template = node.textContent;
          /** @type {number} */
          var replace = template.length - 1;
          if (self.opts.tabSpaces && template.length >= self.opts.tabSpaces) {
            var lastLine = template.substr(template.length - self.opts.tabSpaces, template.length - 1);
            if (0 == lastLine.replace(/ /g, "").replace(new RegExp($.FE.UNICODE_NBSP, "g"), "").length) {
              /** @type {number} */
              replace = template.length - self.opts.tabSpaces;
            }
          }
          node.textContent = template.substring(0, replace);
          if (node.textContent.length) {
            if (55357 == node.textContent.charCodeAt(node.textContent.length - 1)) {
              node.textContent = node.textContent.substr(0, node.textContent.length - 1);
            }
          }
          if (0 == node.textContent.length) {
            if (2 != node.parentNode.childNodes.length || (node.parentNode != element.parentNode || (self.node.isBlock(node.parentNode) || self.node.isElement(node.parentNode)))) {
              $(node).after($.FE.MARKERS);
              if (self.node.isElement(node.parentNode)) {
                if (!element.nextSibling) {
                  if (node.previousSibling) {
                    if ("BR" == node.previousSibling.tagName) {
                      $(element).after("<br>");
                    }
                  }
                }
              }
              node.parentNode.removeChild(node);
            } else {
              $(node.parentNode).after($.FE.MARKERS);
              $(node.parentNode).remove();
            }
          } else {
            $(node).after($.FE.MARKERS);
          }
        } else {
          if (self.node.isDeletable(node)) {
            $(node).after($.FE.MARKERS);
            $(node).remove();
          } else {
            if (self.events.trigger("node.remove", [$(node)]) !== false) {
              $(node).after($.FE.MARKERS);
              $(node).remove();
            }
          }
        }
      } else {
        if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && self.node.isEditable(node)) {
          if (self.node.isEmpty(node) && !self.node.isList(node)) {
            $(node).remove();
            $(element).replaceWith($.FE.MARKERS);
          } else {
            if (self.node.isList(node)) {
              node = $(node).find("li:last").get(0);
            }
            nodes = self.node.contents(node);
            if (nodes) {
              if ("BR" == nodes[nodes.length - 1].tagName) {
                $(nodes[nodes.length - 1]).remove();
              }
            }
            nodes = self.node.contents(node);
            for (;nodes && self.node.isBlock(nodes[nodes.length - 1]);) {
              node = nodes[nodes.length - 1];
              nodes = self.node.contents(node);
            }
            $(node).append($.FE.MARKERS);
            /** @type {Node} */
            var child = element;
            for (;!child.previousSibling;) {
              child = child.parentNode;
            }
            for (;child && ("BR" !== child.tagName && !self.node.isBlock(child));) {
              var lineSeparator = child;
              child = child.nextSibling;
              $(node).append(lineSeparator);
            }
            if (child) {
              if ("BR" == child.tagName) {
                $(child).remove();
              }
            }
            $(element).remove();
          }
        } else {
          if (element.nextSibling) {
            if ("BR" == element.nextSibling.tagName) {
              $(element.nextSibling).remove();
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function get() {
      /** @type {boolean} */
      var _ref = false;
      var element = self.markers.insert();
      if (!element) {
        return true;
      }
      self.$el.get(0).normalize();
      var node = element.previousSibling;
      if (node) {
        var value = node.textContent;
        if (value) {
          if (value.length) {
            if (8203 == value.charCodeAt(value.length - 1)) {
              if (1 == value.length) {
                $(node).remove();
              } else {
                node.textContent = node.textContent.substr(0, value.length - 1);
                if (node.textContent.length) {
                  if (55357 == node.textContent.charCodeAt(node.textContent.length - 1)) {
                    node.textContent = node.textContent.substr(0, node.textContent.length - 1);
                  }
                }
              }
            }
          }
        }
      }
      return find(element) ? _ref = parse(element) : param(element) ? animate(element) && insert(element, $(element).parents("li:first").get(0)) ? self.cursorLists._backspace(element) : create(element) : _ref = parse(element), $(element).remove(), self.$el.find("blockquote:empty").remove(), self.html.fillEmptyBlocks(), self.html.cleanEmptyTags(), self.clean.quotes(), self.clean.lists(), self.spaces.normalize(), self.selection.restore(), _ref;
    }
    /**
     * @param {boolean} element
     * @return {undefined}
     */
    function update(element) {
      /** @type {boolean} */
      var deepestParent = $(element).parentsUntil(self.$el, "BLOCKQUOTE").length > 0;
      var elem = self.node.deepestParent(element, [], !deepestParent);
      if (elem && "BLOCKQUOTE" == elem.tagName) {
        var child = self.node.deepestParent(element, [$(element).parentsUntil(self.$el, "BLOCKQUOTE").get(0)]);
        if (child) {
          if (child.nextSibling) {
            elem = child;
          }
        }
      }
      if (null !== elem) {
        var nodes;
        var node = elem.nextSibling;
        if (self.node.isBlock(elem) && ((self.node.isEditable(elem) || self.node.isDeletable(elem)) && (node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0))) {
          if (self.node.isDeletable(node)) {
            $(node).remove();
            $(element).replaceWith($.FE.MARKERS);
          } else {
            if (self.node.isBlock(node) && self.node.isEditable(node)) {
              if (self.node.isList(node)) {
                if (self.node.isEmpty(elem, true)) {
                  $(elem).remove();
                  $(node).find("li:first").prepend($.FE.MARKERS);
                } else {
                  var rule = $(node).find("li:first");
                  if ("BLOCKQUOTE" == elem.tagName) {
                    nodes = self.node.contents(elem);
                    if (nodes.length) {
                      if (self.node.isBlock(nodes[nodes.length - 1])) {
                        elem = nodes[nodes.length - 1];
                      }
                    }
                  }
                  if (0 === rule.find("ul, ol").length) {
                    $(element).replaceWith($.FE.MARKERS);
                    rule.find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                      if (this.parentNode == rule.get(0)) {
                        $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
                      }
                    });
                    $(elem).append(self.node.contents(rule.get(0)));
                    rule.remove();
                    if (0 === $(node).find("li").length) {
                      $(node).remove();
                    }
                  }
                }
              } else {
                if (nodes = self.node.contents(node), nodes.length && ("BR" == nodes[0].tagName && $(nodes[0]).remove()), "BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == elem.tagName) {
                  nodes = self.node.contents(elem);
                  for (;nodes.length && self.node.isBlock(nodes[nodes.length - 1]);) {
                    elem = nodes[nodes.length - 1];
                    nodes = self.node.contents(elem);
                  }
                } else {
                  if ("BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != elem.tagName) {
                    nodes = self.node.contents(node);
                    for (;nodes.length && self.node.isBlock(nodes[0]);) {
                      node = nodes[0];
                      nodes = self.node.contents(node);
                    }
                  }
                }
                $(element).replaceWith($.FE.MARKERS);
                $(elem).append(node.innerHTML);
                $(node).remove();
              }
            } else {
              $(element).replaceWith($.FE.MARKERS);
              for (;node && ("BR" !== node.tagName && (!self.node.isBlock(node) && self.node.isEditable(node)));) {
                var current = node;
                node = node.nextSibling;
                $(elem).append(current);
              }
              if (node) {
                if ("BR" == node.tagName) {
                  if (self.node.isEditable(node)) {
                    $(node).remove();
                  }
                }
              }
            }
          }
        }
      }
    }
    /**
     * @param {Element} element
     * @return {?}
     */
    function process(element) {
      /** @type {Element} */
      var node = element;
      for (;!node.nextSibling;) {
        if (node = node.parentNode, self.node.isElement(node)) {
          return false;
        }
      }
      if (node = node.nextSibling, "BR" == node.tagName && self.node.isEditable(node)) {
        if (node.nextSibling) {
          if (self.node.isBlock(node.nextSibling) && self.node.isEditable(node.nextSibling)) {
            if (!($.FE.NO_DELETE_TAGS.indexOf(node.nextSibling.tagName) < 0)) {
              return void $(node).remove();
            }
            node = node.nextSibling;
            $(node.previousSibling).remove();
          }
        } else {
          if (find(node)) {
            if (animate(element)) {
              self.cursorLists._del(element);
            } else {
              var normalizedRange = self.node.deepestParent(node);
              if (normalizedRange) {
                $(node).remove();
                update(element);
              }
            }
            return;
          }
        }
      }
      var nodes;
      if (!self.node.isBlock(node) && self.node.isEditable(node)) {
        nodes = self.node.contents(node);
        for (;node.nodeType != Node.TEXT_NODE && (nodes.length && (!self.node.isDeletable(node) && self.node.isEditable(node)));) {
          node = nodes[0];
          nodes = self.node.contents(node);
        }
        if (node.nodeType == Node.TEXT_NODE) {
          $(node).before($.FE.MARKERS);
          if (node.textContent.length && 55357 == node.textContent.charCodeAt(0)) {
            node.textContent = node.textContent.substring(2, node.textContent.length);
          } else {
            node.textContent = node.textContent.substring(1, node.textContent.length);
          }
        } else {
          if (self.node.isDeletable(node)) {
            $(node).before($.FE.MARKERS);
            $(node).remove();
          } else {
            if (self.events.trigger("node.remove", [$(node)]) !== false) {
              $(node).before($.FE.MARKERS);
              $(node).remove();
            }
          }
        }
        $(element).remove();
      } else {
        if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && (self.node.isEditable(node) || self.node.isDeletable(node))) {
          if (self.node.isDeletable(node)) {
            $(element).replaceWith($.FE.MARKERS);
            $(node).remove();
          } else {
            if (self.node.isList(node)) {
              if (element.previousSibling) {
                $(node).find("li:first").prepend(element);
                self.cursorLists._backspace(element);
              } else {
                $(node).find("li:first").prepend($.FE.MARKERS);
                $(element).remove();
              }
            } else {
              if (nodes = self.node.contents(node), nodes && ("BR" == nodes[0].tagName && $(nodes[0]).remove()), nodes && "BLOCKQUOTE" == node.tagName) {
                var el = nodes[0];
                $(element).before($.FE.MARKERS);
                for (;el && "BR" != el.tagName;) {
                  var d = el;
                  el = el.nextSibling;
                  $(element).before(d);
                }
                if (el) {
                  if ("BR" == el.tagName) {
                    $(el).remove();
                  }
                }
              } else {
                $(element).after($(node).html()).after($.FE.MARKERS);
                $(node).remove();
              }
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function start() {
      var element = self.markers.insert();
      if (!element) {
        return false;
      }
      if (self.$el.get(0).normalize(), find(element)) {
        if (animate(element)) {
          if (0 === $(element).parents("li:first").find("ul, ol").length) {
            self.cursorLists._del(element);
          } else {
            var container = $(element).parents("li:first").find("ul:first, ol:first").find("li:first");
            container = container.find(self.html.blockTagsQuery()).get(-1) || container;
            container.prepend(element);
            self.cursorLists._backspace(element);
          }
        } else {
          update(element);
        }
      } else {
        process(param(element) ? element : element);
      }
      $(element).remove();
      self.$el.find("blockquote:empty").remove();
      self.html.fillEmptyBlocks();
      self.html.cleanEmptyTags();
      self.clean.quotes();
      self.clean.lists();
      self.spaces.normalize();
      self.selection.restore();
    }
    /**
     * @return {undefined}
     */
    function load() {
      self.$el.find(".fr-to-remove").each(function() {
        var codeSegments = self.node.contents(this);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].nodeType == Node.TEXT_NODE) {
            codeSegments[i].textContent = codeSegments[i].textContent.replace(/\u200B/g, "");
          }
        }
        $(this).replaceWith(this.innerHTML);
      });
    }
    /**
     * @param {Element} el
     * @param {boolean} results
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function callback(el, results, deepDataAndEvents) {
      var letter;
      var node = self.node.deepestParent(el, [], !deepDataAndEvents);
      if (node && "BLOCKQUOTE" == node.tagName) {
        return fn(el, node) ? (letter = self.html.defaultTag(), letter ? $(node).after("<" + letter + ">" + $.FE.MARKERS + "<br></" + letter + ">") : $(node).after($.FE.MARKERS + "<br>"), $(el).remove(), false) : (done(el, results, deepDataAndEvents), false);
      }
      if (null == node) {
        letter = self.html.defaultTag();
        if (letter && self.node.isElement(el.parentNode)) {
          $(el).replaceWith("<" + letter + ">" + $.FE.MARKERS + "<br></" + letter + ">");
        } else {
          $(el).replaceWith("<br/>" + $.FE.MARKERS + "<br/>");
        }
      } else {
        /** @type {Element} */
        var parent = el;
        /** @type {string} */
        var options = "";
        if (!self.node.isBlock(node) || results) {
          /** @type {string} */
          options = "<br/>";
        }
        /** @type {string} */
        var pfx = "";
        /** @type {string} */
        var line = "";
        letter = self.html.defaultTag();
        /** @type {string} */
        var indent = "";
        /** @type {string} */
        var optsData = "";
        if (letter) {
          if (self.node.isBlock(node)) {
            /** @type {string} */
            indent = "<" + letter + ">";
            /** @type {string} */
            optsData = "</" + letter + ">";
            if (node.tagName == letter.toUpperCase()) {
              indent = self.node.openTagString($(node).clone().removeAttr("id").get(0));
            }
          }
        }
        do {
          if (parent = parent.parentNode, !results || (parent != node || results && !self.node.isBlock(node))) {
            if (pfx += self.node.closeTagString(parent), parent == node && self.node.isBlock(node)) {
              line = indent + line;
            } else {
              /** @type {string} */
              var n = "A" == parent.tagName && fn(el, parent) ? "fr-to-remove" : "";
              line = self.node.openTagString($(parent).clone().addClass(n).get(0)) + line;
            }
          }
        } while (parent != node);
        /** @type {string} */
        options = pfx + options + line + (el.parentNode == node && self.node.isBlock(node) ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
        if (self.node.isBlock(node)) {
          if (!$(node).find("*:last").is("br")) {
            $(node).append("<br/>");
          }
        }
        $(el).after('<span id="fr-break"></span>');
        $(el).remove();
        if (!(node.nextSibling && !self.node.isBlock(node.nextSibling))) {
          if (!self.node.isBlock(node)) {
            $(node).after("<br>");
          }
        }
        var model;
        model = !results && self.node.isBlock(node) ? self.node.openTagString(node) + $(node).html() + optsData : self.node.openTagString(node) + $(node).html() + self.node.closeTagString(node);
        model = model.replace(/<span id="fr-break"><\/span>/g, options);
        $(node).replaceWith(model);
      }
    }
    /**
     * @param {Element} el
     * @param {boolean} results
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function handler(el, results, deepDataAndEvents) {
      var quoted;
      var node = self.node.deepestParent(el, [], !deepDataAndEvents);
      if (node && "BLOCKQUOTE" == node.tagName) {
        if (insert(el, node)) {
          return quoted = self.html.defaultTag(), quoted ? $(node).before("<" + quoted + ">" + $.FE.MARKERS + "<br></" + quoted + ">") : $(node).before($.FE.MARKERS + "<br>"), $(el).remove(), false;
        }
        if (fn(el, node)) {
          callback(el, results, true);
        } else {
          done(el, results, true);
        }
      }
      if (null == node) {
        quoted = self.html.defaultTag();
        if (quoted && self.node.isElement(el.parentNode)) {
          $(el).replaceWith("<" + quoted + ">" + $.FE.MARKERS + "<br></" + quoted + ">");
        } else {
          $(el).replaceWith("<br>" + $.FE.MARKERS);
        }
      } else {
        if (self.node.isBlock(node)) {
          if (results) {
            $(el).remove();
            $(node).prepend("<br>" + $.FE.MARKERS);
          } else {
            if (self.node.isEmpty(node, true)) {
              return callback(el, results, deepDataAndEvents);
            }
            $(node).before(self.node.openTagString($(node).clone().removeAttr("id").get(0)) + "<br>" + self.node.closeTagString(node));
          }
        } else {
          $(node).before("<br>");
        }
        $(el).remove();
      }
    }
    /**
     * @param {Element} el
     * @param {boolean} arr
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    function done(el, arr, deepDataAndEvents) {
      var node = self.node.deepestParent(el, [], !deepDataAndEvents);
      if (null == node) {
        if (self.html.defaultTag() && el.parentNode === self.$el.get(0)) {
          $(el).replaceWith("<" + self.html.defaultTag() + ">" + $.FE.MARKERS + "<br></" + self.html.defaultTag() + ">");
        } else {
          if (!el.nextSibling || self.node.isBlock(el.nextSibling)) {
            $(el).after("<br>");
          }
          $(el).replaceWith("<br>" + $.FE.MARKERS);
        }
      } else {
        /** @type {Element} */
        var parent = el;
        /** @type {string} */
        var t = "";
        if ("PRE" == node.tagName) {
          /** @type {boolean} */
          arr = true;
        }
        if (!self.node.isBlock(node) || arr) {
          /** @type {string} */
          t = "<br>";
        }
        /** @type {string} */
        var prefix = "";
        /** @type {string} */
        var name = "";
        do {
          var container = parent;
          if (parent = parent.parentNode, "BLOCKQUOTE" == node.tagName && (self.node.isEmpty(container) && (!$(container).hasClass("fr-marker") && ($(container).find(el).length > 0 && $(container).after(el)))), ("BLOCKQUOTE" != node.tagName || !fn(el, parent) && !insert(el, parent)) && (!arr || (parent != node || arr && !self.node.isBlock(node)))) {
            prefix += self.node.closeTagString(parent);
            /** @type {string} */
            var focusClass = "A" == parent.tagName && fn(el, parent) ? "fr-to-remove" : "";
            name = self.node.openTagString($(parent).clone().addClass(focusClass).removeAttr("id").get(0)) + name;
          }
        } while (parent != node);
        var drop = node == el.parentNode && self.node.isBlock(node) || el.nextSibling;
        if ("BLOCKQUOTE" == node.tagName) {
          if (el.previousSibling) {
            if (self.node.isBlock(el.previousSibling)) {
              if (el.nextSibling) {
                if ("BR" == el.nextSibling.tagName) {
                  $(el.nextSibling).after(el);
                  if (el.nextSibling) {
                    if ("BR" == el.nextSibling.tagName) {
                      $(el.nextSibling).remove();
                    }
                  }
                }
              }
            }
          }
          var enabled = self.html.defaultTag();
          /** @type {string} */
          t = prefix + t + (enabled ? "<" + enabled + ">" : "") + $.FE.MARKERS + "<br>" + (enabled ? "</" + enabled + ">" : "") + name;
        } else {
          /** @type {string} */
          t = prefix + t + name + (drop ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
        }
        $(el).replaceWith('<span id="fr-break"></span>');
        var str = self.node.openTagString(node) + $(node).html() + self.node.closeTagString(node);
        str = str.replace(/<span id="fr-break"><\/span>/g, t);
        $(node).replaceWith(str);
      }
    }
    /**
     * @param {boolean} value
     * @return {?}
     */
    function sync(value) {
      var element = self.markers.insert();
      if (!element) {
        return true;
      }
      self.$el.get(0).normalize();
      /** @type {boolean} */
      var deepDataAndEvents = false;
      if ($(element).parentsUntil(self.$el, "BLOCKQUOTE").length > 0) {
        /** @type {boolean} */
        value = false;
        /** @type {boolean} */
        deepDataAndEvents = true;
      }
      if ($(element).parentsUntil(self.$el, "TD, TH").length) {
        /** @type {boolean} */
        deepDataAndEvents = false;
      }
      if (find(element)) {
        if (!animate(element) || (value || deepDataAndEvents)) {
          callback(element, value, deepDataAndEvents);
        } else {
          self.cursorLists._endEnter(element);
        }
      } else {
        if (param(element)) {
          if (!animate(element) || (value || deepDataAndEvents)) {
            handler(element, value, deepDataAndEvents);
          } else {
            self.cursorLists._startEnter(element);
          }
        } else {
          if (!animate(element) || (value || deepDataAndEvents)) {
            done(element, value, deepDataAndEvents);
          } else {
            self.cursorLists._middleEnter(element);
          }
        }
      }
      load();
      self.html.fillEmptyBlocks();
      self.html.cleanEmptyTags();
      self.clean.lists();
      self.spaces.normalize();
      self.selection.restore();
    }
    return{
      /** @type {function (boolean): ?} */
      enter : sync,
      /** @type {function (): ?} */
      backspace : get,
      /** @type {function (): ?} */
      del : start,
      /** @type {function (Element, ?): ?} */
      isAtEnd : fn
    };
  };
  /**
   * @param {string} element
   * @return {?}
   */
  $.FE.MODULES.data = function(element) {
    /**
     * @param {string} s
     * @return {?}
     */
    function trim(s) {
      return s;
    }
    /**
     * @param {(Array|number)} value
     * @return {?}
     */
    function getValue(value) {
      if (!value) {
        return value;
      }
      /** @type {string} */
      var result = "";
      var key = trim("charCodeAt");
      var require = trim("fromCharCode");
      /** @type {number} */
      var h = seen.indexOf(value[0]);
      /** @type {number} */
      var i = 1;
      for (;i < value.length - 2;i++) {
        var udataCur = format(++h);
        var c = value[key](i);
        /** @type {string} */
        var cDigit = "";
        for (;/[0-9-]/.test(value[i + 1]);) {
          cDigit += value[++i];
        }
        /** @type {number} */
        cDigit = parseInt(cDigit, 10) || 0;
        c = round(c, udataCur, cDigit);
        c ^= h - 1 & 31;
        result += String[require](c);
      }
      return result;
    }
    /**
     * @param {(number|string)} formatString
     * @return {?}
     */
    function format(formatString) {
      var haystack = formatString.toString();
      /** @type {number} */
      var offsetTop = 0;
      /** @type {number} */
      var i = 0;
      for (;i < haystack.length;i++) {
        offsetTop += parseInt(haystack.charAt(i), 10);
      }
      return offsetTop > 10 ? offsetTop % 9 + 1 : offsetTop;
    }
    /**
     * @param {number} d
     * @param {number} value
     * @param {number} num
     * @return {?}
     */
    function round(d, value, num) {
      /** @type {number} */
      var valid = Math.abs(num);
      for (;valid-- > 0;) {
        d -= value;
      }
      return 0 > num && (d += 123), d;
    }
    /**
     * @param {Object} elem
     * @return {?}
     */
    function refresh(elem) {
      return elem && "none" == elem.css("display") ? (elem.remove(), true) : false;
    }
    /**
     * @return {?}
     */
    function bind() {
      return refresh(check) || refresh(later);
    }
    /**
     * @return {undefined}
     */
    function load() {
    }
    /**
     * @return {undefined}
     */
    function add() {
      var codeSegments = element.opts.key || [""];
      if ("string" == typeof codeSegments) {
        /** @type {Array} */
        codeSegments = [codeSegments];
      }
      /** @type {boolean} */
      element.ul = true;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var src = value(codeSegments[i]) || "";
        if (!(src !== value(trim(value("mcVRDoB1BGILD7YFe1BTXBA7B6=="))) && (src.indexOf(term, src.length - term.length) < 0 && [value("9qqG-7amjlwq=="), value("KA3B3C2A6D1D5H5H1A3=="), value("QzbzvxyB2yA-9m==")].indexOf(term) < 0))) {
          /** @type {boolean} */
          element.ul = false;
          break;
        }
      }
      if (element.ul === true) {
        load();
      }
      element.events.on("contentChanged", function() {
        if (element.ul === true) {
          if (bind()) {
            load();
          }
        }
      });
      element.events.on("destroy", function() {
        if (check) {
          if (check.length) {
            check.remove();
          }
        }
      }, true);
    }
    var check;
    var later;
    /** @type {string} */
    var seen = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var term = function() {
      /** @type {number} */
      var a = 0;
      /** @type {string} */
      var url = document.domain;
      /** @type {Array.<string>} */
      var models = url.split(".");
      /** @type {string} */
      var uid = "_gd" + (new Date).getTime();
      for (;a < models.length - 1 && -1 == document.cookie.indexOf(uid + "=" + uid);) {
        /** @type {string} */
        url = models.slice(-1 - ++a).join(".");
        /** @type {string} */
        document.cookie = uid + "=" + uid + ";domain=" + url + ";";
      }
      return document.cookie = uid + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=" + url + ";", url;
    }();
    var value = trim(getValue);
    return{
      /** @type {function (): undefined} */
      _init : add
    };
  };
  /** @type {number} */
  $.FE.ENTER_P = 0;
  /** @type {number} */
  $.FE.ENTER_DIV = 1;
  /** @type {number} */
  $.FE.ENTER_BR = 2;
  $.FE.KEYCODE = {
    BACKSPACE : 8,
    TAB : 9,
    ENTER : 13,
    SHIFT : 16,
    CTRL : 17,
    ALT : 18,
    ESC : 27,
    SPACE : 32,
    DELETE : 46,
    ZERO : 48,
    ONE : 49,
    TWO : 50,
    THREE : 51,
    FOUR : 52,
    FIVE : 53,
    SIX : 54,
    SEVEN : 55,
    EIGHT : 56,
    NINE : 57,
    FF_SEMICOLON : 59,
    FF_EQUALS : 61,
    QUESTION_MARK : 63,
    A : 65,
    B : 66,
    C : 67,
    D : 68,
    E : 69,
    F : 70,
    G : 71,
    H : 72,
    I : 73,
    J : 74,
    K : 75,
    L : 76,
    M : 77,
    N : 78,
    O : 79,
    P : 80,
    Q : 81,
    R : 82,
    S : 83,
    T : 84,
    U : 85,
    V : 86,
    W : 87,
    X : 88,
    Y : 89,
    Z : 90,
    META : 91,
    NUM_ZERO : 96,
    NUM_ONE : 97,
    NUM_TWO : 98,
    NUM_THREE : 99,
    NUM_FOUR : 100,
    NUM_FIVE : 101,
    NUM_SIX : 102,
    NUM_SEVEN : 103,
    NUM_EIGHT : 104,
    NUM_NINE : 105,
    NUM_MULTIPLY : 106,
    NUM_PLUS : 107,
    NUM_MINUS : 109,
    NUM_PERIOD : 110,
    NUM_DIVISION : 111,
    SEMICOLON : 186,
    DASH : 189,
    EQUALS : 187,
    COMMA : 188,
    PERIOD : 190,
    SLASH : 191,
    APOSTROPHE : 192,
    TILDE : 192,
    SINGLE_QUOTE : 222,
    OPEN_SQUARE_BRACKET : 219,
    BACKSLASH : 220,
    CLOSE_SQUARE_BRACKET : 221
  };
  $.extend($.FE.DEFAULTS, {
    enter : $.FE.ENTER_P,
    multiLine : true,
    tabSpaces : 0
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.keys = function(self) {
    /**
     * @return {undefined}
     */
    function render() {
      if (self.helpers.isIOS()) {
        /** @type {(Array.<string>|null)} */
        var object = navigator.userAgent.match("CriOS");
        /** @type {boolean} */
        var property = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
        if (!object && !property) {
          var oldScrollTop = $(self.o_win).scrollTop();
          self.events.disableBlur();
          self.selection.save();
          self.$el.blur();
          self.selection.restore();
          self.events.enableBlur();
          $(self.o_win).scrollTop(oldScrollTop);
        }
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function remove(event) {
      event.preventDefault();
      event.stopPropagation();
      if (self.opts.multiLine) {
        if (!self.selection.isCollapsed()) {
          self.selection.remove();
        }
        self.cursor.enter();
      }
      render();
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function clickHandler(event) {
      event.preventDefault();
      event.stopPropagation();
      if (self.opts.multiLine) {
        if (!self.selection.isCollapsed()) {
          self.selection.remove();
        }
        self.cursor.enter(true);
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function add(event) {
      if (self.selection.isCollapsed()) {
        if (!self.cursor.backspace()) {
          event.preventDefault();
          event.stopPropagation();
          /** @type {boolean} */
          x = false;
        }
      } else {
        event.preventDefault();
        event.stopPropagation();
        self.selection.remove();
        self.html.fillEmptyBlocks();
        /** @type {boolean} */
        x = false;
      }
      self.placeholder.refresh();
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function stop(event) {
      event.preventDefault();
      event.stopPropagation();
      if ("" === self.selection.text()) {
        self.cursor.del();
      } else {
        self.selection.remove();
      }
      self.placeholder.refresh();
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function onSuccess(event) {
      if (self.browser.mozilla) {
        event.preventDefault();
        event.stopPropagation();
        if (!self.selection.isCollapsed()) {
          self.selection.remove();
        }
        self.markers.insert();
        var node = self.$el.find(".fr-marker").get(0);
        var parent = node.previousSibling;
        var nn = node.nextSibling;
        if (!nn && (node.parentNode && "A" == node.parentNode.tagName)) {
          $(node).parent().after("&nbsp;" + $.FE.MARKERS);
          $(node).remove();
        } else {
          if (parent && (parent.nodeType == Node.TEXT_NODE && (1 == parent.textContent.length && 160 == parent.textContent.charCodeAt(0)))) {
            $(parent).after(" ");
          } else {
            $(node).before("&nbsp;");
          }
          $(node).replaceWith($.FE.MARKERS);
        }
        self.selection.restore();
      }
    }
    /**
     * @return {undefined}
     */
    function set() {
      if (self.browser.mozilla && (self.selection.isCollapsed() && !object)) {
        var rng = self.selection.ranges(0);
        var node = rng.startContainer;
        var end = rng.startOffset;
        if (node) {
          if (node.nodeType == Node.TEXT_NODE) {
            if (end <= node.textContent.length) {
              if (end > 0) {
                if (32 == node.textContent.charCodeAt(end - 1)) {
                  self.selection.save();
                  self.spaces.normalize();
                  self.selection.restore();
                }
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.selection.isFull()) {
        setTimeout(function() {
          var c = self.html.defaultTag();
          if (c) {
            self.$el.html("<" + c + ">" + $.FE.MARKERS + "<br/></" + c + ">");
          } else {
            self.$el.html($.FE.MARKERS + "<br/>");
          }
          self.selection.restore();
          self.placeholder.refresh();
          self.button.bulkRefresh();
          self.undo.saveStep();
        }, 0);
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function start(event) {
      if (self.opts.tabSpaces > 0) {
        if (self.selection.isCollapsed()) {
          self.undo.saveStep();
          event.preventDefault();
          event.stopPropagation();
          /** @type {string} */
          var caption = "";
          /** @type {number} */
          var tabSpaces = 0;
          for (;tabSpaces < self.opts.tabSpaces;tabSpaces++) {
            caption += "&nbsp;";
          }
          self.html.insert(caption);
          self.placeholder.refresh();
          self.undo.saveStep();
        } else {
          event.preventDefault();
          event.stopPropagation();
          if (event.shiftKey) {
            self.commands.outdent();
          } else {
            self.commands.indent();
          }
        }
      }
    }
    /**
     * @param {?} event
     * @return {undefined}
     */
    function wrappedCallback(event) {
      /** @type {boolean} */
      object = false;
    }
    /**
     * @return {?}
     */
    function seal() {
      return object;
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function callback(event) {
      self.events.disableBlur();
      /** @type {boolean} */
      x = true;
      var keyCode = event.which;
      if (16 === keyCode) {
        return true;
      }
      if (229 === keyCode) {
        return object = true, true;
      }
      /** @type {boolean} */
      object = false;
      var program = keyDown(keyCode) && !listener(event);
      /** @type {boolean} */
      var inverse = keyCode == $.FE.KEYCODE.BACKSPACE || keyCode == $.FE.KEYCODE.DELETE;
      if ((self.selection.isFull() && (!self.opts.keepFormatOnDelete && !self.placeholder.isVisible()) || inverse && (self.placeholder.isVisible() && self.opts.keepFormatOnDelete)) && (program || inverse)) {
        var m = self.html.defaultTag();
        if (m ? self.$el.html("<" + m + ">" + $.FE.MARKERS + "<br/></" + m + ">") : self.$el.html($.FE.MARKERS + "<br/>"), self.selection.restore(), !keyDown(keyCode)) {
          return event.preventDefault(), true;
        }
      }
      if (keyCode == $.FE.KEYCODE.ENTER) {
        if (event.shiftKey) {
          clickHandler(event);
        } else {
          remove(event);
        }
      } else {
        if (keyCode != $.FE.KEYCODE.BACKSPACE || (listener(event) || (event.altKey || self.placeholder.isVisible()))) {
          if (keyCode != $.FE.KEYCODE.DELETE || (listener(event) || (event.altKey || self.placeholder.isVisible()))) {
            if (keyCode == $.FE.KEYCODE.SPACE) {
              onSuccess(event);
            } else {
              if (keyCode == $.FE.KEYCODE.TAB) {
                start(event);
              } else {
                if (!listener(event)) {
                  if (!!keyDown(event.which)) {
                    if (!self.selection.isCollapsed()) {
                      if (!event.ctrlKey) {
                        self.selection.remove();
                      }
                    }
                  }
                }
              }
            }
          } else {
            stop(event);
          }
        } else {
          add(event);
        }
      }
      self.events.enableBlur();
    }
    /**
     * @param {Array} args
     * @return {undefined}
     */
    function parse(args) {
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        if (args[i].nodeType == Node.TEXT_NODE && /\u200B/gi.test(args[i].textContent)) {
          args[i].textContent = args[i].textContent.replace(/\u200B/gi, "");
          if (0 === args[i].textContent.length) {
            $(args[i]).remove();
          }
        } else {
          if (args[i].nodeType == Node.ELEMENT_NODE) {
            if ("IFRAME" != args[i].nodeType) {
              parse(self.node.contents(args[i]));
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function update() {
      if (!self.$wp) {
        return true;
      }
      var top;
      if (self.opts.height || self.opts.heightMax) {
        top = self.position.getBoundingRect().top;
        if (self.helpers.isIOS()) {
          top -= $(self.o_win).scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
        }
        if (top > self.$wp.offset().top - $(self.o_win).scrollTop() + self.$wp.height() - 20) {
          self.$wp.scrollTop(top + self.$wp.scrollTop() - (self.$wp.height() + self.$wp.offset().top) + $(self.o_win).scrollTop() + 20);
        }
      } else {
        top = self.position.getBoundingRect().top;
        if (self.opts.toolbarBottom) {
          top += self.opts.toolbarStickyOffset;
        }
        if (self.helpers.isIOS()) {
          top -= $(self.o_win).scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
        }
        top += self.opts.toolbarStickyOffset;
        if (top > self.o_win.innerHeight - 20) {
          $(self.o_win).scrollTop(top + $(self.o_win).scrollTop() - self.o_win.innerHeight + 20);
        }
        top = self.position.getBoundingRect().top;
        if (!self.opts.toolbarBottom) {
          top -= self.opts.toolbarStickyOffset;
        }
        if (self.helpers.isIOS()) {
          top -= $(self.o_win).scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
        }
        if (top < self.$tb.height() + 20) {
          $(self.o_win).scrollTop(top + $(self.o_win).scrollTop() - self.$tb.height() - 20);
        }
      }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function initialize(e) {
      if (object) {
        return false;
      }
      if (!self.selection.isCollapsed()) {
        return true;
      }
      if (e && (e.which === $.FE.KEYCODE.META || e.which == $.FE.KEYCODE.CTRL)) {
        return true;
      }
      if (e) {
        if (e.which == $.FE.KEYCODE.ENTER || (e.which == $.FE.KEYCODE.BACKSPACE || e.which >= 37 && (e.which <= 40 && !self.browser.msie))) {
          if (!(e.which == $.FE.KEYCODE.BACKSPACE && x)) {
            update();
          }
        }
      }
      var items = self.$el.find(self.html.blockTagsQuery());
      items.push(self.$el.get(0));
      /** @type {Array} */
      var codeSegments = [];
      /** @type {number} */
      var i = 0;
      for (;i < items.length;i++) {
        if (["TD", "TH"].indexOf(items[i].tagName) < 0) {
          var childs = items[i].children;
          /** @type {number} */
          var m = 0;
          for (;m < childs.length;m++) {
            if ("BR" == childs[m].tagName) {
              codeSegments.push(childs[m]);
            }
          }
        }
      }
      /** @type {Array} */
      items = [];
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var el = codeSegments[i];
        var container = el.previousSibling;
        var cur = el.nextSibling;
        var v = self.node.blockParent(el) || self.$el.get(0);
        if (container) {
          if (v) {
            if ("BR" != container.tagName) {
              if (!self.node.isBlock(container)) {
                if (!cur) {
                  if ($(v).text().replace(/\u200B/g, "").length > 0) {
                    if ($(container).text().length > 0) {
                      if (!(self.$el.is(v) && (!cur && (self.opts.enter == $.FE.ENTER_BR && self.browser.msie)))) {
                        self.selection.save();
                        $(el).remove();
                        self.selection.restore();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      /** @type {Array} */
      codeSegments = [];
      /**
       * @param {?} element
       * @return {?}
       */
      var get = function(element) {
        if (!element) {
          return false;
        }
        var requestUrl = $(element).html();
        return requestUrl = requestUrl.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, ""), requestUrl && (/\u200B/.test(requestUrl) && requestUrl.replace(/\u200B/gi, "").length > 0) ? true : false;
      };
      /**
       * @param {HTMLElement} node
       * @return {?}
       */
      var convert = function(node) {
        /** @type {RegExp} */
        var typePattern = /[\u3041-\u3096\u30A0-\u30FF\u4E00-\u9FFF\u3130-\u318F\uAC00-\uD7AF]/gi;
        return!self.helpers.isIOS() || 0 === ((node.textContent || "").match(typePattern) || []).length;
      };
      var node = self.selection.element();
      if (get(node)) {
        if (0 === $(node).find("li").length) {
          if (!$(node).hasClass("fr-marker")) {
            if ("IFRAME" != node.tagName) {
              if (convert(node)) {
                self.selection.save();
                parse(self.node.contents(node));
                self.selection.restore();
              }
            }
          }
        }
      }
      if (!self.browser.mozilla) {
        if (self.html.doNormalize()) {
          self.selection.save();
          self.spaces.normalize();
          self.selection.restore();
        }
      }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function listener(e) {
      if (-1 != navigator.userAgent.indexOf("Mac OS X")) {
        if (e.metaKey && !e.altKey) {
          return true;
        }
      } else {
        if (e.ctrlKey && !e.altKey) {
          return true;
        }
      }
      return false;
    }
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function keyDown(keyCode) {
      if (keyCode >= $.FE.KEYCODE.ZERO && keyCode <= $.FE.KEYCODE.NINE) {
        return true;
      }
      if (keyCode >= $.FE.KEYCODE.NUM_ZERO && keyCode <= $.FE.KEYCODE.NUM_MULTIPLY) {
        return true;
      }
      if (keyCode >= $.FE.KEYCODE.A && keyCode <= $.FE.KEYCODE.Z) {
        return true;
      }
      if (self.browser.webkit && 0 === keyCode) {
        return true;
      }
      switch(keyCode) {
        case $.FE.KEYCODE.SPACE:
        ;
        case $.FE.KEYCODE.QUESTION_MARK:
        ;
        case $.FE.KEYCODE.NUM_PLUS:
        ;
        case $.FE.KEYCODE.NUM_MINUS:
        ;
        case $.FE.KEYCODE.NUM_PERIOD:
        ;
        case $.FE.KEYCODE.NUM_DIVISION:
        ;
        case $.FE.KEYCODE.SEMICOLON:
        ;
        case $.FE.KEYCODE.FF_SEMICOLON:
        ;
        case $.FE.KEYCODE.DASH:
        ;
        case $.FE.KEYCODE.EQUALS:
        ;
        case $.FE.KEYCODE.FF_EQUALS:
        ;
        case $.FE.KEYCODE.COMMA:
        ;
        case $.FE.KEYCODE.PERIOD:
        ;
        case $.FE.KEYCODE.SLASH:
        ;
        case $.FE.KEYCODE.APOSTROPHE:
        ;
        case $.FE.KEYCODE.SINGLE_QUOTE:
        ;
        case $.FE.KEYCODE.OPEN_SQUARE_BRACKET:
        ;
        case $.FE.KEYCODE.BACKSLASH:
        ;
        case $.FE.KEYCODE.CLOSE_SQUARE_BRACKET:
          return true;
        default:
          return false;
      }
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function handler(event) {
      var keyCode = event.which;
      return listener(event) || (keyCode >= 37 && 40 >= keyCode || !keyDown(keyCode) && (keyCode != $.FE.KEYCODE.DELETE && (keyCode != $.FE.KEYCODE.BACKSPACE && keyCode != $.FE.KEYCODE.ENTER))) ? true : (tref || (suiteView = self.snapshot.get()), clearTimeout(tref), void(tref = setTimeout(function() {
        /** @type {null} */
        tref = null;
        self.undo.saveStep();
      }, Math.max(250, self.opts.typingTimer))));
    }
    /**
     * @param {Event} elem
     * @return {?}
     */
    function restoreScript(elem) {
      return listener(elem) ? true : void(suiteView && (tref && (self.undo.saveStep(suiteView), suiteView = null)));
    }
    /**
     * @return {undefined}
     */
    function draw() {
      if (tref) {
        clearTimeout(tref);
        self.undo.saveStep();
        /** @type {null} */
        suiteView = null;
      }
    }
    /**
     * @return {undefined}
     */
    function Editor() {
      if (self.events.on("keydown", handler), self.events.on("input", set), self.events.on("keyup", restoreScript), self.events.on("keypress", wrappedCallback), self.events.on("keydown", callback), self.events.on("keyup", initialize), self.events.on("html.inserted", initialize), self.events.on("cut", init), self.$el.get(0).msGetInputContext) {
        try {
          self.$el.get(0).msGetInputContext().addEventListener("MSCandidateWindowShow", function() {
            /** @type {boolean} */
            object = true;
          });
          self.$el.get(0).msGetInputContext().addEventListener("MSCandidateWindowHide", function() {
            /** @type {boolean} */
            object = false;
            initialize();
          });
        } catch (a) {
        }
      }
    }
    var x;
    var tref;
    var suiteView;
    /** @type {boolean} */
    var object = false;
    return{
      /** @type {function (): undefined} */
      _init : Editor,
      /** @type {function (Event): ?} */
      ctrlKey : listener,
      /** @type {function (?): ?} */
      isCharacter : keyDown,
      /** @type {function (): undefined} */
      forceUndo : draw,
      /** @type {function (): ?} */
      isIME : seal
    };
  };
  $.extend($.FE.DEFAULTS, {
    pastePlain : false,
    pasteDeniedTags : ["colgroup", "col"],
    pasteDeniedAttrs : ["class", "id", "style"],
    pasteAllowLocalImages : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.paste = function(self) {
    /**
     * @param {Event} src
     * @return {undefined}
     */
    function init(src) {
      $.FE.copied_html = self.html.getSelected();
      $.FE.copied_text = $("<div>").html($.FE.copied_html).text();
      if ("cut" == src.type) {
        self.undo.saveStep();
        setTimeout(function() {
          self.html.wrap();
          self.events.focus();
          self.undo.saveStep();
        }, 0);
      }
    }
    /**
     * @param {Object} e
     * @return {?}
     */
    function start(e) {
      if (o) {
        return false;
      }
      if (e.originalEvent && (e = e.originalEvent), self.events.trigger("paste.before", [e]) === false) {
        return false;
      }
      if (l = self.$win.scrollTop(), e && (e.clipboardData && e.clipboardData.getData)) {
        /** @type {string} */
        var requestUrl = "";
        var copy = e.clipboardData.types;
        if (self.helpers.isArray(copy)) {
          /** @type {number} */
          var i = 0;
          for (;i < copy.length;i++) {
            requestUrl += copy[i] + ";";
          }
        } else {
          requestUrl = copy;
        }
        if (text = "", /text\/html/.test(requestUrl) ? text = e.clipboardData.getData("text/html") : /text\/rtf/.test(requestUrl) && self.browser.safari ? text = e.clipboardData.getData("text/rtf") : /text\/plain/.test(requestUrl) && (!this.browser.mozilla && (text = self.html.escapeEntities(e.clipboardData.getData("text/plain")).replace(/\n/g, "<br>"))), "" !== text) {
          return process(), e.preventDefault && (e.stopPropagation(), e.preventDefault()), false;
        }
        /** @type {null} */
        text = null;
      }
      draw();
    }
    /**
     * @return {undefined}
     */
    function draw() {
      self.selection.save();
      self.events.disableBlur();
      /** @type {null} */
      text = null;
      if (textarea) {
        textarea.html("");
      } else {
        textarea = $('<div contenteditable="true" style="position: fixed; top: 0; left: -9999px; height: 100%; width: 0; word-break: break-all; overflow:hidden; z-index: 9999; line-height: 140%;" tabindex="-1"></div>');
        self.$box.after(textarea);
        self.events.on("destroy", function() {
          textarea.remove();
        });
      }
      textarea.focus();
      self.win.setTimeout(process, 1);
    }
    /**
     * @param {Object} v
     * @return {?}
     */
    function create(v) {
      v = v.replace(/<p(.*?)class="?'?MsoListParagraph"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li>$3</li></ul>");
      v = v.replace(/<p(.*?)class="?'?NumberedText"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ol><li>$3</li></ol>");
      v = v.replace(/<p(.*?)class="?'?MsoListParagraphCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li$3>$5</li>");
      v = v.replace(/<p(.*?)class="?'?NumberedTextCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ol><li$3>$5</li>");
      v = v.replace(/<p(.*?)class="?'?MsoListParagraphCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      v = v.replace(/<p(.*?)class="?'?NumberedTextCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      v = v.replace(/<p(.*?)class="?'?MsoListBullet"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      v = v.replace(/<p(.*?)class="?'?MsoListParagraphCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li></ul>");
      v = v.replace(/<p(.*?)class="?'?NumberedTextCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li></ol>");
      v = v.replace(/<span([^<]*?)style="?'?mso-list:Ignore"?'?([\s\S]*?)>([\s\S]*?)<span/gi, "<span><span");
      v = v.replace(/\x3c!--\[if \!supportLists\]--\x3e([\s\S]*?)\x3c!--\[endif\]--\x3e/gi, "");
      v = v.replace(/<!\[if \!supportLists\]>([\s\S]*?)<!\[endif\]>/gi, "");
      v = v.replace(/(\n|\r| class=(")?Mso[a-zA-Z0-9]+(")?)/gi, " ");
      v = v.replace(/\x3c!--[\s\S]*?--\x3e/gi, "");
      v = v.replace(/<(\/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>/gi, "");
      /** @type {Array} */
      var badTags = ["style", "script", "applet", "embed", "noframes", "noscript"];
      /** @type {number} */
      var i = 0;
      for (;i < badTags.length;i++) {
        /** @type {RegExp} */
        var regexp = new RegExp("<" + badTags[i] + ".*?" + badTags[i] + "(.*?)>", "gi");
        v = v.replace(regexp, "");
      }
      v = v.replace(/&nbsp;/gi, " ");
      v = v.replace(/<td([^>]*)><\/td>/g, "<td$1><br></td>");
      v = v.replace(/<th([^>]*)><\/th>/g, "<th$1><br></th>");
      var current;
      do {
        /** @type {Object} */
        current = v;
        v = v.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "");
      } while (v != current);
      v = v.replace(/<lilevel([^1])([^>]*)>/gi, '<li data-indent="true"$2>');
      v = v.replace(/<lilevel1([^>]*)>/gi, "<li$1>");
      v = self.clean.html(v, self.opts.pasteDeniedTags, self.opts.pasteDeniedAttrs);
      v = v.replace(/<a>(.[^<]+)<\/a>/gi, "$1");
      v = v.replace(/<br> */g, "<br>");
      var el = $("<div>").html(v);
      return el.find("li[data-indent]").each(function(dataAndEvents, li) {
        var ul = $(li);
        if (ul.prev("li").length > 0) {
          var $ul = ul.prev("li").find("> ul, > ol");
          if (0 === $ul.length) {
            $ul = $("ul");
            ul.prev("li").append($ul);
          }
          $ul.append(li);
        } else {
          ul.removeAttr("data-indent");
        }
      }), self.html.cleanBlankSpaces(el.get(0)), v = el.html();
    }
    /**
     * @param {string} type
     * @return {?}
     */
    function test(type) {
      var el = $("<div>").html(type);
      el.find("p, div, h1, h2, h3, h4, h5, h6, pre, blockquote").each(function(dataAndEvents, element) {
        $(element).replaceWith("<" + (self.html.defaultTag() || "DIV") + ">" + $(element).html() + "</" + (self.html.defaultTag() || "DIV") + ">");
      });
      $(el.find("*").not("p, div, h1, h2, h3, h4, h5, h6, pre, blockquote, ul, ol, li, table, tbody, thead, tr, td, br, img").get().reverse()).each(function() {
        $(this).replaceWith($(this).html());
      });
      /**
       * @param {Node} node
       * @return {undefined}
       */
      var handle = function(node) {
        var codeSegments = self.node.contents(node);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (3 != codeSegments[i].nodeType && 1 != codeSegments[i].nodeType) {
            $(codeSegments[i]).remove();
          } else {
            handle(codeSegments[i]);
          }
        }
      };
      return handle(el.get(0)), el.html();
    }
    /**
     * @return {undefined}
     */
    function process() {
      self.keys.forceUndo();
      var suiteView = self.snapshot.get();
      if (null === text) {
        text = textarea.html();
        self.selection.restore();
        self.events.enableBlur();
      }
      var t = self.events.chainTrigger("paste.beforeCleanup", text);
      if ("string" == typeof t) {
        /** @type {string} */
        text = t;
      }
      if (text.indexOf("<body") >= 0) {
        text = text.replace(/[.\s\S\w\W<>]*<body[^>]*>([.\s\S\w\W<>]*)<\/body>[.\s\S\w\W<>]*/g, "$1");
      }
      /** @type {boolean} */
      var e = false;
      if (text.indexOf('id="docs-internal-guid') >= 0 && (text = text.replace(/^.* id="docs-internal-guid[^>]*>(.*)<\/b>.*$/, "$1"), e = true), text.match(/(class=\"?Mso|class=\'?Mso|style=\"[^\"]*\bmso\-|style=\'[^\']*\bmso\-|w:WordDocument)/gi) ? (text = text.replace(/^\n*/g, "").replace(/^ /g, ""), 0 === text.indexOf("<colgroup>") && (text = "<table>" + text + "</table>"), text = create(text), text = remove(text)) : (self.opts.htmlAllowComments = false, text = self.clean.html(text, self.opts.pasteDeniedTags, 
      self.opts.pasteDeniedAttrs), self.opts.htmlAllowComments = true, text = remove(text), text = text.replace(/\r|\n|\t/g, ""), $.FE.copied_text && ($("<div>").html(text).text().replace(/(\u00A0)/gi, " ").replace(/\r|\n/gi, "") == $.FE.copied_text.replace(/(\u00A0)/gi, " ").replace(/\r|\n/gi, "") && (text = $.FE.copied_html)), text = text.replace(/^ */g, "").replace(/ *$/g, "")), self.opts.pastePlain && (text = test(text)), t = self.events.chainTrigger("paste.afterCleanup", text), "string" == typeof t && 
      (text = t), "" !== text) {
        var el = $("<div>").html(text);
        self.spaces.normalize(el.get(0));
        el.find("span").each(function() {
          if (0 == this.attributes.length) {
            $(this).replaceWith(this.innerHTML);
          }
        });
        if (!e) {
          el.find("br").each(function() {
            if (this.previousSibling) {
              if (self.node.isBlock(this.previousSibling)) {
                $(this).remove();
              }
            }
          });
        }
        text = el.html();
        self.html.insert(text, true);
      }
      f();
      self.undo.saveStep(suiteView);
      self.undo.saveStep();
    }
    /**
     * @return {undefined}
     */
    function f() {
      self.events.trigger("paste.after");
    }
    /**
     * @param {string} m
     * @return {?}
     */
    function remove(m) {
      var i;
      var box = $("<div>").html(m);
      var resultItems = box.find("*:empty:not(br, img, td, th)");
      for (;resultItems.length;) {
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          $(resultItems[i]).remove();
        }
        resultItems = box.find("*:empty:not(br, img, td, th)");
      }
      var codeSegments = box.find("> div:not([style]), td > div, th > div, li > div");
      for (;codeSegments.length && i++ < 100;) {
        var footer = $(codeSegments[codeSegments.length - 1]);
        if (self.html.defaultTag() && "div" != self.html.defaultTag()) {
          footer.replaceWith("<" + self.html.defaultTag() + ">" + footer.html() + "</" + self.html.defaultTag() + ">");
        } else {
          if (footer.find("*:last").is("br")) {
            footer.replaceWith(footer.html());
          } else {
            footer.replaceWith(footer.html() + "<br>");
          }
        }
        codeSegments = box.find("> div:not([style]), td > div, th > div, li > div");
      }
      codeSegments = box.find("div:not([style])");
      for (;codeSegments.length;) {
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          var $this = $(codeSegments[i]);
          var tmp = $this.html().replace(/\u0009/gi, "").trim();
          $this.replaceWith(tmp);
        }
        codeSegments = box.find("div:not([style])");
      }
      return box.html();
    }
    /**
     * @return {undefined}
     */
    function handler() {
      self.events.on("copy", init);
      self.events.on("cut", init);
      self.events.on("paste", start);
      if (self.browser.msie) {
        if (self.browser.version < 11) {
          self.events.on("mouseup", function(e) {
            if (2 == e.button) {
              setTimeout(function() {
                /** @type {boolean} */
                o = false;
              }, 50);
              /** @type {boolean} */
              o = true;
            }
          }, true);
          self.events.on("beforepaste", start);
        }
      }
    }
    var l;
    var text;
    var textarea;
    /** @type {boolean} */
    var o = false;
    return{
      /** @type {function (): undefined} */
      _init : handler
    };
  };
  $.extend($.FE.DEFAULTS, {
    shortcutsEnabled : ["show", "bold", "italic", "underline", "strikeThrough", "indent", "outdent", "undo", "redo"],
    shortcutsHint : true
  });
  $.FE.SHORTCUTS_MAP = {};
  /**
   * @param {number} dataAndEvents
   * @param {string} command
   * @param {string} aDefaultValue
   * @param {string} name
   * @param {boolean} recurring
   * @param {boolean} mayParseLabeledStatementInstead
   * @return {undefined}
   */
  $.FE.RegisterShortcut = function(dataAndEvents, command, aDefaultValue, name, recurring, mayParseLabeledStatementInstead) {
    $.FE.SHORTCUTS_MAP[(recurring ? "^" : "") + (mayParseLabeledStatementInstead ? "@" : "") + dataAndEvents] = {
      cmd : command,
      val : aDefaultValue,
      letter : name,
      shift : recurring,
      option : mayParseLabeledStatementInstead
    };
    $.FE.DEFAULTS.shortcutsEnabled.push(command);
  };
  $.FE.RegisterShortcut($.FE.KEYCODE.E, "show", null, "E", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.B, "bold", null, "B", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.I, "italic", null, "I", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.U, "underline", null, "U", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.S, "strikeThrough", null, "S", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.CLOSE_SQUARE_BRACKET, "indent", null, "]", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.OPEN_SQUARE_BRACKET, "outdent", null, "[", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.Z, "undo", null, "Z", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.Z, "redo", null, "Z", true, false);
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.shortcuts = function(self) {
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function func(mayParseLabeledStatementInstead) {
      if (!self.opts.shortcutsHint) {
        return null;
      }
      if (!viewItems) {
        viewItems = {};
        var i;
        for (i in $.FE.SHORTCUTS_MAP) {
          if ($.FE.SHORTCUTS_MAP.hasOwnProperty(i)) {
            if (self.opts.shortcutsEnabled.indexOf($.FE.SHORTCUTS_MAP[i].cmd) >= 0) {
              viewItems[$.FE.SHORTCUTS_MAP[i].cmd + "." + ($.FE.SHORTCUTS_MAP[i].val || "")] = {
                shift : $.FE.SHORTCUTS_MAP[i].shift,
                option : $.FE.SHORTCUTS_MAP[i].option,
                letter : $.FE.SHORTCUTS_MAP[i].letter
              };
            }
          }
        }
      }
      var item = viewItems[mayParseLabeledStatementInstead];
      return item ? (self.helpers.isMac() ? String.fromCharCode(8984) : "Ctrl+") + (item.shift ? self.helpers.isMac() ? String.fromCharCode(8679) : "Shift+" : "") + (item.option ? self.helpers.isMac() ? String.fromCharCode(8997) : "Alt+" : "") + item.letter : null;
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function init(e) {
      if (!self.core.hasFocus()) {
        return true;
      }
      var key = e.which;
      var style = -1 != navigator.userAgent.indexOf("Mac OS X") ? e.metaKey : e.ctrlKey;
      /** @type {string} */
      var name = (e.shiftKey ? "^" : "") + (e.altKey ? "@" : "") + key;
      if (style && $.FE.SHORTCUTS_MAP[name]) {
        var type = $.FE.SHORTCUTS_MAP[name].cmd;
        if (type && self.opts.shortcutsEnabled.indexOf(type) >= 0) {
          var i;
          var val = $.FE.SHORTCUTS_MAP[name].val;
          if (type && !val ? i = self.$tb.find('.fr-command[data-cmd="' + type + '"]') : type && (val && (i = self.$tb.find('.fr-command[data-cmd="' + type + '"][data-param1="' + val + '"]'))), i.length) {
            return e.preventDefault(), e.stopPropagation(), i.parents(".fr-toolbar").data("instance", self), "keydown" == e.type && self.button.exec(i), false;
          }
          if (type && self.commands[type]) {
            return e.preventDefault(), e.stopPropagation(), "keydown" == e.type && self.commands[type](), false;
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.on("keydown", init, true);
      self.events.on("keyup", init, true);
    }
    /** @type {null} */
    var viewItems = null;
    return{
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (number): ?} */
      get : func
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.snapshot = function(self) {
    /**
     * @param {Object} node
     * @return {?}
     */
    function parse(node) {
      var nodes = node.parentNode.childNodes;
      /** @type {number} */
      var resp = 0;
      /** @type {null} */
      var child = null;
      /** @type {number} */
      var i = 0;
      for (;i < nodes.length;i++) {
        if (child) {
          /** @type {boolean} */
          var f = nodes[i].nodeType === Node.TEXT_NODE && "" === nodes[i].textContent;
          /** @type {boolean} */
          var g = child.nodeType === Node.TEXT_NODE && nodes[i].nodeType === Node.TEXT_NODE;
          if (!f) {
            if (!g) {
              resp++;
            }
          }
        }
        if (nodes[i] == node) {
          return resp;
        }
        child = nodes[i];
      }
    }
    /**
     * @param {boolean} node
     * @return {?}
     */
    function handle(node) {
      /** @type {Array} */
      var matched = [];
      if (!node.parentNode) {
        return[];
      }
      for (;!self.node.isElement(node);) {
        matched.push(parse(node));
        node = node.parentNode;
      }
      return matched.reverse();
    }
    /**
     * @param {boolean} node
     * @param {?} offset
     * @return {?}
     */
    function isSplitPoint(node, offset) {
      for (;node && node.nodeType === Node.TEXT_NODE;) {
        var parent = node.previousSibling;
        if (parent) {
          if (parent.nodeType == Node.TEXT_NODE) {
            offset += parent.textContent.length;
          }
        }
        node = parent;
      }
      return offset;
    }
    /**
     * @param {Object} range
     * @return {?}
     */
    function fn(range) {
      return{
        scLoc : handle(range.startContainer),
        scOffset : isSplitPoint(range.startContainer, range.startOffset),
        ecLoc : handle(range.endContainer),
        ecOffset : isSplitPoint(range.endContainer, range.endOffset)
      };
    }
    /**
     * @return {?}
     */
    function init() {
      var $scope = {};
      if (self.events.trigger("snapshot.before"), $scope.html = self.$wp ? self.$el.html() : self.$oel.get(0).outerHTML, $scope.ranges = [], self.$wp && (self.selection.inEditor() && self.core.hasFocus())) {
        var codeSegments = self.selection.ranges();
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          $scope.ranges.push(fn(codeSegments[i]));
        }
      }
      return self.events.trigger("snapshot.after"), $scope;
    }
    /**
     * @param {Array} codeSegments
     * @return {?}
     */
    function find(codeSegments) {
      var result = self.$el.get(0);
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        result = result.childNodes[codeSegments[i]];
      }
      return result;
    }
    /**
     * @param {Selection} sel
     * @param {?} element
     * @return {undefined}
     */
    function select(sel, element) {
      try {
        var text = find(element.scLoc);
        var length = element.scOffset;
        var text2 = find(element.ecLoc);
        var index = element.ecOffset;
        var range = self.doc.createRange();
        range.setStart(text, length);
        range.setEnd(text2, index);
        sel.addRange(range);
      } catch (j) {
      }
    }
    /**
     * @param {Object} el
     * @return {undefined}
     */
    function set(el) {
      if (self.$el.html() != el.html) {
        self.$el.html(el.html);
      }
      var sel = self.selection.get();
      self.selection.clear();
      self.events.focus(true);
      /** @type {number} */
      var i = 0;
      for (;i < el.ranges.length;i++) {
        select(sel, el.ranges[i]);
      }
    }
    /**
     * @param {Object} data
     * @param {Object} obj
     * @return {?}
     */
    function log(data, obj) {
      return data.html != obj.html ? false : self.core.hasFocus() && JSON.stringify(data.ranges) != JSON.stringify(obj.ranges) ? false : true;
    }
    return{
      /** @type {function (): ?} */
      get : init,
      /** @type {function (Object): undefined} */
      restore : set,
      /** @type {function (Object, Object): ?} */
      equal : log
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.undo = function(self) {
    /**
     * @param {Event} e
     * @return {undefined}
     */
    function keydown(e) {
      var key = e.which;
      var coord = self.keys.ctrlKey(e);
      if (coord) {
        if (90 == key) {
          if (e.shiftKey) {
            e.preventDefault();
          }
        }
        if (90 == key) {
          e.preventDefault();
        }
      }
    }
    /**
     * @return {?}
     */
    function undo() {
      return 0 === self.undo_stack.length || self.undo_index <= 1 ? false : true;
    }
    /**
     * @return {?}
     */
    function promote() {
      return self.undo_index == self.undo_stack.length ? false : true;
    }
    /**
     * @param {Object} obj
     * @return {?}
     */
    function error(obj) {
      return!self.undo_stack || (self.undoing || self.$el.get(0).querySelectorAll(".fr-marker").length) ? false : void("undefined" == typeof obj ? (obj = self.snapshot.get(), self.undo_stack[self.undo_index - 1] && self.snapshot.equal(self.undo_stack[self.undo_index - 1], obj) || (finish(), self.undo_stack.push(obj), self.undo_index++, obj.html != val && (self.events.trigger("contentChanged"), val = obj.html))) : (finish(), self.undo_index > 0 ? self.undo_stack[self.undo_index - 1] = obj : (self.undo_stack.push(obj), 
      self.undo_index++)));
    }
    /**
     * @return {?}
     */
    function finish() {
      if (!self.undo_stack || self.undoing) {
        return false;
      }
      for (;self.undo_stack.length > self.undo_index;) {
        self.undo_stack.pop();
      }
    }
    /**
     * @return {undefined}
     */
    function callback() {
      if (self.undo_index > 1) {
        /** @type {boolean} */
        self.undoing = true;
        var el = self.undo_stack[--self.undo_index - 1];
        clearTimeout(self._content_changed_timer);
        self.snapshot.restore(el);
        val = el.html;
        self.popups.hideAll();
        self.toolbar.enable();
        self.events.trigger("contentChanged");
        self.events.trigger("commands.undo");
        /** @type {boolean} */
        self.undoing = false;
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      if (self.undo_index < self.undo_stack.length) {
        /** @type {boolean} */
        self.undoing = true;
        var el = self.undo_stack[self.undo_index++];
        clearTimeout(self._content_changed_timer);
        self.snapshot.restore(el);
        val = el.html;
        self.popups.hideAll();
        self.toolbar.enable();
        self.events.trigger("contentChanged");
        self.events.trigger("commands.redo");
        /** @type {boolean} */
        self.undoing = false;
      }
    }
    /**
     * @return {undefined}
     */
    function reset() {
      /** @type {number} */
      self.undo_index = 0;
      /** @type {Array} */
      self.undo_stack = [];
    }
    /**
     * @return {undefined}
     */
    function restoreScript() {
      /** @type {Array} */
      self.undo_stack = [];
    }
    /**
     * @return {undefined}
     */
    function init() {
      reset();
      self.events.on("initialized", function() {
        val = self.html.get(false, true);
      });
      self.events.on("blur", function() {
        self.undo.saveStep();
      });
      self.events.on("keydown", keydown);
      self.events.on("destroy", restoreScript);
    }
    /** @type {null} */
    var val = null;
    return{
      /** @type {function (): undefined} */
      _init : init,
      /** @type {function (): undefined} */
      run : callback,
      /** @type {function (): undefined} */
      redo : render,
      /** @type {function (): ?} */
      canDo : undo,
      /** @type {function (): ?} */
      canRedo : promote,
      /** @type {function (): ?} */
      dropRedo : finish,
      /** @type {function (): undefined} */
      reset : reset,
      /** @type {function (Object): ?} */
      saveStep : error
    };
  };
  /** @type {string} */
  $.FE.ICON_DEFAULT_TEMPLATE = "font_awesome";
  $.FE.ICON_TEMPLATES = {
    font_awesome : '<i class="fa fa-[NAME]"></i>',
    text : '<span style="text-align: center;">[NAME]</span>',
    image : "<img src=[SRC] alt=[ALT] />"
  };
  $.FE.ICONS = {
    bold : {
      NAME : "bold"
    },
    italic : {
      NAME : "italic"
    },
    underline : {
      NAME : "underline"
    },
    strikeThrough : {
      NAME : "strikethrough"
    },
    subscript : {
      NAME : "subscript"
    },
    superscript : {
      NAME : "superscript"
    },
    color : {
      NAME : "tint"
    },
    outdent : {
      NAME : "outdent"
    },
    indent : {
      NAME : "indent"
    },
    undo : {
      NAME : "rotate-left"
    },
    redo : {
      NAME : "rotate-right"
    },
    insertHR : {
      NAME : "minus"
    },
    clearFormatting : {
      NAME : "eraser"
    },
    selectAll : {
      NAME : "mouse-pointer"
    }
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.DefineIconTemplate = function(i, offsetPosition) {
    $.FE.ICON_TEMPLATES[i] = offsetPosition;
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.DefineIcon = function(i, offsetPosition) {
    $.FE.ICONS[i] = offsetPosition;
  };
  /**
   * @param {?} hspace
   * @return {?}
   */
  $.FE.MODULES.icon = function(hspace) {
    /**
     * @param {Node} name
     * @return {?}
     */
    function create(name) {
      /** @type {null} */
      var altName = null;
      var map = $.FE.ICONS[name];
      if ("undefined" != typeof map) {
        var template = map.template || $.FE.ICON_DEFAULT_TEMPLATE;
        if (template) {
          if (template = $.FE.ICON_TEMPLATES[template]) {
            altName = template.replace(/\[([a-zA-Z]*)\]/g, function(dataAndEvents, lcName) {
              return "NAME" == lcName ? map[lcName] || name : map[lcName];
            });
          }
        }
      }
      return altName || name;
    }
    return{
      /** @type {function (Node): ?} */
      create : create
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.tooltip = function(self) {
    /**
     * @return {undefined}
     */
    function show() {
      if (self.$tooltip) {
        self.$tooltip.removeClass("fr-visible").css("left", "-3000px").css("position", "fixed");
      }
    }
    /**
     * @param {Object} el
     * @param {boolean} callback
     * @return {?}
     */
    function render(el, callback) {
      if (el.data("title") || el.data("title", el.attr("title")), !el.data("title")) {
        return false;
      }
      if (!self.$tooltip) {
        init();
      }
      el.removeAttr("title");
      self.$tooltip.text(el.data("title"));
      self.$tooltip.addClass("fr-visible");
      var propsCss = el.offset().left + (el.outerWidth() - self.$tooltip.outerWidth()) / 2;
      if (0 > propsCss) {
        /** @type {number} */
        propsCss = 0;
      }
      if (propsCss + self.$tooltip.outerWidth() > $(self.o_win).width()) {
        /** @type {number} */
        propsCss = $(self.o_win).width() - self.$tooltip.outerWidth();
      }
      if ("undefined" == typeof callback) {
        callback = self.opts.toolbarBottom;
      }
      var meterPos = callback ? el.offset().top - self.$tooltip.height() : el.offset().top + el.outerHeight();
      self.$tooltip.css("position", "");
      self.$tooltip.css("left", propsCss);
      self.$tooltip.css("top", meterPos);
      if ("static" != $(self.o_doc).find("body").css("position")) {
        self.$tooltip.css("margin-left", -$(self.o_doc).find("body").offset().left);
        self.$tooltip.css("margin-top", -$(self.o_doc).find("body").offset().top);
      } else {
        self.$tooltip.css("margin-left", "");
        self.$tooltip.css("margin-top", "");
      }
    }
    /**
     * @param {Object} event
     * @param {Object} token
     * @param {boolean} callback
     * @return {undefined}
     */
    function handler(event, token, callback) {
      if (!self.helpers.isMobile()) {
        self.events.$on(event, "mouseenter", token, function(ev) {
          if (!$(ev.currentTarget).hasClass("fr-disabled")) {
            if (!self.edit.isDisabled()) {
              render($(ev.currentTarget), callback);
            }
          }
        }, true);
        self.events.$on(event, "mouseleave " + self._mousedown + " " + self._mouseup, token, function(dataAndEvents) {
          show();
        }, true);
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (!self.helpers.isMobile()) {
        if (self.shared.$tooltip) {
          self.$tooltip = self.shared.$tooltip;
        } else {
          self.shared.$tooltip = $('<div class="fr-tooltip"></div>');
          self.$tooltip = self.shared.$tooltip;
          if (self.opts.theme) {
            self.$tooltip.addClass(self.opts.theme + "-theme");
          }
          $(self.o_doc).find("body").append(self.$tooltip);
        }
        self.events.on("shared.destroy", function() {
          self.$tooltip.html("").removeData().remove();
          /** @type {null} */
          self.$tooltip = null;
        }, true);
      }
    }
    return{
      /** @type {function (): undefined} */
      hide : show,
      /** @type {function (Object, boolean): ?} */
      to : render,
      /** @type {function (Object, Object, boolean): undefined} */
      bind : handler
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.button = function(self) {
    /**
     * @param {Event} evt
     * @return {undefined}
     */
    function init(evt) {
      var t = $(evt.currentTarget);
      var child = t.next();
      var fr_active = t.hasClass("fr-active");
      var $active = (self.helpers.isMobile(), $(".fr-dropdown.fr-active").not(t));
      var that = t.parents(".fr-toolbar, .fr-popup").data("instance") || self;
      if (that.helpers.isIOS() && (0 == that.$el.get(0).querySelectorAll(".fr-marker").length && (that.selection.save(), that.selection.clear(), that.selection.restore())), !fr_active) {
        var request = t.data("cmd");
        child.find(".fr-command").removeClass("fr-active");
        if ($.FE.COMMANDS[request]) {
          if ($.FE.COMMANDS[request].refreshOnShow) {
            $.FE.COMMANDS[request].refreshOnShow.apply(that, [t, child]);
          }
        }
        child.css("left", t.offset().left - t.parent().offset().left - ("rtl" == self.opts.direction ? child.width() - t.outerWidth() : 0));
        if (self.opts.toolbarBottom) {
          child.css("bottom", self.$tb.height() - t.position().top);
        } else {
          child.css("top", t.position().top + t.outerHeight());
        }
      }
      t.addClass("fr-blink").toggleClass("fr-active");
      setTimeout(function() {
        t.removeClass("fr-blink");
      }, 300);
      if (child.offset().left + child.outerWidth() > $(self.opts.scrollableContainer).offset().left + $(self.opts.scrollableContainer).outerWidth()) {
        child.css("margin-left", -(child.offset().left + child.outerWidth() - $(self.opts.scrollableContainer).offset().left - $(self.opts.scrollableContainer).outerWidth()));
      }
      $active.removeClass("fr-active");
      $active.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      if (!(0 != t.parents(".fr-popup").length)) {
        if (!self.opts.toolbarInline) {
          if (t.hasClass("fr-active")) {
            self.$tb.css("zIndex", (self.opts.zIndex || 1) + 4);
          } else {
            self.$tb.css("zIndex", "");
          }
        }
      }
    }
    /**
     * @param {Object} t
     * @return {undefined}
     */
    function add(t) {
      t.addClass("fr-blink");
      setTimeout(function() {
        t.removeClass("fr-blink");
      }, 500);
      var p = t.data("cmd");
      /** @type {Array} */
      var scripts = [];
      for (;"undefined" != typeof t.data("param" + (scripts.length + 1));) {
        scripts.push(t.data("param" + (scripts.length + 1)));
      }
      var $btn = $(".fr-dropdown.fr-active");
      if ($btn.length) {
        $btn.removeClass("fr-active");
        $btn.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      }
      t.parents(".fr-popup, .fr-toolbar").data("instance").commands.exec(p, scripts);
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function stop(event) {
      var j = $(event.currentTarget);
      add(j);
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function show(event) {
      var c = $(event.currentTarget);
      var that = c.parents(".fr-popup, .fr-toolbar").data("instance");
      if (0 != c.parents(".fr-popup").length || (c.data("popup") || that.popups.hideAll()), that.popups.areVisible() && !that.popups.areVisible(that)) {
        /** @type {number} */
        var i = 0;
        for (;i < $.FE.INSTANCES.length;i++) {
          if ($.FE.INSTANCES[i] != that) {
            if ($.FE.INSTANCES[i].popups) {
              if ($.FE.INSTANCES[i].popups.areVisible()) {
                $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
              }
            }
          }
        }
        that.popups.hideAll();
      }
      if (c.hasClass("fr-dropdown")) {
        init(event);
      } else {
        stop(event);
        if ($.FE.COMMANDS[c.data("cmd")]) {
          if (0 != $.FE.COMMANDS[c.data("cmd")].refreshAfterCallback) {
            that.button.bulkRefresh();
          }
        }
      }
    }
    /**
     * @param {Object} env
     * @return {undefined}
     */
    function Init(env) {
      var $active = env.find(".fr-dropdown.fr-active");
      if ($active.length) {
        $active.removeClass("fr-active");
        $active.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      }
    }
    /**
     * @param {?} evt
     * @return {undefined}
     */
    function stopEvent(evt) {
      evt.preventDefault();
      evt.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    function killEvent(event) {
      return event.stopPropagation(), self.helpers.isMobile() ? void 0 : false;
    }
    /**
     * @param {Object} context
     * @param {boolean} callback
     * @return {undefined}
     */
    function bind(context, callback) {
      self.events.bindClick(context, ".fr-command:not(.fr-disabled)", show);
      self.events.$on(context, self._mousedown + " " + self._mouseup + " " + self._move, ".fr-dropdown-menu", stopEvent, true);
      self.events.$on(context, self._mousedown + " " + self._mouseup + " " + self._move, ".fr-dropdown-menu .fr-dropdown-wrapper", killEvent, true);
      var doc = context.get(0).ownerDocument;
      var statsTemplate = "defaultView" in doc ? doc.defaultView : doc.parentWindow;
      /**
       * @param {Event} e
       * @return {undefined}
       */
      var init = function(e) {
        if (!e || (e.type == self._mouseup && e.target != $("html").get(0) || "keydown" == e.type && (self.keys.isCharacter(e.which) && !self.keys.ctrlKey(e) || e.which == $.FE.KEYCODE.ESC))) {
          Init(context);
        }
      };
      self.events.$on($(statsTemplate), self._mouseup + " resize keydown", init, true);
      if (self.opts.iframe) {
        self.events.$on(self.$win, self._mouseup, init, true);
      }
      if (context.hasClass("fr-popup")) {
        $.merge(ret, context.find(".fr-btn").toArray());
      } else {
        $.merge(nodes, context.find(".fr-btn").toArray());
      }
      self.tooltip.bind(context, ".fr-btn, .fr-title", callback);
    }
    /**
     * @param {string} event
     * @param {Object} obj
     * @return {?}
     */
    function select(event, obj) {
      /** @type {string} */
      var results = "";
      if (obj.html) {
        results += "function" == typeof obj.html ? obj.html.call(self) : obj.html;
      } else {
        var opts = obj.options;
        if ("function" == typeof opts) {
          opts = opts();
        }
        results += '<ul class="fr-dropdown-list">';
        var key;
        for (key in opts) {
          if (opts.hasOwnProperty(key)) {
            var delimiters = self.shortcuts.get(event + "." + key);
            /** @type {string} */
            delimiters = delimiters ? '<span class="fr-shortcut">' + delimiters + "</span>" : "";
            results += '<li><a class="fr-command" data-cmd="' + event + '" data-param1="' + key + '" title="' + opts[key] + '">' + self.language.translate(opts[key]) + "</a></li>";
          }
        }
        results += "</ul>";
      }
      return results;
    }
    /**
     * @param {string} key
     * @param {Object} options
     * @param {boolean} result
     * @return {?}
     */
    function process(key, options, result) {
      var fn = options.displaySelection;
      if ("function" == typeof fn) {
        fn = fn(self);
      }
      var f;
      if (fn) {
        var g = "function" == typeof options.defaultSelection ? options.defaultSelection(self) : options.defaultSelection;
        /** @type {string} */
        f = '<span style="width:' + (options.displaySelectionWidth || 100) + 'px">' + (g || self.language.translate(options.title)) + "</span>";
      } else {
        f = self.icon.create(options.icon || key);
      }
      /** @type {string} */
      var failureMessage = options.popup ? ' data-popup="true"' : "";
      var delimiters = self.shortcuts.get(key + ".");
      /** @type {string} */
      delimiters = delimiters ? " (" + delimiters + ")" : "";
      /** @type {string} */
      var src = '<button type="button" tabindex="-1" aria-label="' + (self.language.translate(options.title) || "") + '" title="' + (self.language.translate(options.title) || "") + delimiters + '" class="fr-command fr-btn' + ("dropdown" == options.type ? " fr-dropdown" : "") + (options.displaySelection ? " fr-selection" : "") + (options.back ? " fr-back" : "") + (options.disabled ? " fr-disabled" : "") + (result ? "" : " fr-hidden") + '" data-cmd="' + key + '"' + failureMessage + ">" + f + "</button>";
      if ("dropdown" == options.type) {
        /** @type {string} */
        var buf = '<div class="fr-dropdown-menu"><div class="fr-dropdown-wrapper"><div class="fr-dropdown-content">';
        buf += select(key, options);
        buf += "</div></div></div>";
        src += buf;
      }
      return src;
    }
    /**
     * @param {Array} args
     * @param {string} scope
     * @return {?}
     */
    function start(args, scope) {
      /** @type {string} */
      var tmp = "";
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        var last = args[i];
        var o = $.FE.COMMANDS[last];
        if (!(o && ("undefined" != typeof o.plugin && self.opts.pluginsEnabled.indexOf(o.plugin) < 0))) {
          if (o) {
            /** @type {boolean} */
            var expectationResult = "undefined" != typeof scope ? scope.indexOf(last) >= 0 : true;
            tmp += process(last, o, expectationResult);
          } else {
            if ("|" == last) {
              tmp += '<div class="fr-separator fr-vs"></div>';
            } else {
              if ("-" == last) {
                tmp += '<div class="fr-separator fr-hs"></div>';
              }
            }
          }
        }
      }
      return tmp;
    }
    /**
     * @param {Object} elem
     * @return {undefined}
     */
    function refresh(elem) {
      var url;
      var cur = elem.parents(".fr-popup, .fr-toolbar").data("instance") || self;
      var i = elem.data("cmd");
      if (elem.hasClass("fr-dropdown")) {
        url = elem.next();
      } else {
        elem.removeClass("fr-active");
      }
      if ($.FE.COMMANDS[i] && $.FE.COMMANDS[i].refresh) {
        $.FE.COMMANDS[i].refresh.apply(cur, [elem, url]);
      } else {
        if (self.refresh[i]) {
          cur.refresh[i](elem, url);
        }
      }
    }
    /**
     * @param {Array} nodes
     * @return {?}
     */
    function render(nodes) {
      var options = self.$tb ? self.$tb.data("instance") || self : self;
      return 0 == self.events.trigger("buttons.refresh") ? true : void setTimeout(function() {
        var b = options.selection.inEditor() && options.core.hasFocus();
        /** @type {number} */
        var i = 0;
        for (;i < nodes.length;i++) {
          var self = $(nodes[i]);
          var request = self.data("cmd");
          if (0 == self.parents(".fr-popup").length) {
            if (b || $.FE.COMMANDS[request] && $.FE.COMMANDS[request].forcedRefresh) {
              options.button.refresh(self);
            } else {
              if (!self.hasClass("fr-dropdown")) {
                self.removeClass("fr-active");
              }
            }
          } else {
            if (self.parents(".fr-popup").is(":visible")) {
              options.button.refresh(self);
            }
          }
        }
      }, 0);
    }
    /**
     * @return {undefined}
     */
    function application() {
      render(nodes);
      render(ret);
    }
    /**
     * @return {undefined}
     */
    function restoreScript() {
      /** @type {Array} */
      nodes = [];
      /** @type {Array} */
      ret = [];
    }
    /**
     * @return {undefined}
     */
    function unbind() {
      if (self.opts.toolbarInline) {
        self.events.on("toolbar.show", application);
      } else {
        self.events.on("mouseup", application);
        self.events.on("keyup", application);
        self.events.on("blur", application);
        self.events.on("focus", application);
        self.events.on("contentChanged", application);
      }
      self.events.on("shared.destroy", restoreScript);
    }
    /** @type {Array} */
    var nodes = [];
    if (self.opts.toolbarInline || self.opts.toolbarContainer) {
      if (!self.shared.buttons) {
        /** @type {Array} */
        self.shared.buttons = [];
      }
      nodes = self.shared.buttons;
    }
    /** @type {Array} */
    var ret = [];
    return self.shared.popup_buttons || (self.shared.popup_buttons = []), ret = self.shared.popup_buttons, {
      /** @type {function (): undefined} */
      _init : unbind,
      /** @type {function (Array, string): ?} */
      buildList : start,
      /** @type {function (Object, boolean): undefined} */
      bindCommands : bind,
      /** @type {function (Object): undefined} */
      refresh : refresh,
      /** @type {function (): undefined} */
      bulkRefresh : application,
      /** @type {function (Object): undefined} */
      exec : add
    };
  };
  $.FE.POPUP_TEMPLATES = {
    "text.edit" : "[_EDIT_]"
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.RegisterTemplate = function(i, offsetPosition) {
    $.FE.POPUP_TEMPLATES[i] = offsetPosition;
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.popups = function(self) {
    /**
     * @param {string} key
     * @param {Object} container
     * @return {undefined}
     */
    function add(key, container) {
      if (!container.is(":visible")) {
        container = $(self.opts.scrollableContainer);
      }
      if (!container.is(nodes[key].data("container"))) {
        nodes[key].data("container", container);
        container.append(nodes[key]);
      }
    }
    /**
     * @param {string} i
     * @param {?} x
     * @param {?} y
     * @param {number} allBindingsAccessor
     * @return {?}
     */
    function init(i, x, y, allBindingsAccessor) {
      if (remove() && (self.$el.find(".fr-marker").length > 0 && (self.events.disableBlur(), self.selection.restore())), fn([i]), !nodes[i]) {
        return false;
      }
      $(".fr-dropdown.fr-active").removeClass("fr-active").parent(".fr-toolbar").css("zIndex", "");
      nodes[i].data("instance", self);
      if (self.$tb) {
        self.$tb.data("instance", self);
      }
      var _barWidth = nodes[i].outerWidth();
      var k = (nodes[i].outerHeight(), has(i));
      nodes[i].addClass("fr-active").removeClass("fr-hidden").find("input, textarea").removeAttr("disabled");
      var el = nodes[i].data("container");
      if (el.is(self.$tb)) {
        self.$tb.css("zIndex", (self.opts.zIndex || 1) + 4);
      }
      if (self.opts.toolbarInline) {
        if (el) {
          if (self.$tb) {
            if (el.get(0) == self.$tb.get(0)) {
              add(i, $(self.opts.scrollableContainer));
              /** @type {number} */
              y = self.$tb.offset().top - self.helpers.getPX(self.$tb.css("margin-top"));
              x = self.$tb.offset().left + self.$tb.outerWidth() / 2 + (parseFloat(self.$tb.find(".fr-arrow").css("margin-left")) || 0) + self.$tb.find(".fr-arrow").outerWidth() / 2;
              if (self.$tb.hasClass("fr-above")) {
                if (y) {
                  y += self.$tb.outerHeight();
                }
              }
              /** @type {number} */
              allBindingsAccessor = 0;
            }
          }
        }
      }
      el = nodes[i].data("container");
      if (!!self.opts.iframe) {
        if (!allBindingsAccessor) {
          if (!k) {
            if (x) {
              x -= self.$iframe.offset().left;
            }
            if (y) {
              y -= self.$iframe.offset().top;
            }
          }
        }
      }
      if (x) {
        x -= _barWidth / 2;
      }
      if (self.opts.toolbarBottom) {
        if (el) {
          if (self.$tb) {
            if (el.get(0) == self.$tb.get(0)) {
              nodes[i].addClass("fr-above");
              if (y) {
                y -= nodes[i].outerHeight();
              }
            }
          }
        }
      }
      nodes[i].removeClass("fr-active");
      self.position.at(x, y, nodes[i], allBindingsAccessor || 0);
      nodes[i].addClass("fr-active");
      var selectedElement = nodes[i].find("input:visible, textarea:visible").get(0);
      if (selectedElement) {
        if (0 == self.$el.find(".fr-marker").length) {
          if (self.core.hasFocus()) {
            self.selection.save();
          }
        }
        self.events.disableBlur();
        $(selectedElement).select().focus();
      }
      if (self.opts.toolbarInline) {
        self.toolbar.hide();
      }
      self.events.trigger("popups.show." + i);
      create(i)._repositionPopup();
      resolve();
    }
    /**
     * @param {string} event
     * @param {Function} sender
     * @return {undefined}
     */
    function execute(event, sender) {
      self.events.on("popups.show." + event, sender);
    }
    /**
     * @param {string} i
     * @return {?}
     */
    function has(i) {
      return nodes[i] && (nodes[i].hasClass("fr-active") && self.core.sameInstance(nodes[i])) || false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function remove(value) {
      var i;
      for (i in nodes) {
        if (nodes.hasOwnProperty(i) && (has(i) && ("undefined" == typeof value || nodes[i].data("instance") == value))) {
          return true;
        }
      }
      return false;
    }
    /**
     * @param {string} i
     * @return {undefined}
     */
    function update(i) {
      if (nodes[i]) {
        if (nodes[i].hasClass("fr-active")) {
          nodes[i].removeClass("fr-active fr-above");
          self.events.trigger("popups.hide." + i);
          if (self.$tb) {
            if (self.opts.zIndex > 1) {
              self.$tb.css("zIndex", self.opts.zIndex + 1);
            } else {
              self.$tb.css("zIndex", "");
            }
          }
          self.events.disableBlur();
          nodes[i].find("input, textarea, button").filter(":focus").blur();
          nodes[i].find("input, textarea").attr("disabled", "disabled");
        }
      }
    }
    /**
     * @param {string} eventName
     * @param {Function} handler
     * @return {undefined}
     */
    function addListener(eventName, handler) {
      self.events.on("popups.hide." + eventName, handler);
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function next(mayParseLabeledStatementInstead) {
      var current = nodes[mayParseLabeledStatementInstead];
      if (current && !current.data("inst" + self.id)) {
        var model = create(mayParseLabeledStatementInstead);
        destroy(model, mayParseLabeledStatementInstead);
      }
      return current;
    }
    /**
     * @param {string} event
     * @param {Function} one
     * @return {undefined}
     */
    function on(event, one) {
      self.events.on("popups.refresh." + event, one);
    }
    /**
     * @param {string} event
     * @return {undefined}
     */
    function onclick(event) {
      self.events.trigger("popups.refresh." + event);
      var codeSegments = nodes[event].find(".fr-command");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var chunk = $(codeSegments[i]);
        if (0 == chunk.parents(".fr-dropdown-menu").length) {
          self.button.refresh(chunk);
        }
      }
    }
    /**
     * @param {Array} e
     * @return {undefined}
     */
    function fn(e) {
      if ("undefined" == typeof e) {
        /** @type {Array} */
        e = [];
      }
      var name;
      for (name in nodes) {
        if (nodes.hasOwnProperty(name)) {
          if (e.indexOf(name) < 0) {
            update(name);
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function method() {
      /** @type {boolean} */
      self.shared.exit_flag = true;
    }
    /**
     * @return {undefined}
     */
    function resolve() {
      /** @type {boolean} */
      self.shared.exit_flag = false;
    }
    /**
     * @return {?}
     */
    function constructor() {
      return self.shared.exit_flag;
    }
    /**
     * @param {string} property
     * @param {Object} context
     * @return {?}
     */
    function validate(property, context) {
      var fn = $.FE.POPUP_TEMPLATES[property];
      if ("function" == typeof fn) {
        fn = fn.apply(self);
      }
      var key;
      for (key in context) {
        if (context.hasOwnProperty(key)) {
          fn = fn.replace("[_" + key.toUpperCase() + "_]", context[key]);
        }
      }
      return fn;
    }
    /**
     * @param {string} key
     * @param {?} expression
     * @return {?}
     */
    function initialize(key, expression) {
      var result = validate(key, expression);
      var clone = $('<div class="fr-popup' + (self.helpers.isMobile() ? " fr-mobile" : " fr-desktop") + (self.opts.toolbarInline ? " fr-inline" : "") + '"><span class="fr-arrow"></span>' + result + "</div>");
      if (self.opts.theme) {
        clone.addClass(self.opts.theme + "-theme");
      }
      if (self.opts.zIndex > 1) {
        self.$tb.css("z-index", self.opts.zIndex + 2);
      }
      if ("auto" != self.opts.direction) {
        clone.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      clone.find("input, textarea").attr("dir", self.opts.direction).attr("disabled", "disabled");
      var container = $("body");
      return container.append(clone), clone.data("container", container), nodes[key] = clone, self.button.bindCommands(clone, false), clone;
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function create(name) {
      var d = nodes[name];
      return{
        /**
         * @return {undefined}
         */
        _windowResize : function() {
          var obj = d.data("instance") || self;
          if (!obj.helpers.isMobile()) {
            if (d.is(":visible")) {
              obj.events.disableBlur();
              obj.popups.hide(name);
              obj.events.enableBlur();
            }
          }
        },
        /**
         * @param {?} types
         * @return {undefined}
         */
        _inputFocus : function(types) {
          var obj = d.data("instance") || self;
          if (types.preventDefault(), setTimeout(function() {
            obj.events.enableBlur();
          }, 0), obj.helpers.isMobile()) {
            var oldScrollTop = $(obj.o_win).scrollTop();
            setTimeout(function() {
              $(obj.o_win).scrollTop(oldScrollTop);
            }, 0);
          }
        },
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        _inputBlur : function(dataAndEvents) {
          var scope = d.data("instance") || self;
          if (document.activeElement != this) {
            if ($(this).is(":visible")) {
              if (scope.events.blurActive()) {
                scope.events.trigger("blur");
              }
              scope.events.enableBlur();
            }
          }
        },
        /**
         * @param {Event} event
         * @return {?}
         */
        _inputKeydown : function(event) {
          var that = d.data("instance") || self;
          var key = event.which;
          if ($.FE.KEYCODE.TAB == key) {
            event.preventDefault();
            var children = d.find("input, textarea, button, select").filter(":visible").not(":disabled").toArray();
            children.sort(function(ctx, param) {
              return event.shiftKey ? $(ctx).attr("tabIndex") < $(param).attr("tabIndex") : $(ctx).attr("tabIndex") > $(param).attr("tabIndex");
            });
            that.events.disableBlur();
            var index = children.indexOf(this) + 1;
            if (index == children.length) {
              /** @type {number} */
              index = 0;
            }
            $(children[index]).focus();
          } else {
            if ($.FE.KEYCODE.ENTER == key) {
              if (d.find(".fr-submit:visible").length > 0) {
                event.preventDefault();
                event.stopPropagation();
                that.events.disableBlur();
                that.button.exec(d.find(".fr-submit:visible:first"));
              }
            } else {
              if ($.FE.KEYCODE.ESC == key) {
                return event.preventDefault(), event.stopPropagation(), that.$el.find(".fr-marker") && (that.events.disableBlur(), $(this).data("skip", true), that.selection.restore(), that.events.enableBlur()), has(name) && d.find(".fr-back:visible").length ? that.button.exec(d.find(".fr-back:visible:first")) : that.popups.hide(name), that.opts.toolbarInline && that.toolbar.showInline(null, true), false;
              }
              event.stopPropagation();
            }
          }
        },
        /**
         * @param {Event} e
         * @return {?}
         */
        _windowKeydown : function(e) {
          if (!self.core.sameInstance(d)) {
            return true;
          }
          var scope = d.data("instance") || self;
          var key = e.which;
          if ($.FE.KEYCODE.ESC == key) {
            if (has(name) && scope.opts.toolbarInline) {
              return e.stopPropagation(), has(name) && d.find(".fr-back:visible").length ? scope.button.exec(d.find(".fr-back:visible:first")) : (scope.popups.hide(name), scope.toolbar.showInline(null, true)), false;
            }
            if (has(name) && d.find(".fr-back:visible").length) {
              scope.button.exec(d.find(".fr-back:visible:first"));
            } else {
              scope.popups.hide(name);
            }
          }
        },
        /**
         * @param {Event} e
         * @return {undefined}
         */
        _editorKeydown : function(e) {
          var evt = d.data("instance") || self;
          if (!evt.keys.ctrlKey(e)) {
            if (!(e.which == $.FE.KEYCODE.ESC)) {
              if (has(name) && d.find(".fr-back:visible").length) {
                evt.button.exec(d.find(".fr-back:visible:first"));
              } else {
                evt.popups.hide(name);
              }
            }
          }
        },
        /**
         * @param {KeyboardEvent} e
         * @return {?}
         */
        _preventFocus : function(e) {
          var pdataOld = d.data("instance") || self;
          pdataOld.events.disableBlur();
          var el = e.originalEvent ? e.originalEvent.target || e.originalEvent.originalTarget : null;
          /** @type {string} */
          var filter = "input, textarea, button, select, label, .fr-command";
          return el && (!$(el).is(filter) && 0 === $(el).parents(filter).length) ? (e.stopPropagation(), false) : (el && ($(el).is(filter) && e.stopPropagation()), void resolve());
        },
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        _editorMouseup : function(dataAndEvents) {
          if (d.is(":visible")) {
            if (constructor()) {
              if (d.find("input:focus, textarea:focus, button:focus, select:focus").filter(":visible").length > 0) {
                self.events.disableBlur();
              }
            }
          }
        },
        /**
         * @param {?} event
         * @return {?}
         */
        _windowMouseup : function(event) {
          if (!self.core.sameInstance(d)) {
            return true;
          }
          var scope = d.data("instance") || self;
          if (d.is(":visible")) {
            if (constructor()) {
              event.stopPropagation();
              scope.markers.remove();
              scope.popups.hide(name);
              resolve();
            }
          }
        },
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        _doPlaceholder : function(dataAndEvents) {
          var codeSegments = $(this).next();
          if (0 == codeSegments.length) {
            $(this).after("<label>" + $(this).attr("placeholder") + "</label>");
          }
          $(this).toggleClass("fr-not-empty", "" != $(this).val());
        },
        /**
         * @param {?} dataAndEvents
         * @return {?}
         */
        _repositionPopup : function(dataAndEvents) {
          if (!self.opts.height && !self.opts.heightMax || self.opts.toolbarInline) {
            return true;
          }
          if (self.$wp && (has(name) && d.parent().get(0) == $(self.opts.scrollableContainer).get(0))) {
            /** @type {number} */
            var width = d.offset().top - self.$wp.offset().top;
            var height = self.$wp.outerHeight();
            if (d.hasClass("fr-above")) {
              width += d.outerHeight();
            }
            if (width > height || 0 > width) {
              d.addClass("fr-hidden");
            } else {
              d.removeClass("fr-hidden");
            }
          }
        }
      };
    }
    /**
     * @param {?} options
     * @param {(number|string)} name
     * @return {undefined}
     */
    function destroy(options, name) {
      self.events.on("mouseup", options._editorMouseup, true);
      if (self.$wp) {
        self.events.on("keydown", options._editorKeydown);
      }
      self.events.on("blur", function(dataAndEvents) {
        if (remove()) {
          self.markers.remove();
        }
        fn();
      });
      if (self.$wp) {
        if (!self.helpers.isMobile()) {
          self.events.$on(self.$wp, "scroll.popup" + name, options._repositionPopup);
        }
      }
      self.events.on("window.keydown", options._windowKeydown);
      self.events.on("window.mouseup", options._windowMouseup, true);
      nodes[name].data("inst" + self.id, true);
      self.events.on("destroy", function() {
        if (self.core.sameInstance(nodes[name])) {
          nodes[name].removeClass("fr-active").appendTo("body");
        }
      }, true);
    }
    /**
     * @param {string} data
     * @param {?} arg
     * @return {?}
     */
    function handler(data, arg) {
      var results = initialize(data, arg);
      var model = create(data);
      return destroy(model, data), self.events.$on(results, "mousedown mouseup touchstart touchend touch", "*", model._preventFocus, true), self.events.$on(results, "focus", "input, textarea, button, select", model._inputFocus, true), self.events.$on(results, "blur", "input, textarea, button, select", model._inputBlur, true), self.events.$on(results, "keydown", "input, textarea, button, select", model._inputKeydown, true), self.events.$on(results, "keydown keyup change input", "input, textarea", 
      model._doPlaceholder, true), self.helpers.isIOS() && self.events.$on(results, "touchend", "label", function() {
        $("#" + $(this).attr("for")).prop("checked", function(dataAndEvents, deepDataAndEvents) {
          return!deepDataAndEvents;
        });
      }, true), self.events.$on($(self.o_win), "resize", model._windowResize, true), results;
    }
    /**
     * @return {undefined}
     */
    function reset() {
      var nodeId;
      for (nodeId in nodes) {
        if (nodes.hasOwnProperty(nodeId)) {
          var node = nodes[nodeId];
          node.html("").removeData().remove();
          /** @type {null} */
          nodes[nodeId] = null;
        }
      }
      /** @type {Array} */
      nodes = [];
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.on("shared.destroy", reset, true);
      self.events.on("window.mousedown", method);
      self.events.on("window.touchmove", resolve);
      self.events.on("mousedown", function(event) {
        if (remove()) {
          event.stopPropagation();
          self.$el.find(".fr-marker").remove();
          method();
          self.events.disableBlur();
        }
      });
    }
    if (!self.shared.popups) {
      self.shared.popups = {};
    }
    var nodes = self.shared.popups;
    return self.shared.exit_flag = false, {
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (string, ?): ?} */
      create : handler,
      /** @type {function (number): ?} */
      get : next,
      /** @type {function (string, ?, ?, number): ?} */
      show : init,
      /** @type {function (string): undefined} */
      hide : update,
      /** @type {function (string, Function): undefined} */
      onHide : addListener,
      /** @type {function (Array): undefined} */
      hideAll : fn,
      /** @type {function (string, Object): undefined} */
      setContainer : add,
      /** @type {function (string): undefined} */
      refresh : onclick,
      /** @type {function (string, Function): undefined} */
      onRefresh : on,
      /** @type {function (string, Function): undefined} */
      onShow : execute,
      /** @type {function (string): ?} */
      isVisible : has,
      /** @type {function (?): ?} */
      areVisible : remove
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.position = function(self) {
    /**
     * @return {?}
     */
    function start() {
      var me;
      var range = self.selection.ranges(0);
      if (range && (range.collapsed && self.selection.inEditor())) {
        /** @type {boolean} */
        var e = false;
        if (0 == self.$el.find(".fr-marker").length) {
          self.selection.save();
          /** @type {boolean} */
          e = true;
        }
        var item = self.$el.find(".fr-marker:first");
        item.css("display", "inline");
        item.css("line-height", "");
        var offset = item.offset();
        var r = item.outerHeight();
        item.css("display", "none");
        item.css("line-height", 0);
        me = {};
        me.left = offset.left;
        /** @type {number} */
        me.width = 0;
        me.height = r;
        /** @type {number} */
        me.top = offset.top - (self.helpers.isIOS() ? 0 : $(self.o_win).scrollTop());
        /** @type {number} */
        me.right = 1;
        /** @type {number} */
        me.bottom = 1;
        /** @type {boolean} */
        me.ok = true;
        if (e) {
          self.selection.restore();
        }
      } else {
        if (range) {
          me = range.getBoundingClientRect();
        }
      }
      return me;
    }
    /**
     * @param {Object} element
     * @param {number} d
     * @param {number} deepDataAndEvents
     * @return {?}
     */
    function move(element, d, deepDataAndEvents) {
      var b = element.outerHeight();
      if (!self.helpers.isMobile() && (self.$tb && element.parent().get(0) != self.$tb.get(0))) {
        var a = (element.parent().height() - 20 - (self.opts.toolbarBottom ? self.$tb.outerHeight() : 0), element.parent().offset().top);
        /** @type {number} */
        var top = d - b - (deepDataAndEvents || 0);
        if (element.parent().get(0) == $(self.opts.scrollableContainer).get(0)) {
          a -= element.parent().position().top;
        }
        var h = $(self.opts.scrollableContainer).get(0).scrollHeight;
        if (a + d + b > $(self.opts.scrollableContainer).offset().top + h && element.parent().offset().top + top > 0) {
          /** @type {number} */
          d = top;
          element.addClass("fr-above");
        } else {
          element.removeClass("fr-above");
        }
      }
      return d;
    }
    /**
     * @param {Object} node
     * @param {number} a
     * @return {?}
     */
    function transform(node, a) {
      var b = node.outerWidth();
      return a + b > $(self.opts.scrollableContainer).width() - 10 && (a = $(self.opts.scrollableContainer).width() - b - 10), 0 > a && (a = 10), a;
    }
    /**
     * @param {Object} node
     * @return {undefined}
     */
    function render(node) {
      var elementRect = start();
      node.css("top", 0).css("left", 0);
      var olda = elementRect.top + elementRect.height;
      var distY = elementRect.left + elementRect.width / 2 - node.outerWidth() / 2 + $(self.o_win).scrollLeft();
      if (!self.opts.iframe) {
        olda += $(self.o_win).scrollTop();
      }
      position(distY, olda, node, elementRect.height);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {Object} node
     * @param {number} deepDataAndEvents
     * @return {undefined}
     */
    function position(x, y, node, deepDataAndEvents) {
      var p = node.data("container");
      if (!!p) {
        if (!(p.is("body") && "static" == p.css("position"))) {
          if (x) {
            x -= p.offset().left;
          }
          if (y) {
            y -= p.offset().top;
          }
          if ("BODY" != p.get(0).tagName) {
            if (x) {
              x += p.scrollLeft();
            }
            if (y) {
              y += p.scrollTop();
            }
          } else {
            if ("absolute" == p.css("position")) {
              if (x) {
                x += p.position().left;
              }
              if (y) {
                y += p.position().top;
              }
            }
          }
        }
      }
      if (self.opts.iframe) {
        if (p) {
          if (self.$tb) {
            if (p.get(0) != self.$tb.get(0)) {
              if (x) {
                x += self.$iframe.offset().left;
              }
              if (y) {
                y += self.$iframe.offset().top;
              }
            }
          }
        }
      }
      var t = transform(node, x);
      if (x) {
        node.css("left", t);
        var body = node.find(".fr-arrow");
        if (!body.data("margin-left")) {
          body.data("margin-left", self.helpers.getPX(body.css("margin-left")));
        }
        body.css("margin-left", x - t + body.data("margin-left"));
      }
      if (y) {
        node.css("top", move(node, y, deepDataAndEvents));
      }
    }
    /**
     * @param {?} selector
     * @return {undefined}
     */
    function init(selector) {
      var elem = $(selector);
      var e = elem.is(".fr-sticky-on");
      var check = elem.data("sticky-top");
      var currentValue = elem.data("sticky-scheduled");
      if ("undefined" == typeof check) {
        elem.data("sticky-top", 0);
        var $plum = $('<div class="fr-sticky-dummy" style="height: ' + elem.outerHeight() + 'px;"></div>');
        self.$box.prepend($plum);
      } else {
        self.$box.find(".fr-sticky-dummy").css("height", elem.outerHeight());
      }
      if (self.core.hasFocus() || self.$tb.find("input:visible:focus").length > 0) {
        var parentHeight = $(window).scrollTop();
        /** @type {number} */
        var value = Math.min(Math.max(parentHeight - self.$tb.parent().offset().top, 0), self.$tb.parent().outerHeight() - elem.outerHeight());
        if (value != check) {
          if (value != currentValue) {
            clearTimeout(elem.data("sticky-timeout"));
            elem.data("sticky-scheduled", value);
            if (elem.outerHeight() < parentHeight - self.$tb.parent().offset().top) {
              elem.addClass("fr-opacity-0");
            }
            elem.data("sticky-timeout", setTimeout(function() {
              var parentHeight = $(window).scrollTop();
              /** @type {number} */
              var value = Math.min(Math.max(parentHeight - self.$tb.parent().offset().top, 0), self.$tb.parent().outerHeight() - elem.outerHeight());
              if (value > 0) {
                if ("BODY" == self.$tb.parent().get(0).tagName) {
                  value += self.$tb.parent().position().top;
                }
              }
              if (value != check) {
                elem.css("top", Math.max(value, 0));
                elem.data("sticky-top", value);
                elem.data("sticky-scheduled", value);
              }
              elem.removeClass("fr-opacity-0");
            }, 100));
          }
        }
        if (!e) {
          elem.css("top", "0");
          elem.width(self.$tb.parent().width());
          elem.addClass("fr-sticky-on");
          self.$box.addClass("fr-sticky-box");
        }
      } else {
        clearTimeout($(selector).css("sticky-timeout"));
        elem.css("top", "0");
        elem.css("position", "");
        elem.width("");
        elem.data("sticky-top", 0);
        elem.removeClass("fr-sticky-on");
        self.$box.removeClass("fr-sticky-box");
      }
    }
    /**
     * @param {HTMLElement} target
     * @return {undefined}
     */
    function initialize(target) {
      if (target.offsetWidth) {
        var n;
        var c;
        var $this = $(target);
        var elemHeigth = $this.outerHeight();
        var value = $this.data("sticky-position");
        var b = $("body" == self.opts.scrollableContainer ? self.o_win : self.opts.scrollableContainer).outerHeight();
        /** @type {number} */
        var y = 0;
        /** @type {number} */
        var i = 0;
        if ("body" !== self.opts.scrollableContainer) {
          y = $(self.opts.scrollableContainer).offset().top;
          /** @type {number} */
          i = $(self.o_win).outerHeight() - y - b;
        }
        var a = "body" == self.opts.scrollableContainer ? $(self.o_win).scrollTop() : y;
        var m = $this.is(".fr-sticky-on");
        if (!$this.data("sticky-parent")) {
          $this.data("sticky-parent", $this.parent());
        }
        var image = $this.data("sticky-parent");
        var elemTop = image.offset().top;
        var elemHeight = image.outerHeight();
        if ($this.data("sticky-offset") || ($this.data("sticky-offset", true), $this.after('<div class="fr-sticky-dummy" style="height: ' + elemHeigth + 'px;"></div>')), !value) {
          /** @type {boolean} */
          var q = "auto" !== $this.css("top") || "auto" !== $this.css("bottom");
          if (!q) {
            $this.css("position", "fixed");
          }
          value = {
            top : $this.hasClass("fr-top"),
            bottom : $this.hasClass("fr-bottom")
          };
          if (!q) {
            $this.css("position", "");
          }
          $this.data("sticky-position", value);
          $this.data("top", $this.hasClass("fr-top") ? $this.css("top") : "auto");
          $this.data("bottom", $this.hasClass("fr-bottom") ? $this.css("bottom") : "auto");
        }
        /**
         * @return {?}
         */
        var isLocalStorageNameSupported = function() {
          return a + n > elemTop && elemTop + elemHeight - elemHeigth >= a + n;
        };
        /**
         * @return {?}
         */
        var _isArray = function() {
          return a + b - c > elemTop + elemHeigth && elemTop + elemHeight > a + b - c;
        };
        n = self.helpers.getPX($this.data("top"));
        c = self.helpers.getPX($this.data("bottom"));
        var program = value.top && isLocalStorageNameSupported();
        var inverse = value.bottom && _isArray();
        if (program || inverse) {
          $this.css("width", image.width() + "px");
          if (!m) {
            $this.addClass("fr-sticky-on");
            $this.removeClass("fr-sticky-off");
            if ($this.css("top")) {
              if ("auto" != $this.data("top")) {
                $this.css("top", self.helpers.getPX($this.data("top")) + y);
              } else {
                $this.data("top", "auto");
              }
            }
            if ($this.css("bottom")) {
              if ("auto" != $this.data("bottom")) {
                $this.css("bottom", self.helpers.getPX($this.data("bottom")) + i);
              } else {
                $this.css("bottom", "auto");
              }
            }
          }
        } else {
          if (!$this.hasClass("fr-sticky-off")) {
            $this.width("");
            $this.removeClass("fr-sticky-on");
            $this.addClass("fr-sticky-off");
            if ($this.css("top")) {
              if ("auto" != $this.css("top")) {
                $this.css("top", 0);
              }
            }
            if ($this.css("bottom")) {
              $this.css("bottom", 0);
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function fn() {
      /** @type {Element} */
      var elem = document.createElement("test");
      /** @type {(CSSStyleDeclaration|null)} */
      var options = elem.style;
      return options.cssText = "position:" + ["-webkit-", "-moz-", "-ms-", "-o-", ""].join("sticky; position:") + " sticky;", -1 !== options.position.indexOf("sticky") && (!self.helpers.isIOS() && !self.helpers.isAndroid());
    }
    /**
     * @return {undefined}
     */
    function link() {
      if (!fn()) {
        if (self._stickyElements = [], self.helpers.isIOS()) {
          /**
           * @return {undefined}
           */
          var resize = function() {
            self.helpers.requestAnimationFrame()(resize);
            /** @type {number} */
            var i = 0;
            for (;i < self._stickyElements.length;i++) {
              init(self._stickyElements[i]);
            }
          };
          resize();
          self.events.$on($(self.o_win), "scroll", function() {
            if (self.core.hasFocus()) {
              /** @type {number} */
              var i = 0;
              for (;i < self._stickyElements.length;i++) {
                var $target = $(self._stickyElements[i]);
                var pos0 = $target.parent();
                var documentHeight = $(window).scrollTop();
                if ($target.outerHeight() < documentHeight - pos0.offset().top) {
                  $target.addClass("fr-opacity-0");
                  $target.data("sticky-top", -1);
                  $target.data("sticky-scheduled", -1);
                }
              }
            }
          }, true);
        } else {
          self.events.$on($("body" == self.opts.scrollableContainer ? self.o_win : self.opts.scrollableContainer), "scroll", handler, true);
          self.events.$on($(self.o_win), "resize", handler, true);
          self.events.on("initialized", handler);
          self.events.on("focus", handler);
          self.events.$on($(self.o_win), "resize", "textarea", handler, true);
        }
      }
      self.events.on("destroy", function(dataAndEvents) {
        /** @type {Array} */
        self._stickyElements = [];
      });
    }
    /**
     * @return {undefined}
     */
    function handler() {
      /** @type {number} */
      var i = 0;
      for (;i < self._stickyElements.length;i++) {
        initialize(self._stickyElements[i]);
      }
    }
    /**
     * @param {Node} attr
     * @return {undefined}
     */
    function compile(attr) {
      attr.addClass("fr-sticky");
      if (self.helpers.isIOS()) {
        attr.addClass("fr-sticky-ios");
      }
      if (!fn()) {
        self._stickyElements.push(attr.get(0));
      }
    }
    /**
     * @return {undefined}
     */
    function update() {
      link();
    }
    return{
      /** @type {function (): undefined} */
      _init : update,
      /** @type {function (Object): undefined} */
      forSelection : render,
      /** @type {function (Node): undefined} */
      addSticky : compile,
      /** @type {function (): undefined} */
      refresh : handler,
      /** @type {function (?, ?, Object, number): undefined} */
      at : position,
      /** @type {function (): ?} */
      getBoundingRect : start
    };
  };
  /**
   * @param {Object} options
   * @return {?}
   */
  $.FE.MODULES.refresh = function(options) {
    /**
     * @param {HTMLElement} context
     * @return {undefined}
     */
    function draw(context) {
      context.toggleClass("fr-disabled", !options.undo.canDo());
    }
    /**
     * @param {HTMLElement} editor
     * @return {undefined}
     */
    function refreshButtons(editor) {
      editor.toggleClass("fr-disabled", !options.undo.canRedo());
    }
    /**
     * @param {Object} message
     * @return {?}
     */
    function parse(message) {
      if (message.hasClass("fr-no-refresh")) {
        return false;
      }
      var codeSegments = options.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i].previousSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
          node = node.previousSibling;
        }
        if ("LI" != codeSegments[i].tagName || node) {
          return message.removeClass("fr-disabled"), true;
        }
        message.addClass("fr-disabled");
      }
    }
    /**
     * @param {Object} player
     * @return {?}
     */
    function init(player) {
      if (player.hasClass("fr-no-refresh")) {
        return false;
      }
      var j = options.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < j.length;i++) {
        /** @type {string} */
        var which = "rtl" == options.opts.direction || "rtl" == $(j[i]).css("direction") ? "margin-right" : "margin-left";
        if ("LI" == j[i].tagName || "LI" == j[i].parentNode.tagName) {
          return player.removeClass("fr-disabled"), true;
        }
        if (options.helpers.getPX($(j[i]).css(which)) > 0) {
          return player.removeClass("fr-disabled"), true;
        }
      }
      player.addClass("fr-disabled");
    }
    return{
      /** @type {function (HTMLElement): undefined} */
      undo : draw,
      /** @type {function (HTMLElement): undefined} */
      redo : refreshButtons,
      /** @type {function (Object): ?} */
      outdent : init,
      /** @type {function (Object): ?} */
      indent : parse
    };
  };
  $.extend($.FE.DEFAULTS, {
    editInPopup : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.textEdit = function(self) {
    /**
     * @return {undefined}
     */
    function reset() {
      /** @type {string} */
      var edit = '<div id="fr-text-edit-' + self.id + '" class="fr-layer fr-text-edit-layer"><div class="fr-input-line"><input type="text" placeholder="' + self.language.translate("Text") + '" tabIndex="1"></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-submit" data-cmd="updateText" tabIndex="2">' + self.language.translate("Update") + "</button></div></div>";
      var html = {
        edit : edit
      };
      self.popups.create("text.edit", html);
    }
    /**
     * @return {undefined}
     */
    function init() {
      var invalidStr;
      var $page = self.popups.get("text.edit");
      invalidStr = "INPUT" === self.$el.prop("tagName") ? self.$el.attr("placeholder") : self.$el.text();
      $page.find("input").val(invalidStr).trigger("change");
      self.popups.setContainer("text.edit", $("body"));
      self.popups.show("text.edit", self.$el.offset().left + self.$el.outerWidth() / 2, self.$el.offset().top + self.$el.outerHeight(), self.$el.outerHeight());
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.$on(self.$el, self._mouseup, function(dataAndEvents) {
        setTimeout(function() {
          init();
        }, 10);
      });
    }
    /**
     * @return {undefined}
     */
    function update() {
      var $page = self.popups.get("text.edit");
      var newValue = $page.find("input").val();
      if (0 == newValue.length) {
        newValue = self.opts.placeholderText;
      }
      if ("INPUT" === self.$el.prop("tagName")) {
        self.$el.attr("placeholder", newValue);
      } else {
        self.$el.text(newValue);
      }
      self.events.trigger("contentChanged");
      self.popups.hide("text.edit");
    }
    /**
     * @return {undefined}
     */
    function start() {
      if (self.opts.editInPopup) {
        reset();
        setup();
      }
    }
    return{
      /** @type {function (): undefined} */
      _init : start,
      /** @type {function (): undefined} */
      update : update
    };
  };
  $.FE.RegisterCommand("updateText", {
    focus : false,
    undo : false,
    /**
     * @return {undefined}
     */
    callback : function() {
      this.textEdit.update();
    }
  });
  $.extend($.FE.DEFAULTS, {
    toolbarBottom : false,
    toolbarButtons : ["fullscreen", "bold", "italic", "underline", "strikeThrough", "subscript", "superscript", "fontFamily", "fontSize", "|", "color", "emoticons", "inlineStyle", "paragraphStyle", "|", "paragraphFormat", "align", "formatOL", "formatUL", "outdent", "indent", "quote", "insertHR", "-", "insertLink", "insertImage", "insertVideo", "insertFile", "insertTable", "undo", "redo", "clearFormatting", "selectAll", "html", "applyFormat", "removeFormat"],
    toolbarButtonsXS : ["bold", "italic", "fontFamily", "fontSize", "|", "undo", "redo"],
    toolbarButtonsSM : ["bold", "italic", "underline", "|", "fontFamily", "fontSize", "insertLink", "insertImage", "table", "|", "undo", "redo"],
    toolbarButtonsMD : ["fullscreen", "bold", "italic", "underline", "fontFamily", "fontSize", "color", "paragraphStyle", "paragraphFormat", "align", "formatOL", "formatUL", "outdent", "indent", "quote", "insertHR", "-", "insertLink", "insertImage", "insertVideo", "insertFile", "insertTable", "undo", "redo", "clearFormatting"],
    toolbarContainer : null,
    toolbarInline : false,
    toolbarSticky : true,
    toolbarStickyOffset : 0,
    toolbarVisibleWithoutSelection : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.toolbar = function(self) {
    /**
     * @param {Array} results
     * @param {Array} arg
     * @return {undefined}
     */
    function log(results, arg) {
      /** @type {number} */
      var j = 0;
      for (;j < arg.length;j++) {
        if ("-" != arg[j]) {
          if ("|" != arg[j]) {
            if (results.indexOf(arg[j]) < 0) {
              results.push(arg[j]);
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function draw() {
      var list = $.merge([], keys());
      log(list, self.opts.toolbarButtonsXS || []);
      log(list, self.opts.toolbarButtonsSM || []);
      log(list, self.opts.toolbarButtonsMD || []);
      log(list, self.opts.toolbarButtons);
      /** @type {number} */
      var i = list.length - 1;
      for (;i >= 0;i--) {
        if ("-" != list[i]) {
          if ("|" != list[i]) {
            if (list.indexOf(list[i]) < i) {
              list.splice(i, 1);
            }
          }
        }
      }
      var sorted = self.button.buildList(list, keys());
      self.$tb.append(sorted);
      self.button.bindCommands(self.$tb);
    }
    /**
     * @return {?}
     */
    function keys() {
      var objUid = self.helpers.screenSize();
      return map[objUid];
    }
    /**
     * @return {undefined}
     */
    function start() {
      var codeSegments = keys();
      self.$tb.find(".fr-separator").remove();
      self.$tb.find("> .fr-command").addClass("fr-hidden");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if ("|" == codeSegments[i] || "-" == codeSegments[i]) {
          self.$tb.append(self.button.buildList([codeSegments[i]]));
        } else {
          var header = self.$tb.find('> .fr-command[data-cmd="' + codeSegments[i] + '"]');
          /** @type {null} */
          var option = null;
          if (header.next().hasClass("fr-dropdown-menu")) {
            option = header.next();
          }
          header.removeClass("fr-hidden").appendTo(self.$tb);
          if (option) {
            option.appendTo(self.$tb);
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function addListener() {
      self.events.$on($(self.o_win), "resize", start, true);
      self.events.$on($(self.o_win), "orientationchange", start, true);
    }
    /**
     * @param {Object} e
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function onSuccess(e, dataAndEvents) {
      setTimeout(function() {
        if (e && e.which == $.FE.KEYCODE.ESC) {
        } else {
          if (self.selection.inEditor() && (self.core.hasFocus() && (!self.popups.areVisible() && (self.opts.toolbarVisibleWithoutSelection && (e && "keyup" != e.type) || (!self.selection.isCollapsed() && !self.keys.isIME() || dataAndEvents))))) {
            if (self.$tb.data("instance", self), 0 == self.events.trigger("toolbar.show", [e])) {
              return false;
            }
            if (!self.opts.toolbarContainer) {
              self.position.forSelection(self.$tb);
            }
            self.$tb.show();
          }
        }
      }, 0);
    }
    /**
     * @param {string} keepData
     * @return {?}
     */
    function remove(keepData) {
      var current = $(".fr-dropdown.fr-active");
      return current.next().find(self.o_doc.activeElement).length ? true : void(self.events.trigger("toolbar.hide") !== false && self.$tb.hide());
    }
    /**
     * @return {?}
     */
    function show() {
      return 0 == self.events.trigger("toolbar.show") ? false : void self.$tb.show();
    }
    /**
     * @return {undefined}
     */
    function handler() {
      self.events.on("window.mousedown", remove);
      self.events.on("keydown", remove);
      self.events.on("blur", remove);
      self.events.on("window.mouseup", onSuccess);
      if (self.helpers.isMobile()) {
        if (!self.helpers.isIOS()) {
          self.events.on("window.touchend", onSuccess);
          if (self.browser.mozilla) {
            setInterval(onSuccess, 200);
          }
        }
      } else {
        self.events.on("window.keyup", onSuccess);
      }
      self.events.on("keydown", function(e) {
        if (e) {
          if (e.which == $.FE.KEYCODE.ESC) {
            remove();
          }
        }
      });
      self.events.$on(self.$wp, "scroll.toolbar", onSuccess);
      self.events.on("commands.after", onSuccess);
      if (self.helpers.isMobile()) {
        self.events.$on(self.$doc, "selectionchange", onSuccess);
        self.events.$on(self.$doc, "orientationchange", onSuccess);
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      if (self.opts.toolbarInline) {
        $(self.opts.scrollableContainer).append(self.$tb);
        self.$tb.data("container", $(self.opts.scrollableContainer));
        self.$tb.addClass("fr-inline");
        self.$tb.prepend('<span class="fr-arrow"></span>');
        handler();
        /** @type {boolean} */
        self.opts.toolbarBottom = false;
      } else {
        if (self.opts.toolbarBottom && !self.helpers.isIOS()) {
          self.$box.append(self.$tb);
          self.$tb.addClass("fr-bottom");
          self.$box.addClass("fr-bottom");
        } else {
          /** @type {boolean} */
          self.opts.toolbarBottom = false;
          self.$box.prepend(self.$tb);
          self.$tb.addClass("fr-top");
          self.$box.addClass("fr-top");
        }
        self.$tb.addClass("fr-basic");
        if (self.opts.toolbarSticky) {
          if (self.opts.toolbarStickyOffset) {
            if (self.opts.toolbarBottom) {
              self.$tb.css("bottom", self.opts.toolbarStickyOffset);
            } else {
              self.$tb.css("top", self.opts.toolbarStickyOffset);
            }
          }
          self.position.addSticky(self.$tb);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function reset() {
      self.$tb.html("").removeData().remove();
      /** @type {null} */
      self.$tb = null;
    }
    /**
     * @return {undefined}
     */
    function toggle() {
      self.$box.removeClass("fr-top fr-bottom fr-inline fr-basic");
      self.$box.find(".fr-sticky-dummy").remove();
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.opts.theme) {
        self.$tb.addClass(self.opts.theme + "-theme");
      }
      if (self.opts.zIndex > 1) {
        self.$tb.css("z-index", self.opts.zIndex + 1);
      }
      if ("auto" != self.opts.direction) {
        self.$tb.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      if (self.helpers.isMobile()) {
        self.$tb.addClass("fr-mobile");
      } else {
        self.$tb.addClass("fr-desktop");
      }
      if (self.opts.toolbarContainer) {
        if (self.opts.toolbarInline) {
          handler();
          remove();
        }
        if (self.opts.toolbarBottom) {
          self.$tb.addClass("fr-bottom");
        } else {
          self.$tb.addClass("fr-top");
        }
      } else {
        render();
      }
      doc = self.$tb.get(0).ownerDocument;
      t = "defaultView" in doc ? doc.defaultView : doc.parentWindow;
      draw();
      addListener();
      self.events.$on(self.$tb, self._mousedown + " " + self._mouseup, function(e) {
        var offsetParent = e.originalEvent ? e.originalEvent.target || e.originalEvent.originalTarget : null;
        return offsetParent && ("INPUT" != offsetParent.tagName && !self.edit.isDisabled()) ? (e.stopPropagation(), e.preventDefault(), false) : void 0;
      }, true);
    }
    /**
     * @return {?}
     */
    function setup() {
      return self.$wp ? (self.opts.toolbarContainer ? (self.shared.$tb ? (self.$tb = self.shared.$tb, self.opts.toolbarInline && handler()) : (self.shared.$tb = $('<div class="fr-toolbar"></div>'), self.$tb = self.shared.$tb, $(self.opts.toolbarContainer).append(self.$tb), init(), self.$tb.data("instance", self)), self.opts.toolbarInline ? self.$box.addClass("fr-inline") : self.$box.addClass("fr-basic"), self.events.on("focus", function() {
        self.$tb.data("instance", self);
      }, true), self.opts.toolbarInline = false) : self.opts.toolbarInline ? (self.$box.addClass("fr-inline"), self.shared.$tb ? (self.$tb = self.shared.$tb, handler()) : (self.shared.$tb = $('<div class="fr-toolbar"></div>'), self.$tb = self.shared.$tb, init())) : (self.$box.addClass("fr-basic"), self.$tb = $('<div class="fr-toolbar"></div>'), init(), self.$tb.data("instance", self)), self.events.on("destroy", toggle, true), void self.events.on(self.opts.toolbarInline ? "shared.destroy" : "destroy", 
      reset, true)) : false;
    }
    /**
     * @return {undefined}
     */
    function disable() {
      if (!v) {
        if (self.$tb) {
          self.$tb.find("> .fr-command").addClass("fr-disabled fr-no-refresh");
          /** @type {boolean} */
          v = true;
        }
      }
    }
    /**
     * @return {undefined}
     */
    function mouseDown() {
      if (v) {
        if (self.$tb) {
          self.$tb.find("> .fr-command").removeClass("fr-disabled fr-no-refresh");
          /** @type {boolean} */
          v = false;
        }
      }
      self.button.bulkRefresh();
    }
    var doc;
    var t;
    /** @type {Array} */
    var map = [];
    map[$.FE.XS] = self.opts.toolbarButtonsXS || self.opts.toolbarButtons;
    map[$.FE.SM] = self.opts.toolbarButtonsSM || self.opts.toolbarButtons;
    map[$.FE.MD] = self.opts.toolbarButtonsMD || self.opts.toolbarButtons;
    map[$.FE.LG] = self.opts.toolbarButtons;
    /** @type {boolean} */
    var v = false;
    return{
      /** @type {function (): ?} */
      _init : setup,
      /** @type {function (string): ?} */
      hide : remove,
      /** @type {function (): ?} */
      show : show,
      /** @type {function (Object, boolean): undefined} */
      showInline : onSuccess,
      /** @type {function (): undefined} */
      disable : disable,
      /** @type {function (): undefined} */
      enable : mouseDown
    };
  };
});
